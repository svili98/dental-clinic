{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nDentalCare is a full-stack dental clinic management system built with modern web technologies. The application provides comprehensive patient management, appointment scheduling, file storage, and medical record keeping capabilities for dental practices. It features a React-based frontend with TypeScript for type safety, an Express.js backend with in-memory storage, and a PostgreSQL database using Drizzle ORM for data persistence.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes\n\n## August 8, 2025 - Migration from Replit Agent to Replit Environment\n- Successfully migrated project from Replit Agent to standard Replit environment\n- Resolved dependency installation issues and ensured all packages are properly installed\n- Verified application startup and all API endpoints are functioning correctly\n- Application now runs cleanly on Replit infrastructure with proper security practices\n- All existing functionality preserved including employee management, appointments, odontogram, and patient records\n\n# Recent Changes\n\n## August 8, 2025 - Employee Management and Role-Based Access Control System\n- Created comprehensive employee management system with PostgreSQL database integration\n- Added roles, employees, and user sessions tables with proper relationships and foreign key constraints\n- Built complete employee management interface with search, filtering, and status management\n- Implemented role-based permission system (Administrator, Dentist, Dental Assistant, Receptionist)\n- Created tabbed settings page with General Settings, Employee Management, and Permissions sections\n- Added employee statistics dashboard showing total, active, inactive employees and roles\n- Built permission matrix showing detailed access rights for each role across all system features\n- Employee management includes profile information, role assignment, and activation/deactivation\n- All employee data stored in database with proper validation and type safety using Drizzle ORM\n- Settings page now provides comprehensive user access control and permission management\n\n## August 8, 2025 - Complete Setmore Appointment System with Calendar and Booking\n- Successfully integrated Setmore API with full mock data support for development mode\n- Enhanced appointment schema with all Setmore-specific fields (service keys, staff keys, customer data)\n- Built complete appointment booking modal with patient selection, service selection, and time slot booking\n- Implemented comprehensive calendar view with monthly navigation and appointment visualization\n- Added services management page showing all available dental treatments and healthcare providers\n- Created tabbed appointments page with both calendar and list views\n- Updated patient details page with integrated appointment booking functionality\n- Fixed Setmore integration to use mock data in development with clear production switch comments\n- Added services navigation link to sidebar for easy access to treatment options\n- Created comprehensive financial recording system supporting both payments and outstanding balances\n- Fixed odontogram layout to match proper FDI World Dental Federation numbering system\n- All appointment booking functionality working with proper data flow and calendar integration\n\n## August 7, 2025 - Comprehensive Odontogram Implementation\n- Successfully migrated project from Replit Agent to Replit environment\n- Added complete odontogram (dental chart) functionality to patient details:\n  - Database schema for tooth records with Universal Numbering System (1-32)\n  - Support for 14 different tooth conditions (healthy, caries, filled, crown, etc.)\n  - Color-coded visual representation of all teeth\n  - Interactive tooth selection with detailed condition editing\n  - Surface notation support (M, O, D, B/L, I) for precise treatment tracking\n  - Treatment history and notes for each tooth\n  - Professional dental charting with proper legend and symbols\n- Backend API implementation:\n  - RESTful endpoints for CRUD operations on tooth records\n  - Proper validation using Zod schemas\n  - Integration with existing patient management system\n- Frontend implementation:\n  - Comprehensive odontogram UI component with visual tooth chart\n  - Modal dialogs for editing tooth conditions and treatments\n  - Integration with patient details page for easy access\n  - Responsive design with professional dental clinic aesthetics\n- All functionality tested and working correctly with proper data flow\n\n## January 6, 2025 - Enhanced Patient Details and Medical Records\n- Fixed medical-records route functionality - now fully working with comprehensive patient selection\n- Enhanced patient details page with detailed treatment history showing:\n  - Treatment notes and comments for each appointment\n  - Doctor information and treatment IDs\n  - Duration and fee information\n  - Follow-up requirements\n- Added comprehensive financial tracking system:\n  - Payment summary cards (Total Paid, Outstanding, Total Due)\n  - Outstanding payment details with due dates\n  - Patient financial overview in sidebar\n  - Record payment functionality\n- Improved appointment history display with:\n  - Detailed treatment descriptions\n  - Status indicators and completion notes\n  - Treatment progression tracking\n  - Professional medical record format\n\n## January 6, 2025 - Dashboard and Patient Form Improvements\n- Removed \"Files Uploaded\" statistic from dashboard per user feedback\n- Updated dashboard to show only 3 key metrics: Total Patients, Today's Appointments, Monthly Revenue\n- Enhanced patient creation form with medical conditions selection:\n  - Added 15 common medical conditions with checkbox selection\n  - Visual display of selected conditions with removal capability\n  - Professional medical conditions tracking\n- Added file upload capability to patient creation:\n  - Drag-and-drop file upload interface\n  - Support for PDF, JPG, PNG, DOC, DOCX files\n  - File size display and removal functionality\n  - Professional document management during patient registration\n- Created comprehensive Settings page for administrators:\n  - Revenue visibility controls for different user roles\n  - Administrator vs Staff member permission management\n  - Financial data access configuration\n  - Professional role-based access control system\n\n# System Architecture\n\n## Frontend Architecture\n\nThe frontend is built as a Single Page Application (SPA) using React 18 with TypeScript for enhanced type safety and developer experience. The application uses Vite as the build tool for fast development and optimized production builds.\n\n**State Management**: The application employs a hybrid approach using React Query (TanStack Query) for server state management combined with React's built-in useState for local UI state. This separation ensures efficient data fetching, caching, and synchronization with the backend while keeping local state management simple.\n\n**UI Framework**: The project uses shadcn/ui components built on top of Radix UI primitives, providing accessible and customizable components. Tailwind CSS handles styling with a custom medical theme incorporating dental-specific color schemes and design patterns.\n\n**Routing**: Wouter is used for client-side routing, providing a lightweight alternative to React Router with similar functionality.\n\n**Component Structure**: Components are organized into feature-based folders (patients, appointments, files) with shared UI components in a common directory. This promotes code reusability and maintainable architecture.\n\n## Backend Architecture\n\nThe backend follows a simplified REST API design using Express.js with TypeScript. Currently implements an in-memory storage pattern but is architected to easily transition to database persistence.\n\n**API Design**: RESTful endpoints follow standard HTTP conventions with consistent response formats. The API includes routes for patients, appointments, files, and dashboard statistics.\n\n**Data Validation**: Zod schemas provide runtime type validation and are shared between frontend and backend through the shared directory, ensuring type consistency across the application.\n\n**Error Handling**: Centralized error handling middleware captures and formats errors consistently across all endpoints.\n\n**File Handling**: The system includes file upload capabilities for patient documents and medical images, with proper file type validation and storage management.\n\n## Data Storage Strategy\n\n**Database**: PostgreSQL is configured as the primary database with Drizzle ORM providing type-safe database operations and migrations.\n\n**Schema Design**: The database schema includes core entities for patients, appointments, medical conditions, and patient files with proper relationships and constraints. Audit fields track creation and modification timestamps.\n\n**Current Implementation**: The application currently uses in-memory storage for development, with the storage interface designed to seamlessly transition to database operations.\n\n## Authentication and Authorization\n\nThe current implementation includes session-based authentication infrastructure with placeholder for future authentication implementation. The system is prepared for role-based access control for different user types (doctors, staff, administrators).\n\n# External Dependencies\n\n## UI and Design System\n- **shadcn/ui**: Component library built on Radix UI primitives\n- **Radix UI**: Accessible, unstyled UI components\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **Lucide React**: Icon library for consistent iconography\n\n## State Management and Data Fetching\n- **TanStack React Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime schema validation\n\n## Database and ORM\n- **Drizzle ORM**: Type-safe ORM for PostgreSQL\n- **Neon Database**: Serverless PostgreSQL database service\n- **PostgreSQL**: Primary database system\n\n## Development and Build Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type-safe JavaScript development\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## File Upload and Handling\n- **React Dropzone**: Drag-and-drop file upload interface\n\n## Date and Time Management\n- **date-fns**: Modern JavaScript date utility library\n\n## Navigation and Routing\n- **Wouter**: Lightweight client-side routing\n\n## Session Management\n- **connect-pg-simple**: PostgreSQL session store for Express sessions","size_bytes":10511},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPatientSchema, insertAppointmentSchema, insertPatientFileSchema, insertToothRecordSchema, insertRoleSchema, insertEmployeeSchema, insertSettingsSchema, loginSchema } from \"@shared/schema\";\nimport { getSetmoreService } from \"./services/setmore-service\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Patients routes\n  app.get(\"/api/patients\", async (req, res) => {\n    try {\n      const { search, pageNumber, pageSize } = req.query;\n      const params = {\n        search: search as string,\n        pageNumber: pageNumber ? parseInt(pageNumber as string) : undefined,\n        pageSize: pageSize ? parseInt(pageSize as string) : undefined,\n      };\n      const result = await storage.getPatients(params);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patients\" });\n    }\n  });\n\n  app.get(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const patient = await storage.getPatient(id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient\" });\n    }\n  });\n\n  app.post(\"/api/patients\", async (req, res) => {\n    try {\n      const validatedData = insertPatientSchema.parse(req.body);\n      const patient = await storage.createPatient(validatedData);\n      res.status(201).json(patient);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create patient\" });\n    }\n  });\n\n  app.put(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertPatientSchema.partial().parse(req.body);\n      const patient = await storage.updatePatient(id, validatedData);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update patient\" });\n    }\n  });\n\n  app.delete(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deletePatient(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete patient\" });\n    }\n  });\n\n  // Appointments routes\n  app.get(\"/api/appointments\", async (req, res) => {\n    try {\n      const { patientId, date, pageNumber, pageSize } = req.query;\n      const params = {\n        patientId: patientId ? parseInt(patientId as string) : undefined,\n        date: date as string,\n        pageNumber: pageNumber ? parseInt(pageNumber as string) : undefined,\n        pageSize: pageSize ? parseInt(pageSize as string) : undefined,\n      };\n      const result = await storage.getAppointments(params);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.get(\"/api/appointments/today\", async (req, res) => {\n    try {\n      const appointments = await storage.getTodayAppointments();\n      res.json(appointments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch today's appointments\" });\n    }\n  });\n\n  app.post(\"/api/appointments\", async (req, res) => {\n    try {\n      const validatedData = insertAppointmentSchema.parse(req.body);\n      const appointment = await storage.createAppointment(validatedData);\n      res.status(201).json(appointment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create appointment\" });\n    }\n  });\n\n  // Files routes\n  app.get(\"/api/patients/:patientId/files\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const files = await storage.getPatientFiles(patientId);\n      res.json(files);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch patient files\" });\n    }\n  });\n\n  app.post(\"/api/files\", async (req, res) => {\n    try {\n      const validatedData = insertPatientFileSchema.parse(req.body);\n      const file = await storage.createPatientFile(validatedData);\n      res.status(201).json(file);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create file record\" });\n    }\n  });\n\n  app.delete(\"/api/files/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deletePatientFile(id);\n      if (!success) {\n        return res.status(404).json({ message: \"File not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete file\" });\n    }\n  });\n\n  // Medical conditions\n  app.get(\"/api/medical-conditions\", async (req, res) => {\n    try {\n      const conditions = await storage.getMedicalConditions();\n      res.json(conditions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch medical conditions\" });\n    }\n  });\n\n  // Tooth Records (Odontogram) routes\n  app.get(\"/api/patients/:patientId/teeth\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const toothRecords = await storage.getPatientToothRecords(patientId);\n      res.json(toothRecords);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tooth records\" });\n    }\n  });\n\n  app.post(\"/api/teeth\", async (req, res) => {\n    try {\n      const validatedData = insertToothRecordSchema.parse(req.body);\n      const toothRecord = await storage.createToothRecord(validatedData);\n      res.status(201).json(toothRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create tooth record\" });\n    }\n  });\n\n  app.put(\"/api/teeth/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertToothRecordSchema.partial().parse(req.body);\n      const toothRecord = await storage.updateToothRecord(id, validatedData);\n      if (!toothRecord) {\n        return res.status(404).json({ message: \"Tooth record not found\" });\n      }\n      res.json(toothRecord);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update tooth record\" });\n    }\n  });\n\n  app.delete(\"/api/teeth/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteToothRecord(id);\n      if (!success) {\n        return res.status(404).json({ message: \"Tooth record not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete tooth record\" });\n    }\n  });\n\n  // Medical Notes routes\n  app.get(\"/api/patients/:patientId/medical-notes\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const notes = await storage.getPatientMedicalNotes(patientId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch medical notes\" });\n    }\n  });\n\n  app.post(\"/api/patients/:patientId/medical-notes\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const { title, content, noteType = 'general' } = req.body;\n      if (!title || !content) {\n        return res.status(400).json({ message: 'Title and content are required' });\n      }\n      const note = await storage.createMedicalNote({ patientId, title, content, noteType });\n      res.status(201).json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create medical note\" });\n    }\n  });\n\n  // Treatment History routes\n  app.get(\"/api/patients/:patientId/treatment-history\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const treatments = await storage.getPatientTreatmentHistory(patientId);\n      res.json(treatments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch treatment history\" });\n    }\n  });\n\n  app.post(\"/api/patients/:patientId/treatment-history\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const { treatmentType, description, toothNumbers, duration = 30, cost = 0, notes } = req.body;\n      if (!treatmentType || !description) {\n        return res.status(400).json({ message: 'Treatment type and description are required' });\n      }\n      const treatment = await storage.createTreatmentHistory({\n        patientId, \n        treatmentType, \n        description, \n        toothNumbers, \n        duration: parseInt(duration) || 30, \n        cost: parseInt(cost) || 0, \n        notes\n      });\n      res.status(201).json(treatment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create treatment history\" });\n    }\n  });\n\n  // Payment Records routes\n  app.post(\"/api/patients/:patientId/payments\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const { amount, paymentMethod = 'cash', appointmentId, treatmentId, notes } = req.body;\n      if (!amount || amount <= 0) {\n        return res.status(400).json({ message: 'Valid amount is required' });\n      }\n      const payment = await storage.createPaymentRecord({\n        patientId,\n        amount: parseInt(amount),\n        paymentMethod,\n        appointmentId: appointmentId ? parseInt(appointmentId) : undefined,\n        treatmentId: treatmentId ? parseInt(treatmentId) : undefined,\n        notes\n      });\n      res.status(201).json(payment);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create payment record\" });\n    }\n  });\n\n  app.get(\"/api/patients/:patientId/payments\", async (req, res) => {\n    try {\n      const patientId = parseInt(req.params.patientId);\n      const payments = await storage.getPatientPaymentRecords(patientId);\n      res.json(payments);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch payment records\" });\n    }\n  });\n\n  // Role Management Routes\n  app.get(\"/api/roles\", async (req, res) => {\n    try {\n      const roles = await storage.getRoles();\n      res.json(roles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch roles\" });\n    }\n  });\n\n  app.get(\"/api/roles/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const role = await storage.getRole(id);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.json(role);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch role\" });\n    }\n  });\n\n  app.post(\"/api/roles\", async (req, res) => {\n    try {\n      const validatedData = insertRoleSchema.parse(req.body);\n      const role = await storage.createRole(validatedData);\n      res.status(201).json(role);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create role\" });\n    }\n  });\n\n  app.put(\"/api/roles/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertRoleSchema.partial().parse(req.body);\n      const role = await storage.updateRole(id, validatedData);\n      if (!role) {\n        return res.status(404).json({ message: \"Role not found\" });\n      }\n      res.json(role);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  app.delete(\"/api/roles/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteRole(id);\n      if (!deleted) {\n        return res.status(400).json({ message: \"Cannot delete role that is in use\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete role\" });\n    }\n  });\n\n  // Employee Management Routes\n  app.get(\"/api/employees\", async (req, res) => {\n    try {\n      const { search, isActive, roleId } = req.query;\n      const params = {\n        search: search as string,\n        isActive: isActive === 'true' ? true : isActive === 'false' ? false : undefined,\n        roleId: roleId ? parseInt(roleId as string) : undefined,\n      };\n      const employees = await storage.getEmployees(params);\n      res.json(employees);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch employees\" });\n    }\n  });\n\n  app.get(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const employee = await storage.getEmployee(id);\n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch employee\" });\n    }\n  });\n\n  app.post(\"/api/employees\", async (req, res) => {\n    try {\n      const validatedData = insertEmployeeSchema.parse(req.body);\n      const employee = await storage.createEmployee(validatedData);\n      res.status(201).json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create employee\" });\n    }\n  });\n\n  app.put(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const validatedData = insertEmployeeSchema.partial().parse(req.body);\n      const employee = await storage.updateEmployee(id, validatedData);\n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update employee\" });\n    }\n  });\n\n  app.delete(\"/api/employees/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteEmployee(id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete employee\" });\n    }\n  });\n\n  app.patch(\"/api/employees/:id/status\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { isActive } = req.body;\n      const employee = await storage.setEmployeeStatus(id, isActive);\n      if (!employee) {\n        return res.status(404).json({ message: \"Employee not found\" });\n      }\n      res.json(employee);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update employee status\" });\n    }\n  });\n\n  // Setmore API Integration Routes\n  const setmoreService = getSetmoreService();\n\n  // Get all services\n  app.get(\"/api/setmore/services\", async (req, res) => {\n    try {\n      const result = await setmoreService.getAllServices();\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  // Get all staff\n  app.get(\"/api/setmore/staff\", async (req, res) => {\n    try {\n      const result = await setmoreService.getAllStaff();\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  // Get available time slots\n  app.post(\"/api/setmore/slots\", async (req, res) => {\n    try {\n      const { staff_key, service_key, selected_date, slot_limit } = req.body;\n      const result = await setmoreService.getAvailableSlots({\n        staff_key,\n        service_key,\n        selected_date,\n        slot_limit: slot_limit || 20\n      });\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch time slots\" });\n    }\n  });\n\n  // Create Setmore customer and appointment\n  app.post(\"/api/appointments/setmore\", async (req, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse(req.body);\n      \n      // Get patient data to create Setmore customer\n      const patient = await storage.getPatient(appointmentData.patientId);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      // Create customer in Setmore (or get existing)\n      let customerKey = patient.email ? `customer_${patient.email}` : `customer_${patient.id}`;\n      \n      // For development, we'll create the appointment directly in our system\n      // In production, this would create the appointment in Setmore first\n      const appointment = await storage.createAppointment({\n        ...appointmentData,\n        customerKey\n      });\n\n      res.status(201).json(appointment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create appointment\" });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      const employee = await storage.getEmployeeByEmail(validatedData.email);\n      \n      if (!employee || employee.password !== validatedData.password) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      if (!employee.isActive) {\n        return res.status(403).json({ message: \"Account is disabled\" });\n      }\n      \n      // For now, return the employee without password\n      const { password, ...employeeWithoutPassword } = employee;\n      res.json({ employee: employeeWithoutPassword });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // Settings routes\n  app.get(\"/api/settings/:employeeId\", async (req, res) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const settings = await storage.getEmployeeSettings(employeeId);\n      \n      if (!settings) {\n        // Create default settings if they don't exist\n        const defaultSettings = await storage.updateEmployeeSettings(employeeId, {});\n        return res.json(defaultSettings);\n      }\n      \n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.put(\"/api/settings/:employeeId\", async (req, res) => {\n    try {\n      const employeeId = parseInt(req.params.employeeId);\n      const validatedData = insertSettingsSchema.parse(req.body);\n      const settings = await storage.updateEmployeeSettings(employeeId, validatedData);\n      res.json(settings);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Validation error\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update settings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":20707},"server/storage.ts":{"content":"import { \n  type Patient, \n  type InsertPatient,\n  type Appointment,\n  type InsertAppointment,\n  type PatientFile,\n  type InsertPatientFile,\n  type ToothRecord,\n  type InsertToothRecord,\n  type MedicalCondition,\n  type MedicalNote,\n  type TreatmentHistory,\n  type PaymentRecord,\n  type DashboardStats,\n  type PaginatedResponse,\n  type Role,\n  type InsertRole,\n  type Employee,\n  type InsertEmployee,\n  type InsertEmployeeWithPassword,\n  type Settings,\n  type InsertSettings,\n  type LoginData\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Patients\n  getPatients(params: { search?: string; pageNumber?: number; pageSize?: number }): Promise<PaginatedResponse<Patient>>;\n  getPatient(id: number): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: number, patient: Partial<InsertPatient>): Promise<Patient | undefined>;\n  deletePatient(id: number): Promise<boolean>;\n  \n  // Appointments\n  getAppointments(params: { patientId?: number; date?: string; pageNumber?: number; pageSize?: number }): Promise<PaginatedResponse<Appointment>>;\n  getAppointment(id: number): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: number, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined>;\n  deleteAppointment(id: number): Promise<boolean>;\n  getTodayAppointments(): Promise<Appointment[]>;\n  \n  // Files\n  getPatientFiles(patientId: number): Promise<PatientFile[]>;\n  createPatientFile(file: InsertPatientFile): Promise<PatientFile>;\n  deletePatientFile(id: number): Promise<boolean>;\n  \n  // Medical Conditions\n  getMedicalConditions(): Promise<MedicalCondition[]>;\n  \n  // Tooth Records (Odontogram)\n  getPatientToothRecords(patientId: number): Promise<ToothRecord[]>;\n  createToothRecord(record: InsertToothRecord): Promise<ToothRecord>;\n  updateToothRecord(id: number, record: Partial<InsertToothRecord>): Promise<ToothRecord | undefined>;\n  deleteToothRecord(id: number): Promise<boolean>;\n  \n  // Medical Notes\n  getPatientMedicalNotes(patientId: number): Promise<MedicalNote[]>;\n  createMedicalNote(note: { patientId: number; title: string; content: string; noteType: string }): Promise<MedicalNote>;\n  deleteMedicalNote(id: number): Promise<boolean>;\n  \n  // Treatment History\n  getPatientTreatmentHistory(patientId: number): Promise<TreatmentHistory[]>;\n  createTreatmentHistory(treatment: { \n    patientId: number; \n    treatmentType: string; \n    description: string; \n    toothNumbers?: string; \n    duration: number; \n    cost: number; \n    notes?: string; \n  }): Promise<TreatmentHistory>;\n  \n  // Payment Records\n  getPatientPaymentRecords(patientId: number): Promise<PaymentRecord[]>;\n  createPaymentRecord(payment: {\n    patientId: number;\n    appointmentId?: number;\n    treatmentId?: number;\n    amount: number;\n    paymentMethod: string;\n    notes?: string;\n  }): Promise<PaymentRecord>;\n  \n  // Dashboard\n  getDashboardStats(): Promise<DashboardStats>;\n  \n  // Employee Management\n  getRoles(): Promise<Role[]>;\n  getRole(id: number): Promise<Role | undefined>;\n  createRole(role: InsertRole): Promise<Role>;\n  updateRole(id: number, role: Partial<InsertRole>): Promise<Role | undefined>;\n  deleteRole(id: number): Promise<boolean>;\n\n  getEmployees(params: { search?: string; isActive?: boolean; roleId?: number }): Promise<Employee[]>;\n  getEmployee(id: number): Promise<Employee | undefined>;\n  createEmployee(employee: InsertEmployee): Promise<Employee>;\n  updateEmployee(id: number, employee: Partial<InsertEmployee>): Promise<Employee | undefined>;\n  deleteEmployee(id: number): Promise<boolean>;\n  setEmployeeStatus(id: number, isActive: boolean): Promise<Employee | undefined>;\n  \n  // Authentication\n  getEmployeeByEmail(email: string): Promise<Employee | undefined>;\n  createEmployeeWithPassword(employee: InsertEmployeeWithPassword): Promise<Employee>;\n  \n  // Settings\n  getEmployeeSettings(employeeId: number): Promise<Settings | undefined>;\n  updateEmployeeSettings(employeeId: number, settings: Partial<InsertSettings>): Promise<Settings>;\n}\n\nexport class MemStorage implements IStorage {\n  private patients: Map<number, Patient>;\n  private appointments: Map<number, Appointment>;\n  private patientFiles: Map<number, PatientFile>;\n  private medicalConditions: Map<number, MedicalCondition>;\n  private toothRecords: Map<number, ToothRecord>;\n  private medicalNotes: Map<number, MedicalNote>;\n  private treatmentHistory: Map<number, TreatmentHistory>;\n  private paymentRecords: Map<number, PaymentRecord>;\n  private roles: Map<number, Role>;\n  private employees: Map<number, Employee>;\n  private settings: Map<number, Settings>;\n  private idCounters: { \n    patients: number; \n    appointments: number; \n    files: number; \n    conditions: number; \n    teeth: number; \n    notes: number; \n    treatments: number; \n    payments: number; \n    roles: number;\n    employees: number;\n    settings: number;\n  };\n\n  constructor() {\n    this.patients = new Map();\n    this.appointments = new Map();\n    this.patientFiles = new Map();\n    this.medicalConditions = new Map();\n    this.toothRecords = new Map();\n    this.medicalNotes = new Map();\n    this.treatmentHistory = new Map();\n    this.paymentRecords = new Map();\n    this.roles = new Map();\n    this.employees = new Map();\n    this.settings = new Map();\n    this.idCounters = { \n      patients: 1, \n      appointments: 1, \n      files: 1, \n      conditions: 1, \n      teeth: 1, \n      notes: 1, \n      treatments: 1, \n      payments: 1,\n      roles: 1,\n      employees: 1,\n      settings: 1\n    };\n    \n    this.seedData();\n  }\n\n  private seedData() {\n    // Seed patients\n    const samplePatients: Patient[] = [\n      {\n        id: 1,\n        firstName: \"John\",\n        lastName: \"Doe\",\n        phone: \"+1 234 567 8900\",\n        email: \"john.doe@email.com\",\n        dateOfBirth: \"1985-01-15\",\n        address: \"123 Main St, City, State 12345\",\n        gender: \"Male\",\n        jmbg: \"1234567890123\",\n        statusId: 1,\n        createdAt: new Date(\"2024-12-01\"),\n        updatedAt: new Date(\"2024-12-15\")\n      },\n      {\n        id: 2,\n        firstName: \"Jane\",\n        lastName: \"Smith\",\n        phone: \"+1 234 567 8901\",\n        email: \"jane.smith@email.com\",\n        dateOfBirth: \"1992-03-22\",\n        address: \"456 Oak Ave, City, State 12345\",\n        gender: \"Female\",\n        jmbg: \"1234567890124\",\n        statusId: 1,\n        createdAt: new Date(\"2024-12-02\"),\n        updatedAt: new Date(\"2024-12-14\")\n      },\n      {\n        id: 3,\n        firstName: \"Robert\",\n        lastName: \"Johnson\",\n        phone: \"+1 234 567 8902\",\n        email: \"robert.j@email.com\",\n        dateOfBirth: \"1978-11-08\",\n        address: \"789 Pine Rd, City, State 12345\",\n        gender: \"Male\",\n        jmbg: \"1234567890125\",\n        statusId: 1,\n        createdAt: new Date(\"2024-12-03\"),\n        updatedAt: new Date(\"2024-12-13\")\n      }\n    ];\n\n    samplePatients.forEach(patient => {\n      this.patients.set(patient.id, patient);\n    });\n    this.idCounters.patients = 4;\n\n    // Seed appointments\n    const sampleAppointments: Appointment[] = [\n      {\n        id: 1,\n        patientId: 1,\n        appointmentDate: new Date(\"2024-12-20T10:00:00\"),\n        duration: 60,\n        description: \"Routine Checkup\",\n        status: \"scheduled\",\n        setmoreAppointmentKey: null,\n        serviceKey: \"cleaning\",\n        serviceName: \"Dental Cleaning\",\n        staffKey: \"dr-smith\",\n        staffName: \"Dr. Smith\",\n        cost: 15000,\n        currency: \"EUR\",\n        customerKey: null,\n        createdAt: new Date(\"2024-12-15\"),\n        updatedAt: new Date(\"2024-12-15\")\n      },\n      {\n        id: 2,\n        patientId: 2,\n        appointmentDate: new Date(\"2024-12-20T11:30:00\"),\n        duration: 45,\n        description: \"Cleaning\",\n        status: \"completed\",\n        setmoreAppointmentKey: null,\n        serviceKey: \"cleaning\",\n        serviceName: \"Dental Cleaning\",\n        staffKey: \"dr-smith\",\n        staffName: \"Dr. Smith\",\n        cost: 12000,\n        currency: \"EUR\",\n        customerKey: null,\n        createdAt: new Date(\"2024-12-15\"),\n        updatedAt: new Date(\"2024-12-15\")\n      }\n    ];\n\n    sampleAppointments.forEach(appointment => {\n      this.appointments.set(appointment.id, appointment);\n    });\n    this.idCounters.appointments = 3;\n\n    // Seed roles\n    const sampleRoles: Role[] = [\n      {\n        id: 1,\n        name: \"Administrator\",\n        description: \"Full system access with all permissions\",\n        permissions: {\n          view_patients: true,\n          create_patients: true,\n          edit_patients: true,\n          delete_patients: true,\n          view_medical_history: true,\n          edit_medical_history: true,\n          view_appointments: true,\n          create_appointments: true,\n          edit_appointments: true,\n          cancel_appointments: true,\n          view_calendar: true,\n          view_payments: true,\n          record_payments: true,\n          view_revenue: true,\n          view_financial_reports: true,\n          manage_pricing: true,\n          manage_users: true,\n          manage_roles: true,\n          system_settings: true,\n          view_audit_logs: true,\n          backup_restore: true,\n          view_odontogram: true,\n          edit_odontogram: true,\n          view_treatment_history: true,\n          create_treatment_plans: true,\n          manage_prescriptions: true,\n          view_files: true,\n          upload_files: true,\n          delete_files: true,\n          manage_file_categories: true\n        },\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      },\n      {\n        id: 2,\n        name: \"Dentist\",\n        description: \"Medical professionals with patient and treatment access\",\n        permissions: {\n          view_patients: true,\n          create_patients: true,\n          edit_patients: true,\n          delete_patients: false,\n          view_medical_history: true,\n          edit_medical_history: true,\n          view_appointments: true,\n          create_appointments: true,\n          edit_appointments: true,\n          cancel_appointments: true,\n          view_calendar: true,\n          view_payments: true,\n          record_payments: true,\n          view_revenue: false,\n          view_financial_reports: false,\n          manage_pricing: false,\n          manage_users: false,\n          manage_roles: false,\n          system_settings: false,\n          view_audit_logs: false,\n          backup_restore: false,\n          view_odontogram: true,\n          edit_odontogram: true,\n          view_treatment_history: true,\n          create_treatment_plans: true,\n          manage_prescriptions: true,\n          view_files: true,\n          upload_files: true,\n          delete_files: false,\n          manage_file_categories: false\n        },\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      },\n      {\n        id: 3,\n        name: \"Dental Assistant\",\n        description: \"Support staff with limited access\",\n        permissions: {\n          view_patients: true,\n          create_patients: false,\n          edit_patients: false,\n          delete_patients: false,\n          view_medical_history: true,\n          edit_medical_history: false,\n          view_appointments: true,\n          create_appointments: true,\n          edit_appointments: true,\n          cancel_appointments: false,\n          view_calendar: true,\n          view_payments: false,\n          record_payments: false,\n          view_revenue: false,\n          view_financial_reports: false,\n          manage_pricing: false,\n          manage_users: false,\n          manage_roles: false,\n          system_settings: false,\n          view_audit_logs: false,\n          backup_restore: false,\n          view_odontogram: true,\n          edit_odontogram: false,\n          view_treatment_history: true,\n          create_treatment_plans: false,\n          manage_prescriptions: false,\n          view_files: true,\n          upload_files: true,\n          delete_files: false,\n          manage_file_categories: false\n        },\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      },\n      {\n        id: 4,\n        name: \"Receptionist\",\n        description: \"Front desk staff with basic access\",\n        permissions: {\n          view_patients: true,\n          create_patients: true,\n          edit_patients: true,\n          delete_patients: false,\n          view_medical_history: false,\n          edit_medical_history: false,\n          view_appointments: true,\n          create_appointments: true,\n          edit_appointments: true,\n          cancel_appointments: true,\n          view_calendar: true,\n          view_payments: true,\n          record_payments: true,\n          view_revenue: false,\n          view_financial_reports: false,\n          manage_pricing: false,\n          manage_users: false,\n          manage_roles: false,\n          system_settings: false,\n          view_audit_logs: false,\n          backup_restore: false,\n          view_odontogram: false,\n          edit_odontogram: false,\n          view_treatment_history: false,\n          create_treatment_plans: false,\n          manage_prescriptions: false,\n          view_files: true,\n          upload_files: true,\n          delete_files: false,\n          manage_file_categories: false\n        },\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      }\n    ];\n\n    sampleRoles.forEach(role => {\n      this.roles.set(role.id, role);\n    });\n    this.idCounters.roles = 5;\n\n    // Seed default administrator employee\n    const defaultAdmin: Employee = {\n      id: 1,\n      firstName: \"Admin\",\n      lastName: \"User\",\n      email: \"admin@dentalcare.com\",\n      password: \"admin123\", // In production, this should be hashed\n      phone: \"+1 555 0100\",\n      position: \"System Administrator\",\n      department: \"IT\",\n      roleId: 1, // Administrator role\n      isActive: true,\n      startDate: \"2024-01-01\",\n      profileImageUrl: null,\n      notes: \"Default system administrator account\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    this.employees.set(defaultAdmin.id, defaultAdmin);\n    this.idCounters.employees = 2;\n\n    // Seed default settings for administrator\n    const defaultSettings: Settings = {\n      id: 1,\n      employeeId: 1,\n      showRevenue: true,\n      language: \"en\",\n      theme: \"light\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n\n    this.settings.set(defaultSettings.id, defaultSettings);\n    this.idCounters.settings = 2;\n\n    // Seed employees\n    const sampleEmployees: Employee[] = [\n      {\n        id: 1,\n        firstName: \"Dr. Sarah\",\n        lastName: \"Johnson\",\n        email: \"dr.johnson@dentalclinic.com\",\n        phone: \"+1 555 0101\",\n        position: \"Chief Dentist\",\n        department: \"Clinical\",\n        roleId: 2,\n        isActive: true,\n        startDate: \"2020-01-15\",\n        profileImageUrl: null,\n        notes: \"Chief dental officer with 15 years of experience\",\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      },\n      {\n        id: 2,\n        firstName: \"Mike\",\n        lastName: \"Brown\",\n        email: \"mike.brown@dentalclinic.com\",\n        phone: \"+1 555 0102\",\n        position: \"Clinic Administrator\",\n        department: \"Administration\",\n        roleId: 1,\n        isActive: true,\n        startDate: \"2021-03-01\",\n        profileImageUrl: null,\n        notes: \"Manages all clinic operations and staff\",\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      },\n      {\n        id: 3,\n        firstName: \"Lisa\",\n        lastName: \"Davis\",\n        email: \"lisa.davis@dentalclinic.com\",\n        phone: \"+1 555 0103\",\n        position: \"Dental Assistant\",\n        department: \"Clinical\",\n        roleId: 3,\n        isActive: true,\n        startDate: \"2022-06-15\",\n        profileImageUrl: null,\n        notes: \"Specialized in pediatric dental care\",\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      },\n      {\n        id: 4,\n        firstName: \"Emma\",\n        lastName: \"Wilson\",\n        email: \"emma.wilson@dentalclinic.com\",\n        phone: \"+1 555 0104\",\n        position: \"Receptionist\",\n        department: \"Front Desk\",\n        roleId: 4,\n        isActive: true,\n        startDate: \"2023-02-01\",\n        profileImageUrl: null,\n        notes: \"Handles appointment scheduling and patient communications\",\n        createdAt: new Date(\"2024-12-01\").toISOString(),\n        updatedAt: new Date(\"2024-12-01\").toISOString()\n      }\n    ];\n\n    sampleEmployees.forEach(employee => {\n      this.employees.set(employee.id, employee);\n    });\n    this.idCounters.employees = 5;\n  }\n\n  async getPatients(params: { search?: string; pageNumber?: number; pageSize?: number }): Promise<PaginatedResponse<Patient>> {\n    const { search = \"\", pageNumber = 1, pageSize = 10 } = params;\n    let allPatients = Array.from(this.patients.values());\n\n    if (search) {\n      allPatients = allPatients.filter(patient =>\n        patient.firstName.toLowerCase().includes(search.toLowerCase()) ||\n        patient.lastName.toLowerCase().includes(search.toLowerCase()) ||\n        patient.phone.includes(search) ||\n        patient.email?.toLowerCase().includes(search.toLowerCase())\n      );\n    }\n\n    const totalCount = allPatients.length;\n    const totalPages = Math.ceil(totalCount / pageSize);\n    const startIndex = (pageNumber - 1) * pageSize;\n    const items = allPatients.slice(startIndex, startIndex + pageSize);\n\n    return {\n      items,\n      totalCount,\n      pageNumber,\n      pageSize,\n      totalPages\n    };\n  }\n\n  async getPatient(id: number): Promise<Patient | undefined> {\n    return this.patients.get(id);\n  }\n\n  async createPatient(patient: InsertPatient): Promise<Patient> {\n    const id = this.idCounters.patients++;\n    const newPatient: Patient = {\n      ...patient,\n      id,\n      address: patient.address || null,\n      email: patient.email || null,\n      statusId: 1,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.patients.set(id, newPatient);\n    return newPatient;\n  }\n\n  async updatePatient(id: number, patient: Partial<InsertPatient>): Promise<Patient | undefined> {\n    const existing = this.patients.get(id);\n    if (!existing) return undefined;\n\n    const updated: Patient = {\n      ...existing,\n      ...patient,\n      updatedAt: new Date()\n    };\n    this.patients.set(id, updated);\n    return updated;\n  }\n\n  async deletePatient(id: number): Promise<boolean> {\n    return this.patients.delete(id);\n  }\n\n  async getAppointments(params: { patientId?: number; date?: string; pageNumber?: number; pageSize?: number }): Promise<PaginatedResponse<Appointment>> {\n    const { patientId, date, pageNumber = 1, pageSize = 10 } = params;\n    let allAppointments = Array.from(this.appointments.values());\n\n    if (patientId) {\n      allAppointments = allAppointments.filter(appointment => appointment.patientId === patientId);\n    }\n\n    if (date) {\n      const targetDate = new Date(date);\n      allAppointments = allAppointments.filter(appointment => {\n        const appointmentDate = new Date(appointment.appointmentDate);\n        return appointmentDate.toDateString() === targetDate.toDateString();\n      });\n    }\n\n    const totalCount = allAppointments.length;\n    const totalPages = Math.ceil(totalCount / pageSize);\n    const startIndex = (pageNumber - 1) * pageSize;\n    const items = allAppointments.slice(startIndex, startIndex + pageSize);\n\n    return {\n      items,\n      totalCount,\n      pageNumber,\n      pageSize,\n      totalPages\n    };\n  }\n\n  async getAppointment(id: number): Promise<Appointment | undefined> {\n    return this.appointments.get(id);\n  }\n\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const id = this.idCounters.appointments++;\n    const newAppointment: Appointment = {\n      ...appointment,\n      id,\n      duration: appointment.duration || 30,\n      description: appointment.description || null,\n      appointmentDate: new Date(appointment.appointmentDate),\n      setmoreAppointmentKey: appointment.setmoreAppointmentKey || null,\n      customerKey: appointment.customerKey || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.appointments.set(id, newAppointment);\n    return newAppointment;\n  }\n\n  async updateAppointment(id: number, appointment: Partial<InsertAppointment>): Promise<Appointment | undefined> {\n    const existing = this.appointments.get(id);\n    if (!existing) return undefined;\n\n    const updated: Appointment = {\n      ...existing,\n      ...appointment,\n      appointmentDate: appointment.appointmentDate ? new Date(appointment.appointmentDate) : existing.appointmentDate,\n      updatedAt: new Date()\n    };\n    this.appointments.set(id, updated);\n    return updated;\n  }\n\n  async deleteAppointment(id: number): Promise<boolean> {\n    return this.appointments.delete(id);\n  }\n\n  async getTodayAppointments(): Promise<Appointment[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return Array.from(this.appointments.values()).filter(appointment => {\n      const appointmentDate = new Date(appointment.appointmentDate);\n      return appointmentDate >= today && appointmentDate < tomorrow;\n    });\n  }\n\n  async getPatientFiles(patientId: number): Promise<PatientFile[]> {\n    return Array.from(this.patientFiles.values()).filter(file => file.patientId === patientId);\n  }\n\n  async createPatientFile(file: InsertPatientFile): Promise<PatientFile> {\n    const id = this.idCounters.files++;\n    const newFile: PatientFile = {\n      ...file,\n      id,\n      description: file.description || null,\n      thumbnailPath: file.thumbnailPath || null,\n      uploadedAt: new Date()\n    };\n    this.patientFiles.set(id, newFile);\n    return newFile;\n  }\n\n  async deletePatientFile(id: number): Promise<boolean> {\n    return this.patientFiles.delete(id);\n  }\n\n  async getMedicalConditions(): Promise<MedicalCondition[]> {\n    return Array.from(this.medicalConditions.values());\n  }\n\n  // Tooth Records (Odontogram) methods\n  async getPatientToothRecords(patientId: number): Promise<ToothRecord[]> {\n    return Array.from(this.toothRecords.values()).filter(record => record.patientId === patientId);\n  }\n\n  async createToothRecord(record: InsertToothRecord): Promise<ToothRecord> {\n    const id = this.idCounters.teeth++;\n    const newRecord: ToothRecord = {\n      ...record,\n      id,\n      surfaces: record.surfaces || null,\n      treatment: record.treatment || null,\n      treatmentDate: record.treatmentDate || null,\n      notes: record.notes || null,\n      appointmentId: record.appointmentId || null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.toothRecords.set(id, newRecord);\n    return newRecord;\n  }\n\n  async updateToothRecord(id: number, record: Partial<InsertToothRecord>): Promise<ToothRecord | undefined> {\n    const existingRecord = this.toothRecords.get(id);\n    if (!existingRecord) return undefined;\n\n    const updatedRecord: ToothRecord = {\n      ...existingRecord,\n      ...record,\n      id,\n      updatedAt: new Date()\n    };\n    this.toothRecords.set(id, updatedRecord);\n    return updatedRecord;\n  }\n\n  async deleteToothRecord(id: number): Promise<boolean> {\n    return this.toothRecords.delete(id);\n  }\n\n  // Medical Notes Methods\n  async getPatientMedicalNotes(patientId: number): Promise<MedicalNote[]> {\n    return Array.from(this.medicalNotes.values())\n      .filter(note => note.patientId === patientId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async createMedicalNote(noteData: { patientId: number; title: string; content: string; noteType: string }): Promise<MedicalNote> {\n    const note: MedicalNote = {\n      id: this.idCounters.notes++,\n      ...noteData,\n      createdBy: \"Dr. Smith\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.medicalNotes.set(note.id, note);\n    return note;\n  }\n\n  async deleteMedicalNote(id: number): Promise<boolean> {\n    return this.medicalNotes.delete(id);\n  }\n\n  // Treatment History Methods\n  async getPatientTreatmentHistory(patientId: number): Promise<TreatmentHistory[]> {\n    return Array.from(this.treatmentHistory.values())\n      .filter(treatment => treatment.patientId === patientId)\n      .sort((a, b) => new Date(b.performedAt).getTime() - new Date(a.performedAt).getTime());\n  }\n\n  async createTreatmentHistory(treatmentData: { \n    patientId: number; \n    treatmentType: string; \n    description: string; \n    toothNumbers?: string; \n    duration: number; \n    cost: number; \n    notes?: string; \n  }): Promise<TreatmentHistory> {\n    const treatment: TreatmentHistory = {\n      id: this.idCounters.treatments++,\n      ...treatmentData,\n      toothNumbers: treatmentData.toothNumbers || null,\n      notes: treatmentData.notes || null,\n      appointmentId: null,\n      status: \"completed\",\n      performedBy: \"Dr. Smith\",\n      performedAt: new Date(),\n      createdAt: new Date(),\n    };\n    this.treatmentHistory.set(treatment.id, treatment);\n    return treatment;\n  }\n\n  // Payment Records Methods\n  async getPatientPaymentRecords(patientId: number): Promise<PaymentRecord[]> {\n    return Array.from(this.paymentRecords.values())\n      .filter(payment => payment.patientId === patientId)\n      .sort((a, b) => new Date(b.paidAt).getTime() - new Date(a.paidAt).getTime());\n  }\n\n  async createPaymentRecord(paymentData: {\n    patientId: number;\n    appointmentId?: number;\n    treatmentId?: number;\n    amount: number;\n    paymentMethod: string;\n    notes?: string;\n  }): Promise<PaymentRecord> {\n    const payment: PaymentRecord = {\n      id: this.idCounters.payments++,\n      ...paymentData,\n      appointmentId: paymentData.appointmentId || null,\n      treatmentId: paymentData.treatmentId || null,\n      notes: paymentData.notes || null,\n      paymentStatus: \"completed\",\n      paidAt: new Date(),\n      createdAt: new Date(),\n    };\n    this.paymentRecords.set(payment.id, payment);\n    return payment;\n  }\n\n  async getDashboardStats(): Promise<DashboardStats> {\n    const totalPatients = this.patients.size;\n    const todayAppointments = (await this.getTodayAppointments()).length;\n    const monthlyRevenue = 32849; // Mock value\n\n    return {\n      totalPatients,\n      todayAppointments,\n      monthlyRevenue\n    };\n  }\n\n  // Role Management Methods\n  async getRoles(): Promise<Role[]> {\n    return Array.from(this.roles.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getRole(id: number): Promise<Role | undefined> {\n    return this.roles.get(id);\n  }\n\n  async createRole(roleData: InsertRole): Promise<Role> {\n    const role: Role = {\n      id: this.idCounters.roles++,\n      ...roleData,\n      permissions: roleData.permissions || {},\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    this.roles.set(role.id, role);\n    return role;\n  }\n\n  async updateRole(id: number, roleData: Partial<InsertRole>): Promise<Role | undefined> {\n    const existingRole = this.roles.get(id);\n    if (!existingRole) return undefined;\n\n    const updatedRole: Role = {\n      ...existingRole,\n      ...roleData,\n      updatedAt: new Date().toISOString(),\n    };\n    this.roles.set(id, updatedRole);\n    return updatedRole;\n  }\n\n  async deleteRole(id: number): Promise<boolean> {\n    // Check if any employees are using this role\n    const employeesWithRole = Array.from(this.employees.values()).filter(emp => emp.roleId === id);\n    if (employeesWithRole.length > 0) {\n      return false; // Cannot delete role that is in use\n    }\n    return this.roles.delete(id);\n  }\n\n  // Employee Management Methods\n  async getEmployees(params: { search?: string; isActive?: boolean; roleId?: number }): Promise<Employee[]> {\n    let employees = Array.from(this.employees.values());\n\n    if (params.search) {\n      const searchLower = params.search.toLowerCase();\n      employees = employees.filter(emp =>\n        emp.firstName.toLowerCase().includes(searchLower) ||\n        emp.lastName.toLowerCase().includes(searchLower) ||\n        emp.email.toLowerCase().includes(searchLower) ||\n        emp.position?.toLowerCase().includes(searchLower) ||\n        emp.department?.toLowerCase().includes(searchLower)\n      );\n    }\n\n    if (params.isActive !== undefined) {\n      employees = employees.filter(emp => emp.isActive === params.isActive);\n    }\n\n    if (params.roleId !== undefined) {\n      employees = employees.filter(emp => emp.roleId === params.roleId);\n    }\n\n    return employees.sort((a, b) => a.firstName.localeCompare(b.firstName));\n  }\n\n  async getEmployee(id: number): Promise<Employee | undefined> {\n    return this.employees.get(id);\n  }\n\n  async createEmployee(employeeData: InsertEmployee): Promise<Employee> {\n    const employee: Employee = {\n      id: this.idCounters.employees++,\n      ...employeeData,\n      isActive: employeeData.isActive ?? true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    this.employees.set(employee.id, employee);\n    return employee;\n  }\n\n  async updateEmployee(id: number, employeeData: Partial<InsertEmployee>): Promise<Employee | undefined> {\n    const existingEmployee = this.employees.get(id);\n    if (!existingEmployee) return undefined;\n\n    const updatedEmployee: Employee = {\n      ...existingEmployee,\n      ...employeeData,\n      updatedAt: new Date().toISOString(),\n    };\n    this.employees.set(id, updatedEmployee);\n    return updatedEmployee;\n  }\n\n  async deleteEmployee(id: number): Promise<boolean> {\n    return this.employees.delete(id);\n  }\n\n  async setEmployeeStatus(id: number, isActive: boolean): Promise<Employee | undefined> {\n    const employee = this.employees.get(id);\n    if (!employee) return undefined;\n\n    const updatedEmployee: Employee = {\n      ...employee,\n      isActive,\n      updatedAt: new Date().toISOString(),\n    };\n    this.employees.set(id, updatedEmployee);\n    return updatedEmployee;\n  }\n\n  // Authentication Methods\n  async getEmployeeByEmail(email: string): Promise<Employee | undefined> {\n    return Array.from(this.employees.values()).find(emp => emp.email === email);\n  }\n\n  async createEmployeeWithPassword(employeeData: InsertEmployeeWithPassword): Promise<Employee> {\n    const employee: Employee = {\n      id: this.idCounters.employees++,\n      ...employeeData,\n      isActive: employeeData.isActive ?? true,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    this.employees.set(employee.id, employee);\n    \n    // Create default settings for new employee\n    const defaultSettings: Settings = {\n      id: this.idCounters.settings++,\n      employeeId: employee.id,\n      showRevenue: false, // Default to false for new employees\n      language: \"en\",\n      theme: \"light\",\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    };\n    this.settings.set(defaultSettings.id, defaultSettings);\n    \n    return employee;\n  }\n\n  // Settings Methods\n  async getEmployeeSettings(employeeId: number): Promise<Settings | undefined> {\n    return Array.from(this.settings.values()).find(setting => setting.employeeId === employeeId);\n  }\n\n  async updateEmployeeSettings(employeeId: number, settingsData: Partial<InsertSettings>): Promise<Settings> {\n    let existingSettings = Array.from(this.settings.values()).find(setting => setting.employeeId === employeeId);\n    \n    if (existingSettings) {\n      const updatedSettings: Settings = {\n        ...existingSettings,\n        ...settingsData,\n        employeeId, // Ensure employeeId doesn't change\n        updatedAt: new Date().toISOString(),\n      };\n      this.settings.set(existingSettings.id, updatedSettings);\n      return updatedSettings;\n    } else {\n      // Create new settings if they don't exist\n      const newSettings: Settings = {\n        id: this.idCounters.settings++,\n        employeeId,\n        showRevenue: false,\n        language: \"en\",\n        theme: \"light\",\n        ...settingsData,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      };\n      this.settings.set(newSettings.id, newSettings);\n      return newSettings;\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":32890},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, date, serial, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { relations } from \"drizzle-orm\";\nimport { z } from \"zod\";\n\nexport const patients = pgTable(\"patients\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  phone: varchar(\"phone\", { length: 20 }).notNull(),\n  email: varchar(\"email\", { length: 255 }),\n  dateOfBirth: date(\"date_of_birth\").notNull(),\n  address: text(\"address\"),\n  gender: varchar(\"gender\", { length: 10 }).notNull(),\n  jmbg: varchar(\"jmbg\", { length: 13 }).notNull().unique(),\n  statusId: integer(\"status_id\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\nexport const appointments = pgTable(\"appointments\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  appointmentDate: timestamp(\"appointment_date\").notNull(),\n  duration: integer(\"duration\").notNull().default(30),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"scheduled\"),\n  \n  // Setmore integration fields\n  setmoreAppointmentKey: varchar(\"setmore_appointment_key\", { length: 100 }), // Setmore appointment ID\n  serviceKey: varchar(\"service_key\", { length: 100 }).notNull().default(\"cleaning\"), // Setmore service key\n  serviceName: varchar(\"service_name\", { length: 200 }).notNull().default(\"Dental Cleaning\"),\n  staffKey: varchar(\"staff_key\", { length: 100 }).notNull().default(\"dr-smith\"), // Setmore staff key\n  staffName: varchar(\"staff_name\", { length: 200 }).notNull().default(\"Dr. Smith\"),\n  cost: integer(\"cost\").notNull().default(0), // in cents\n  currency: varchar(\"currency\", { length: 5 }).notNull().default(\"EUR\"),\n  customerKey: varchar(\"customer_key\", { length: 100 }), // Setmore customer ID\n  \n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\nexport const medicalConditions = pgTable(\"medical_conditions\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\nexport const patientMedicalConditions = pgTable(\"patient_medical_conditions\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  medicalConditionId: integer(\"medical_condition_id\").notNull().references(() => medicalConditions.id),\n  diagnosedDate: date(\"diagnosed_date\"),\n  notes: text(\"notes\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\nexport const patientFiles = pgTable(\"patient_files\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  fileName: varchar(\"file_name\", { length: 255 }).notNull(),\n  filePath: varchar(\"file_path\", { length: 500 }).notNull(),\n  fileType: varchar(\"file_type\", { length: 50 }).notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  description: text(\"description\"),\n  thumbnailPath: varchar(\"thumbnail_path\", { length: 500 }),\n  uploadedAt: timestamp(\"uploaded_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\nexport const toothRecords = pgTable(\"tooth_records\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  toothNumber: integer(\"tooth_number\").notNull(), // Universal numbering system 1-32\n  condition: varchar(\"condition\", { length: 50 }).notNull().default(\"healthy\"), // healthy, caries, filled, crown, extracted, etc.\n  surfaces: varchar(\"surfaces\", { length: 20 }), // Affected surfaces: M, O, D, B/L, I\n  treatment: varchar(\"treatment\", { length: 100 }), // Treatment performed\n  treatmentDate: date(\"treatment_date\"),\n  notes: text(\"notes\"),\n  color: varchar(\"color\", { length: 20 }).notNull().default(\"#ffffff\"), // Visual color on odontogram\n  isCompleted: boolean(\"is_completed\").notNull().default(true),\n  appointmentId: integer(\"appointment_id\").references(() => appointments.id),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Medical notes for patients\nexport const medicalNotes = pgTable(\"medical_notes\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  noteType: varchar(\"note_type\", { length: 50 }).notNull().default(\"general\"), // general, treatment, diagnosis, follow-up\n  createdBy: varchar(\"created_by\", { length: 100 }).notNull().default(\"Dr. Smith\"),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n  updatedAt: timestamp(\"updated_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Treatment history records\nexport const treatmentHistory = pgTable(\"treatment_history\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  appointmentId: integer(\"appointment_id\").references(() => appointments.id),\n  treatmentType: varchar(\"treatment_type\", { length: 100 }).notNull(),\n  description: text(\"description\").notNull(),\n  toothNumbers: varchar(\"tooth_numbers\", { length: 100 }), // e.g., \"1,2,3\" for multiple teeth\n  duration: integer(\"duration\").notNull().default(30), // minutes\n  cost: integer(\"cost\").notNull().default(0), // in cents\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"completed\"),\n  notes: text(\"notes\"),\n  performedBy: varchar(\"performed_by\", { length: 100 }).notNull().default(\"Dr. Smith\"),\n  performedAt: timestamp(\"performed_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Payment records\nexport const paymentRecords = pgTable(\"payment_records\", {\n  id: integer(\"id\").primaryKey().generatedByDefaultAsIdentity(),\n  patientId: integer(\"patient_id\").notNull().references(() => patients.id),\n  appointmentId: integer(\"appointment_id\").references(() => appointments.id),\n  treatmentId: integer(\"treatment_id\").references(() => treatmentHistory.id),\n  amount: integer(\"amount\").notNull(), // in cents\n  paymentMethod: varchar(\"payment_method\", { length: 50 }).notNull().default(\"cash\"),\n  paymentStatus: varchar(\"payment_status\", { length: 20 }).notNull().default(\"completed\"),\n  notes: text(\"notes\"),\n  paidAt: timestamp(\"paid_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n  createdAt: timestamp(\"created_at\").default(sql`CURRENT_TIMESTAMP`).notNull(),\n});\n\n// Insert schemas\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  dateOfBirth: z.string().min(1, \"Date of birth is required\"),\n  gender: z.enum([\"Male\", \"Female\"]),\n  jmbg: z.string().length(13, \"JMBG must be 13 digits\").regex(/^\\d{13}$/, \"JMBG must contain only digits\"),\n  medicalConditions: z.array(z.string()).optional(),\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  appointmentDate: z.string().min(1, \"Appointment date is required\"),\n  status: z.enum([\"scheduled\", \"completed\", \"cancelled\"]).default(\"scheduled\"),\n  serviceKey: z.string().default(\"cleaning\"),\n  serviceName: z.string().default(\"Dental Cleaning\"),\n  staffKey: z.string().default(\"dr-smith\"),\n  staffName: z.string().default(\"Dr. Smith\"),\n  cost: z.number().default(0),\n  currency: z.string().default(\"EUR\"),\n});\n\nexport const insertPatientFileSchema = createInsertSchema(patientFiles).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertToothRecordSchema = createInsertSchema(toothRecords).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  condition: z.enum([\n    \"healthy\", \"caries\", \"filled\", \"crown\", \"bridge\", \"implant\", \n    \"extracted\", \"impacted\", \"fractured\", \"root_canal\", \"veneer\",\n    \"wisdom_tooth\", \"missing\", \"needs_treatment\"\n  ]).default(\"healthy\"),\n  surfaces: z.string().optional(),\n  treatment: z.string().optional(),\n  treatmentDate: z.string().optional(),\n  color: z.string().default(\"#ffffff\"),\n  isCompleted: z.boolean().default(true),\n});\n\n// Types\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\n\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\n\nexport type MedicalCondition = typeof medicalConditions.$inferSelect;\n\nexport type PatientMedicalCondition = typeof patientMedicalConditions.$inferSelect;\n\nexport type PatientFile = typeof patientFiles.$inferSelect;\nexport type InsertPatientFile = z.infer<typeof insertPatientFileSchema>;\n\nexport type ToothRecord = typeof toothRecords.$inferSelect;\nexport type InsertToothRecord = z.infer<typeof insertToothRecordSchema>;\n\nexport type MedicalNote = typeof medicalNotes.$inferSelect;\nexport type TreatmentHistory = typeof treatmentHistory.$inferSelect;\nexport type PaymentRecord = typeof paymentRecords.$inferSelect;\n\n// Response types\nexport interface PaginatedResponse<T> {\n  items: T[];\n  totalCount: number;\n  pageNumber: number;\n  pageSize: number;\n  totalPages: number;\n}\n\nexport interface DashboardStats {\n  totalPatients: number;\n  todayAppointments: number;\n  monthlyRevenue: number;\n}\n\n// User Management and Access Control Tables\nexport const roles = pgTable(\"roles\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull().unique(),\n  description: varchar(\"description\", { length: 255 }),\n  permissions: jsonb(\"permissions\").notNull().default('{}'), // Store permissions as JSON\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const employees = pgTable(\"employees\", {\n  id: serial(\"id\").primaryKey(),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  password: varchar(\"password\", { length: 255 }).notNull(), // Added password field\n  phone: varchar(\"phone\", { length: 20 }),\n  position: varchar(\"position\", { length: 100 }),\n  department: varchar(\"department\", { length: 100 }),\n  roleId: integer(\"role_id\").references(() => roles.id),\n  isActive: boolean(\"is_active\").default(true),\n  startDate: date(\"start_date\"),\n  profileImageUrl: varchar(\"profile_image_url\", { length: 500 }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id),\n  sessionToken: varchar(\"session_token\", { length: 255 }).notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Settings table for storing user preferences\nexport const settings = pgTable(\"settings\", {\n  id: serial(\"id\").primaryKey(),\n  employeeId: integer(\"employee_id\").references(() => employees.id).notNull(),\n  showRevenue: boolean(\"show_revenue\").default(true),\n  language: varchar(\"language\", { length: 10 }).default(\"en\"),\n  theme: varchar(\"theme\", { length: 20 }).default(\"light\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const rolesRelations = relations(roles, ({ many }) => ({\n  employees: many(employees),\n}));\n\nexport const employeesRelations = relations(employees, ({ one, many }) => ({\n  role: one(roles, {\n    fields: [employees.roleId],\n    references: [roles.id],\n  }),\n  sessions: many(userSessions),\n  settings: one(settings, {\n    fields: [employees.id],\n    references: [settings.employeeId],\n  }),\n}));\n\nexport const settingsRelations = relations(settings, ({ one }) => ({\n  employee: one(employees, {\n    fields: [settings.employeeId],\n    references: [employees.id],\n  }),\n}));\n\nexport const userSessionsRelations = relations(userSessions, ({ one }) => ({\n  employee: one(employees, {\n    fields: [userSessions.employeeId],\n    references: [employees.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertRoleSchema = createInsertSchema(roles).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertEmployeeSchema = createInsertSchema(employees).omit({ id: true, createdAt: true, updatedAt: true, password: true });\nexport const insertEmployeeWithPasswordSchema = createInsertSchema(employees).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertSettingsSchema = createInsertSchema(settings).omit({ id: true, createdAt: true, updatedAt: true });\n\n// Types\nexport type Role = typeof roles.$inferSelect;\nexport type InsertRole = z.infer<typeof insertRoleSchema>;\nexport type Employee = typeof employees.$inferSelect;\nexport type InsertEmployee = z.infer<typeof insertEmployeeSchema>;\nexport type InsertEmployeeWithPassword = z.infer<typeof insertEmployeeWithPasswordSchema>;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type Settings = typeof settings.$inferSelect;\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\n","size_bytes":14230},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { LanguageProvider } from \"@/components/language-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PatientsPage from \"@/pages/patients/patients\";\nimport CreatePatientPage from \"@/pages/patients/create-patient\";\nimport PatientDetailsPage from \"@/pages/patients/patient-details\";\nimport AppointmentsPage from \"@/pages/appointments/appointments-new\";\nimport FilesPage from \"@/pages/files/files\";\nimport MedicalRecordsPage from \"@/pages/medical-records/medical-records\";\nimport SettingsPage from \"@/pages/settings/settings\";\nimport ServicesPage from \"@/pages/appointments/services\";\nimport LoginPage from \"@/pages/login\";\n\nfunction Router() {\n  const { isAuthenticated, login } = useAuth();\n\n  if (!isAuthenticated) {\n    return <LoginPage onLogin={login} />;\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/patients\" component={PatientsPage} />\n      <Route path=\"/patients/create\" component={CreatePatientPage} />\n      <Route path=\"/patients/:id\" component={PatientDetailsPage} />\n      <Route path=\"/patients/:id/edit\" component={CreatePatientPage} />\n      <Route path=\"/appointments\" component={AppointmentsPage} />\n      <Route path=\"/services\" component={ServicesPage} />\n      <Route path=\"/files\" component={FilesPage} />\n      <Route path=\"/medical-records\" component={MedicalRecordsPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <LanguageProvider>\n        <ThemeProvider defaultTheme=\"light\">\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </LanguageProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2273},"client/src/index.css":{"content":"/* Inter font import */\n@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Medical theme colors */\n  --medical-primary: hsl(207, 90%, 54%);\n  --medical-success: hsl(122, 39%, 49%);\n  --medical-warning: hsl(45, 93%, 47%);\n  --medical-error: hsl(0, 65%, 51%);\n  --medical-bg: hsl(0, 0%, 98%);\n  --medical-sidebar: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  \n  /* Dark theme medical colors */\n  --medical-primary: hsl(207, 90%, 54%);\n  --medical-success: hsl(122, 39%, 49%);\n  --medical-warning: hsl(45, 93%, 47%);\n  --medical-error: hsl(0, 65%, 51%);\n  --medical-bg: hsl(240, 10%, 3.9%);\n  --medical-sidebar: hsl(240, 10%, 3.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  html, body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n    height: 100vh;\n    overflow: hidden;\n  }\n\n  #root {\n    @apply h-screen bg-background;\n  }\n}\n\n@layer components {\n  .sidebar-transition {\n    transition: all 0.3s ease;\n  }\n\n  .card-hover {\n    transition: all 0.2s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n  }\n\n  .table-row-hover:hover {\n    @apply bg-gray-50 dark:bg-gray-800;\n  }\n\n  .status-badge {\n    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;\n  }\n\n  .status-scheduled { \n    @apply bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400; \n  }\n  \n  .status-completed { \n    @apply bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400; \n  }\n  \n  .status-cancelled { \n    @apply bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400; \n  }\n  \n  .status-active { \n    @apply bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400; \n  }\n\n  .medical-bg {\n    background-color: var(--medical-bg);\n  }\n\n  .medical-sidebar {\n    background-color: var(--medical-sidebar);\n  }\n\n  .medical-primary {\n    color: var(--medical-primary);\n  }\n\n  .medical-primary-bg {\n    background-color: var(--medical-primary);\n  }\n}\n","size_bytes":3601},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-appointments.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Appointment, InsertAppointment, PaginatedResponse } from \"@shared/schema\";\n\ninterface AppointmentsQueryParams {\n  patientId?: number;\n  date?: string;\n  pageNumber?: number;\n  pageSize?: number;\n}\n\nexport function useAppointments(params: AppointmentsQueryParams = {}) {\n  const searchParams = new URLSearchParams();\n  if (params.patientId) searchParams.append('patientId', params.patientId.toString());\n  if (params.date) searchParams.append('date', params.date);\n  if (params.pageNumber) searchParams.append('pageNumber', params.pageNumber.toString());\n  if (params.pageSize) searchParams.append('pageSize', params.pageSize.toString());\n\n  return useQuery<PaginatedResponse<Appointment>>({\n    queryKey: ['/api/appointments', params],\n    queryFn: async () => {\n      const response = await fetch(`/api/appointments?${searchParams.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch appointments');\n      return response.json();\n    },\n  });\n}\n\nexport function useTodayAppointments() {\n  return useQuery<Appointment[]>({\n    queryKey: ['/api/appointments/today'],\n    queryFn: async () => {\n      const response = await fetch('/api/appointments/today');\n      if (!response.ok) throw new Error('Failed to fetch today\\'s appointments');\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateAppointment() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (appointment: InsertAppointment) => {\n      const response = await apiRequest('POST', '/api/appointments', appointment);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/today'] });\n    },\n  });\n}\n","size_bytes":1921},"client/src/hooks/use-files.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { PatientFile, InsertPatientFile } from \"@shared/schema\";\n\nexport function usePatientFiles(patientId: number) {\n  return useQuery<PatientFile[]>({\n    queryKey: ['/api/patients', patientId, 'files'],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients/${patientId}/files`);\n      if (!response.ok) throw new Error('Failed to fetch patient files');\n      return response.json();\n    },\n    enabled: !!patientId,\n  });\n}\n\nexport function useCreatePatientFile() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (file: InsertPatientFile) => {\n      const response = await apiRequest('POST', '/api/files', file);\n      return response.json();\n    },\n    onSuccess: (_, file) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', file.patientId, 'files'] });\n    },\n  });\n}\n\nexport function useDeletePatientFile() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/files/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n    },\n  });\n}\n","size_bytes":1303},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-patients.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Patient, InsertPatient, PaginatedResponse } from \"@shared/schema\";\n\ninterface PatientsQueryParams {\n  search?: string;\n  pageNumber?: number;\n  pageSize?: number;\n}\n\nexport function usePatients(params: PatientsQueryParams = {}) {\n  const searchParams = new URLSearchParams();\n  if (params.search) searchParams.append('search', params.search);\n  if (params.pageNumber) searchParams.append('pageNumber', params.pageNumber.toString());\n  if (params.pageSize) searchParams.append('pageSize', params.pageSize.toString());\n\n  return useQuery<PaginatedResponse<Patient>>({\n    queryKey: ['/api/patients', params],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients?${searchParams.toString()}`);\n      if (!response.ok) throw new Error('Failed to fetch patients');\n      return response.json();\n    },\n  });\n}\n\nexport function usePatient(id?: number) {\n  return useQuery<Patient>({\n    queryKey: ['/api/patients', id],\n    queryFn: async () => {\n      const response = await fetch(`/api/patients/${id}`);\n      if (!response.ok) throw new Error('Failed to fetch patient');\n      return response.json();\n    },\n    enabled: !!id,\n  });\n}\n\nexport function useCreatePatient() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (patient: InsertPatient) => {\n      const response = await apiRequest('POST', '/api/patients', patient);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n    },\n  });\n}\n\nexport function useUpdatePatient() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, patient }: { id: number; patient: Partial<InsertPatient> }) => {\n      const response = await apiRequest('PUT', `/api/patients/${id}`, patient);\n      return response.json();\n    },\n    onSuccess: (_, { id }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', id] });\n    },\n  });\n}\n\nexport function useDeletePatient() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: number) => {\n      await apiRequest('DELETE', `/api/patients/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n    },\n  });\n}\n","size_bytes":2488},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-tooth-records.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ToothRecord, InsertToothRecord } from \"@shared/schema\";\n\nexport function usePatientToothRecords(patientId: number) {\n  return useQuery<ToothRecord[]>({\n    queryKey: [\"/api/patients\", patientId, \"teeth\"],\n    enabled: !!patientId,\n  });\n}\n\nexport function useCreateToothRecord() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (data: InsertToothRecord): Promise<ToothRecord> => {\n      const response = await apiRequest(\"POST\", \"/api/teeth\", data);\n      return response.json();\n    },\n    onSuccess: (newRecord) => {\n      // Invalidate patient tooth records\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\", newRecord.patientId, \"teeth\"],\n      });\n    },\n  });\n}\n\nexport function useUpdateToothRecord() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertToothRecord> }): Promise<ToothRecord> => {\n      const response = await apiRequest(\"PUT\", `/api/teeth/${id}`, data);\n      return response.json();\n    },\n    onSuccess: (updatedRecord) => {\n      // Invalidate patient tooth records\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\", updatedRecord.patientId, \"teeth\"],\n      });\n    },\n  });\n}\n\nexport function useDeleteToothRecord() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (id: number): Promise<void> => {\n      await apiRequest(\"DELETE\", `/api/teeth/${id}`);\n    },\n    onSuccess: () => {\n      // Invalidate all tooth record queries\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/patients\"],\n      });\n    },\n  });\n}","size_bytes":1803},"client/src/lib/mock-data.ts":{"content":"import type { DashboardStats } from \"@shared/schema\";\n\nexport const mockDashboardStats: DashboardStats = {\n  totalPatients: 1247,\n  todayAppointments: 23,\n  filesUploaded: 4893,\n  monthlyRevenue: 32849,\n};\n","size_bytes":206},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Layout } from \"@/components/layout/layout\";\nimport { PatientStats } from \"@/components/patients/patient-stats\";\nimport { PatientTable } from \"@/components/patients/patient-table\";\nimport { AppointmentList } from \"@/components/appointments/appointment-list\";\nimport { FileUpload } from \"@/components/files/file-upload\";\nimport { FileList } from \"@/components/files/file-list\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { Link } from \"wouter\";\nimport { Plus, Download } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { data: patientsData, isLoading } = usePatients({ pageSize: 5 });\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-8\">\n        {/* Stats Cards */}\n        <PatientStats />\n\n        {/* Main Content Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Recent Patients */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Recent Patients</CardTitle>\n                  <Link href=\"/patients\">\n                    <Button variant=\"ghost\" className=\"text-blue-600 hover:text-blue-700\">\n                      View All\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <PatientTable \n                  patients={patientsData?.items || []} \n                  loading={isLoading}\n                />\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Today's Appointments */}\n          <div>\n            <AppointmentList />\n          </div>\n        </div>\n\n        {/* Patient Management Section */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Patient Management</CardTitle>\n              <div className=\"flex space-x-3\">\n                <Link href=\"/patients/create\">\n                  <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Patient\n                  </Button>\n                </Link>\n                <Button variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <PatientTable \n              patients={patientsData?.items || []} \n              loading={isLoading}\n            />\n          </CardContent>\n        </Card>\n\n        {/* File Management Section */}\n        <div className=\"space-y-6\">\n          <FileUpload />\n          <FileList />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":2933},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":714},"client/src/types/index.ts":{"content":"export * from \"@shared/schema\";\nimport type { Patient, Appointment } from \"@shared/schema\";\n\nexport interface PatientWithLastVisit extends Patient {\n  lastVisit?: string;\n}\n\nexport interface AppointmentWithPatient extends Appointment {\n  patientName?: string;\n}\n\nexport interface SearchParams {\n  search?: string;\n  pageNumber?: number;\n  pageSize?: number;\n}\n","size_bytes":360},"client/src/components/appointments/appointment-list.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTodayAppointments } from \"@/hooks/use-appointments\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { format } from \"date-fns\";\nimport { Calendar } from \"lucide-react\";\n\nexport function AppointmentList() {\n  const { data: appointments, isLoading } = useTodayAppointments();\n  const { data: patientsData } = usePatients();\n\n  // Create a map of patient IDs to names for quick lookup\n  const patientMap = new Map();\n  if (patientsData?.items) {\n    patientsData.items.forEach(patient => {\n      patientMap.set(patient.id, `${patient.firstName} ${patient.lastName}`);\n    });\n  }\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Today's Appointments</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800';\n      case 'completed':\n        return 'bg-green-100 text-green-800';\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Today's Appointments</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {appointments && appointments.length > 0 ? (\n            appointments.map((appointment) => (\n              <div \n                key={appointment.id} \n                className=\"flex items-center space-x-3 p-3 rounded-lg border border-border hover:bg-muted/50\"\n              >\n                <div className={`w-2 h-2 rounded-full ${\n                  appointment.status === 'scheduled' ? 'bg-blue-500' :\n                  appointment.status === 'completed' ? 'bg-green-500' :\n                  appointment.status === 'cancelled' ? 'bg-red-500' : 'bg-gray-500'\n                }`} />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900\">\n                    {patientMap.get(appointment.patientId) || `Patient #${appointment.patientId}`}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    {appointment.description || 'No description'}\n                  </p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-gray-900\">\n                    {format(new Date(appointment.appointmentDate), 'h:mm a')}\n                  </p>\n                  <Badge className={`text-xs ${getStatusColor(appointment.status)}`}>\n                    {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}\n                  </Badge>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              No appointments scheduled for today\n            </div>\n          )}\n        </div>\n        <div className=\"mt-4 pt-4 border-t border-gray-200 space-y-2\">\n          <Button variant=\"ghost\" className=\"w-full text-blue-600 hover:text-blue-700\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            View Full Calendar\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3711},"client/src/components/files/file-list.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\nimport { usePatientFiles, useDeletePatientFile } from \"@/hooks/use-files\";\nimport { Eye, Download, Trash2, FileText, Image, Package } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ImagePreview } from \"./image-preview\";\n\ninterface FileListProps {\n  patientId?: number;\n}\n\nexport function FileList({ patientId }: FileListProps) {\n  const [selectedFile, setSelectedFile] = useState<any>(null);\n  const [previewOpen, setPreviewOpen] = useState(false);\n  const { data: files, isLoading } = usePatientFiles(patientId || 0);\n  const deleteFileMutation = useDeletePatientFile();\n  const { toast } = useToast();\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType.startsWith('image/')) return Image;\n    if (fileType.includes('pdf') || fileType.includes('document')) return FileText;\n    return Package;\n  };\n\n  const getFileIconColor = (fileType: string) => {\n    if (fileType.startsWith('image/')) return 'text-blue-500';\n    if (fileType.includes('pdf')) return 'text-red-500';\n    if (fileType.includes('document')) return 'text-green-500';\n    return 'text-yellow-500';\n  };\n\n  const getFileIconBg = (fileType: string) => {\n    if (fileType.startsWith('image/')) return 'bg-blue-100';\n    if (fileType.includes('pdf')) return 'bg-red-100';\n    if (fileType.includes('document')) return 'bg-green-100';\n    return 'bg-yellow-100';\n  };\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const handleDelete = async (fileId: number, fileName: string) => {\n    if (confirm(`Are you sure you want to delete \"${fileName}\"?`)) {\n      try {\n        await deleteFileMutation.mutateAsync(fileId);\n        toast({\n          title: \"Success\",\n          description: `File \"${fileName}\" deleted successfully`,\n        });\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: `Failed to delete \"${fileName}\"`,\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handlePreview = (file: any) => {\n    setSelectedFile(file);\n    setPreviewOpen(true);\n  };\n\n  if (!patientId) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Patient Files</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-gray-500\">\n            Please select a patient to view their files\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Files</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-32 bg-gray-200 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Recent Files</CardTitle>\n      </CardHeader>\n      <CardContent>\n        {files && files.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {files.map((file) => {\n              const FileIcon = getFileIcon(file.fileType);\n              return (\n                <div \n                  key={file.id} \n                  className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\"\n                >\n                  <div className=\"flex items-center space-x-3 mb-3\">\n                    <div className={`w-12 h-12 ${getFileIconBg(file.fileType)} rounded-lg flex items-center justify-center`}>\n                      <FileIcon className={`h-6 w-6 ${getFileIconColor(file.fileType)}`} />\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900 truncate\">\n                        {file.fileName}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {formatFileSize(file.fileSize)} • {format(new Date(file.uploadedAt), 'MMM dd, yyyy')}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  {file.description && (\n                    <p className=\"text-xs text-gray-600 mb-3 line-clamp-2\">\n                      {file.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-blue-600 hover:text-blue-700\"\n                      onClick={() => handlePreview(file)}\n                    >\n                      <Eye className=\"h-3 w-3 mr-1\" />\n                      View\n                    </Button>\n                    <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600 hover:text-gray-700\">\n                      <Download className=\"h-3 w-3 mr-1\" />\n                      Download\n                    </Button>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\" \n                      className=\"text-red-600 hover:text-red-700\"\n                      onClick={() => handleDelete(file.id, file.fileName)}\n                      disabled={deleteFileMutation.isPending}\n                    >\n                      <Trash2 className=\"h-3 w-3 mr-1\" />\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-gray-500\">\n            No files uploaded yet\n          </div>\n        )}\n      </CardContent>\n      \n      {/* Image Preview Modal */}\n      {selectedFile && (\n        <ImagePreview\n          file={selectedFile}\n          isOpen={previewOpen}\n          onClose={() => {\n            setPreviewOpen(false);\n            setSelectedFile(null);\n          }}\n        />\n      )}\n    </Card>\n  );\n}\n","size_bytes":6551},"client/src/components/files/file-upload.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useCreatePatientFile } from \"@/hooks/use-files\";\nimport { CloudUpload, FileText, Image, Package } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { InsertPatientFile } from \"@shared/schema\";\n\ninterface FileUploadProps {\n  patientId?: number;\n  onUploadSuccess?: (file: any) => void;\n}\n\nexport function FileUpload({ patientId, onUploadSuccess }: FileUploadProps) {\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const createFileMutation = useCreatePatientFile();\n  const { toast } = useToast();\n\n  const getFileIcon = (fileType: string) => {\n    if (fileType.startsWith('image/')) return Image;\n    if (fileType.includes('pdf') || fileType.includes('document')) return FileText;\n    return Package;\n  };\n\n  const simulateUpload = async (file: File): Promise<void> => {\n    return new Promise((resolve) => {\n      let progress = 0;\n      const interval = setInterval(() => {\n        progress += Math.random() * 30;\n        if (progress >= 100) {\n          progress = 100;\n          clearInterval(interval);\n          resolve();\n        }\n        setUploadProgress(progress);\n      }, 200);\n    });\n  };\n\n  const onDrop = useCallback(async (acceptedFiles: File[]) => {\n    if (!patientId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a patient first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    \n    for (const file of acceptedFiles) {\n      try {\n        await simulateUpload(file);\n        \n        const fileData: InsertPatientFile = {\n          patientId,\n          fileName: file.name,\n          filePath: `/uploads/${file.name}`, // In real app, this would be the actual path\n          fileType: file.type,\n          fileSize: file.size,\n          description: `Uploaded ${file.name}`,\n          thumbnailPath: file.type.startsWith('image/') ? `/thumbnails/${file.name}` : undefined,\n        };\n        \n        await createFileMutation.mutateAsync(fileData);\n        \n        toast({\n          title: \"Success\",\n          description: `${file.name} uploaded successfully`,\n        });\n        \n        if (onUploadSuccess) {\n          onUploadSuccess(fileData);\n        }\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: `Failed to upload ${file.name}`,\n          variant: \"destructive\",\n        });\n      }\n    }\n    \n    setUploading(false);\n    setUploadProgress(0);\n  }, [patientId, createFileMutation, toast, onUploadSuccess]);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpg', '.jpeg', '.png', '.tiff', '.bmp'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx'],\n      'model/stl': ['.stl'],\n      'application/zip': ['.zip'],\n    },\n    multiple: true,\n  });\n\n  return (\n    <Card>\n      <CardContent className=\"p-6\">\n        <div\n          {...getRootProps()}\n          className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${\n            isDragActive \n              ? 'border-blue-500 bg-blue-50' \n              : 'border-gray-300 hover:border-blue-500'\n          }`}\n        >\n          <input {...getInputProps()} />\n          \n          <CloudUpload className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n          \n          <h4 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Upload Patient Files\n          </h4>\n          \n          <p className=\"text-sm text-gray-500 mb-4\">\n            {isDragActive \n              ? 'Drop the files here...' \n              : 'Drag and drop files here, or click to browse'\n            }\n          </p>\n          \n          <p className=\"text-xs text-gray-400 mb-4\">\n            Supports: Images (JPG, PNG, TIFF), Documents (PDF, DOC), Medical Images (DICOM), 3D Models (STL), Archives (ZIP)\n          </p>\n          \n          <Button \n            type=\"button\" \n            className=\"bg-blue-600 hover:bg-blue-700\"\n            disabled={uploading}\n          >\n            Choose Files\n          </Button>\n        </div>\n        \n        {uploading && (\n          <div className=\"mt-4\">\n            <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n              <span>Uploading files...</span>\n              <span>{Math.round(uploadProgress)}%</span>\n            </div>\n            <Progress value={uploadProgress} className=\"w-full\" />\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4910},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Search, Bell, Plus, Menu, LogOut, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { ModeToggle } from \"@/components/ui/mode-toggle\";\nimport { LanguageToggle } from \"@/components/ui/language-toggle\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface HeaderProps {\n  onMenuClick: () => void;\n  title: string;\n}\n\nexport function Header({ onMenuClick, title }: HeaderProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [, setLocation] = useLocation();\n  const { t } = useTranslation();\n  const { employee, logout } = useAuth();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchTerm.trim()) {\n      setLocation(`/patients?search=${encodeURIComponent(searchTerm.trim())}`);\n    }\n  };\n\n  return (\n    <header className=\"bg-background border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onMenuClick}\n            className=\"lg:hidden\"\n          >\n            <Menu className=\"h-4 w-4\" />\n          </Button>\n          <h1 className=\"text-2xl font-semibold text-foreground\">{title}</h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <form onSubmit={handleSearch} className=\"relative hidden md:block\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              type=\"text\"\n              placeholder={t.search + ' ' + t.patients.toLowerCase() + '...'}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-64 pl-10\"\n            />\n          </form>\n          \n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n            <Bell className=\"h-4 w-4\" />\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-3 w-3 p-0 text-xs\"\n            >\n              3\n            </Badge>\n          </Button>\n          \n          {/* Language Toggle */}\n          <LanguageToggle />\n          \n          {/* Theme Toggle */}\n          <ModeToggle />\n          \n          {/* New Patient Button */}\n          <Link href=\"/patients/create\">\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t.add + ' ' + t.patients.slice(0, -1)}\n            </Button>\n          </Link>\n          \n          {/* User Dropdown */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback className=\"bg-blue-600 text-white\">\n                    {employee?.firstName.charAt(0)}{employee?.lastName.charAt(0)}\n                  </AvatarFallback>\n                </Avatar>\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n              <div className=\"flex items-center justify-start gap-2 p-2\">\n                <div className=\"flex flex-col space-y-1 leading-none\">\n                  <p className=\"font-medium\">{employee?.firstName} {employee?.lastName}</p>\n                  <p className=\"w-[200px] truncate text-sm text-muted-foreground\">\n                    {employee?.email}\n                  </p>\n                </div>\n              </div>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem asChild>\n                <Link href=\"/settings\" className=\"flex items-center\">\n                  <User className=\"mr-2 h-4 w-4\" />\n                  Settings\n                </Link>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={logout} className=\"cursor-pointer\">\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                Log out\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4696},"client/src/components/layout/layout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Sidebar } from \"./sidebar\";\nimport { Header } from \"./header\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nconst getPageTitle = (pathname: string): string => {\n  if (pathname === \"/\") return \"Dashboard\";\n  if (pathname.startsWith(\"/patients\")) return \"Patients\";\n  if (pathname.startsWith(\"/appointments\")) return \"Appointments\";\n  if (pathname.startsWith(\"/files\")) return \"Files & Documents\";\n  if (pathname.startsWith(\"/settings\")) return \"Settings\";\n  return \"DentalCare\";\n};\n\nexport function Layout({ children }: LayoutProps) {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [location] = useLocation();\n\n  const pageTitle = getPageTitle(location);\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-background\">\n      <Sidebar \n        collapsed={sidebarCollapsed} \n        onCollapse={setSidebarCollapsed}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          onMenuClick={() => setSidebarCollapsed(!sidebarCollapsed)}\n          title={pageTitle}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto overflow-x-hidden bg-background\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1320},"client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { \n  Home, \n  Users, \n  Calendar, \n  FileText, \n  Folder, \n  Settings,\n  ChevronLeft,\n  ChevronRight,\n  Stethoscope\n} from \"lucide-react\";\n\n\ninterface SidebarProps {\n  collapsed: boolean;\n  onCollapse: (collapsed: boolean) => void;\n}\n\nexport function Sidebar({ collapsed, onCollapse }: SidebarProps) {\n  const [location] = useLocation();\n  const { t } = useTranslation();\n\n  const navigationItems = [\n    { name: t.dashboard, href: \"/\", icon: Home },\n    { name: t.patients, href: \"/patients\", icon: Users },\n    { name: t.appointments, href: \"/appointments\", icon: Calendar },\n    { name: \"Services\", href: \"/services\", icon: Stethoscope },\n    { name: t.medicalRecords, href: \"/medical-records\", icon: FileText },\n    { name: t.filesDocuments, href: \"/files\", icon: Folder },\n    { name: t.settings, href: \"/settings\", icon: Settings },\n  ];\n\n  return (\n    <aside \n      className={cn(\n        \"bg-card border-r border-border flex-shrink-0 sidebar-transition\",\n        collapsed ? \"w-16\" : \"w-64\"\n      )}\n    >\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"flex items-center justify-center h-16 border-b border-border\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 medical-primary-bg rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold\">🦷</span>\n            </div>\n            {!collapsed && (\n              <span className=\"text-lg font-semibold text-foreground\">DentalCare</span>\n            )}\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4 py-6 space-y-1\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  className={cn(\n                    \"w-full justify-start\",\n                    isActive && \"bg-primary/10 text-primary hover:bg-primary/20\",\n                    collapsed && \"px-2\"\n                  )}\n                >\n                  <Icon className={cn(\"h-4 w-4\", collapsed ? \"mr-0\" : \"mr-3\")} />\n                  {!collapsed && item.name}\n                </Button>\n              </Link>\n            );\n          })}\n        </nav>\n\n        {/* Collapse Toggle */}\n        <div className=\"border-t border-border p-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onCollapse(!collapsed)}\n            className=\"w-full justify-center\"\n          >\n            {collapsed ? <ChevronRight className=\"h-4 w-4\" /> : <ChevronLeft className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n\n        {/* User Profile */}\n        {!collapsed && (\n          <div className=\"border-t border-border p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-sm\">👨‍⚕️</span>\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-foreground truncate\">Dr. Sarah Johnson</p>\n                <p className=\"text-xs text-muted-foreground truncate\">Dentist</p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3768},"client/src/components/patients/odontogram.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { usePatientToothRecords, useCreateToothRecord, useUpdateToothRecord } from \"@/hooks/use-tooth-records\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ToothRecord, InsertToothRecord } from \"@shared/schema\";\nimport { Loader2, Plus } from \"lucide-react\";\n\ninterface OdontogramProps {\n  patientId: number;\n}\n\n// Tooth numbering according to Universal Numbering System\nconst ADULT_TEETH = {\n  upper: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n  lower: [32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17],\n};\n\nconst CONDITION_COLORS = {\n  healthy: \"#ffffff\",\n  caries: \"#ff4444\",\n  filled: \"#4444ff\", \n  crown: \"#ffaa00\",\n  bridge: \"#aa44ff\",\n  implant: \"#44aaff\",\n  extracted: \"#666666\",\n  impacted: \"#ff8800\",\n  fractured: \"#ff6666\",\n  root_canal: \"#8844ff\",\n  veneer: \"#44ff88\",\n  wisdom_tooth: \"#ffff44\",\n  missing: \"#cccccc\",\n  needs_treatment: \"#ff8844\",\n} as const;\n\nconst CONDITION_NAMES = {\n  healthy: \"Healthy\",\n  caries: \"Caries\",\n  filled: \"Filled\",\n  crown: \"Crown\",\n  bridge: \"Bridge\", \n  implant: \"Implant\",\n  extracted: \"Extracted\",\n  impacted: \"Impacted\",\n  fractured: \"Fractured\",\n  root_canal: \"Root Canal\",\n  veneer: \"Veneer\",\n  wisdom_tooth: \"Wisdom Tooth\",\n  missing: \"Missing\",\n  needs_treatment: \"Needs Treatment\",\n} as const;\n\ninterface ToothProps {\n  toothNumber: number;\n  record?: ToothRecord;\n  onUpdate: (toothNumber: number, record?: ToothRecord) => void;\n}\n\nfunction Tooth({ toothNumber, record, onUpdate }: ToothProps) {\n  const condition = record?.condition || \"healthy\";\n  const color = record?.color || CONDITION_COLORS[condition as keyof typeof CONDITION_COLORS];\n  \n  return (\n    <button\n      onClick={() => onUpdate(toothNumber, record)}\n      className=\"relative w-8 h-10 border border-gray-300 rounded-t-lg hover:ring-2 hover:ring-blue-500 transition-all\"\n      style={{ backgroundColor: color }}\n      title={`Tooth ${toothNumber}${record ? ` - ${CONDITION_NAMES[condition as keyof typeof CONDITION_NAMES]}` : \"\"}`}\n    >\n      <span className=\"absolute inset-0 flex items-center justify-center text-xs font-medium text-gray-800\">\n        {toothNumber}\n      </span>\n      {record && (\n        <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-600 rounded-full\"></div>\n      )}\n    </button>\n  );\n}\n\ninterface ToothDialogProps {\n  toothNumber: number;\n  record?: ToothRecord;\n  patientId: number;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction ToothDialog({ toothNumber, record, patientId, isOpen, onClose }: ToothDialogProps) {\n  const [condition, setCondition] = useState(record?.condition || \"healthy\");\n  const [surfaces, setSurfaces] = useState(record?.surfaces || \"\");\n  const [treatment, setTreatment] = useState(record?.treatment || \"\");\n  const [notes, setNotes] = useState(record?.notes || \"\");\n  \n  const { toast } = useToast();\n  const createMutation = useCreateToothRecord();\n  const updateMutation = useUpdateToothRecord();\n  \n  const handleSave = async () => {\n    try {\n      const data: InsertToothRecord = {\n        patientId,\n        toothNumber,\n        condition: condition as any,\n        surfaces: surfaces || undefined,\n        treatment: treatment || undefined,\n        notes: notes || undefined,\n        color: CONDITION_COLORS[condition as keyof typeof CONDITION_COLORS],\n        isCompleted: true,\n      };\n      \n      if (record) {\n        await updateMutation.mutateAsync({ id: record.id, data });\n      } else {\n        await createMutation.mutateAsync(data);\n      }\n      \n      toast({\n        title: \"Success\",\n        description: `Tooth ${toothNumber} record ${record ? 'updated' : 'created'} successfully`,\n      });\n      \n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${record ? 'update' : 'create'} tooth record`,\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Tooth {toothNumber}</DialogTitle>\n          <DialogDescription>\n            Edit condition, treatment details, and notes for tooth {toothNumber}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"condition\">Condition</Label>\n            <Select value={condition} onValueChange={setCondition}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(CONDITION_NAMES).map(([key, name]) => (\n                  <SelectItem key={key} value={key}>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-4 h-4 rounded border\"\n                        style={{ backgroundColor: CONDITION_COLORS[key as keyof typeof CONDITION_COLORS] }}\n                      />\n                      {name}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"surfaces\">Affected Surfaces (e.g., MO, DO, MOD)</Label>\n            <Input\n              id=\"surfaces\"\n              value={surfaces}\n              onChange={(e) => setSurfaces(e.target.value)}\n              placeholder=\"M, O, D, B, L, I\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"treatment\">Treatment</Label>\n            <Input\n              id=\"treatment\"\n              value={treatment}\n              onChange={(e) => setTreatment(e.target.value)}\n              placeholder=\"Description of treatment performed\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Additional notes about this tooth\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={createMutation.isPending || updateMutation.isPending}\n            >\n              {(createMutation.isPending || updateMutation.isPending) && (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              )}\n              {record ? \"Update\" : \"Create\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport function Odontogram({ patientId }: OdontogramProps) {\n  const [selectedTooth, setSelectedTooth] = useState<{ number: number; record?: ToothRecord } | null>(null);\n  \n  const { data: toothRecords, isLoading, error } = usePatientToothRecords(patientId);\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Odontogram</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-6 w-6 animate-spin\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Odontogram</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-600\">Failed to load odontogram data</p>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  // Create a map of tooth records by tooth number\n  const toothRecordMap = new Map<number, ToothRecord>();\n  toothRecords?.forEach(record => {\n    toothRecordMap.set(record.toothNumber, record);\n  });\n  \n  const handleToothClick = (toothNumber: number, record?: ToothRecord) => {\n    setSelectedTooth({ number: toothNumber, record });\n  };\n  \n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Odontogram\n            <div className=\"flex gap-2\">\n              <Badge variant=\"outline\">Universal Numbering System</Badge>\n              <Badge variant=\"secondary\">{toothRecords?.length || 0} Records</Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {/* Upper Jaw */}\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-600 mb-2\">Upper Jaw (Maxilla)</h3>\n              <div className=\"flex justify-center gap-1\">\n                {ADULT_TEETH.upper.map(toothNumber => (\n                  <Tooth\n                    key={toothNumber}\n                    toothNumber={toothNumber}\n                    record={toothRecordMap.get(toothNumber)}\n                    onUpdate={handleToothClick}\n                  />\n                ))}\n              </div>\n            </div>\n            \n            {/* Lower Jaw */}\n            <div>\n              <h3 className=\"text-sm font-medium text-gray-600 mb-2\">Lower Jaw (Mandible)</h3>\n              <div className=\"flex justify-center gap-1\">\n                {ADULT_TEETH.lower.map(toothNumber => (\n                  <Tooth\n                    key={toothNumber}\n                    toothNumber={toothNumber}\n                    record={toothRecordMap.get(toothNumber)}\n                    onUpdate={handleToothClick}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          {/* Legend */}\n          <div className=\"mt-6 pt-4 border-t\">\n            <h4 className=\"text-sm font-medium text-gray-600 mb-2\">Legend</h4>\n            <div className=\"grid grid-cols-3 gap-2 text-xs\">\n              {Object.entries(CONDITION_NAMES).map(([key, name]) => (\n                <div key={key} className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-3 h-3 rounded border border-gray-300\"\n                    style={{ backgroundColor: CONDITION_COLORS[key as keyof typeof CONDITION_COLORS] }}\n                  />\n                  <span>{name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {selectedTooth && (\n        <ToothDialog\n          toothNumber={selectedTooth.number}\n          record={selectedTooth.record}\n          patientId={patientId}\n          isOpen={!!selectedTooth}\n          onClose={() => setSelectedTooth(null)}\n        />\n      )}\n    </>\n  );\n}","size_bytes":11148},"client/src/components/patients/patient-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { insertPatientSchema, type InsertPatient, type Patient } from \"@shared/schema\";\nimport { X, Upload, FileText } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface PatientFormProps {\n  initialData?: Patient;\n  onSubmit: (data: InsertPatient) => void;\n  loading?: boolean;\n  onCancel?: () => void;\n}\n\nconst commonMedicalConditions = [\n  \"Diabetes\", \"Hypertension\", \"Heart Disease\", \"Allergies\", \"Asthma\", \n  \"Arthritis\", \"Depression\", \"Anxiety\", \"High Cholesterol\", \"Thyroid Disorder\",\n  \"Kidney Disease\", \"Liver Disease\", \"Cancer History\", \"Stroke History\", \"Epilepsy\"\n];\n\nexport function PatientForm({ initialData, onSubmit, loading, onCancel }: PatientFormProps) {\n  const [selectedConditions, setSelectedConditions] = useState<string[]>([]);\n  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);\n\n  const form = useForm<InsertPatient>({\n    resolver: zodResolver(insertPatientSchema),\n    defaultValues: initialData ? {\n      firstName: initialData.firstName,\n      lastName: initialData.lastName,\n      phone: initialData.phone,\n      email: initialData.email || \"\",\n      dateOfBirth: initialData.dateOfBirth,\n      address: initialData.address || \"\",\n      gender: initialData.gender as \"Male\" | \"Female\",\n      jmbg: initialData.jmbg,\n      medicalConditions: [],\n    } : {\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      email: \"\",\n      dateOfBirth: \"\",\n      address: \"\",\n      gender: \"Male\",\n      jmbg: \"\",\n      medicalConditions: [],\n    },\n  });\n\n  const handleConditionChange = (condition: string, checked: boolean) => {\n    if (checked) {\n      setSelectedConditions(prev => [...prev, condition]);\n    } else {\n      setSelectedConditions(prev => prev.filter(c => c !== condition));\n    }\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    setUploadedFiles(prev => [...prev, ...files]);\n  };\n\n  const removeFile = (index: number) => {\n    setUploadedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleFormSubmit = (data: InsertPatient) => {\n    const formDataWithConditions = {\n      ...data,\n      medicalConditions: selectedConditions,\n    };\n    onSubmit(formDataWithConditions);\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>\n          {initialData ? \"Edit Patient\" : \"Add New Patient\"}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleFormSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>First Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter first name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Last Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter last name\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Enter phone number\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" placeholder=\"Enter email address\" {...field} value={field.value || \"\"} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"dateOfBirth\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Date of Birth *</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"gender\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Gender *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select gender\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Male\">Male</SelectItem>\n                        <SelectItem value=\"Female\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n            \n            <FormField\n              control={form.control}\n              name=\"jmbg\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>JMBG *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter JMBG (13 digits)\" maxLength={13} {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Address</FormLabel>\n                  <FormControl>\n                    <Textarea placeholder=\"Enter address\" rows={3} {...field} value={field.value || \"\"} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Medical Conditions Section */}\n            <div className=\"space-y-4\">\n              <div className=\"border-t pt-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Medical Conditions</h3>\n                <p className=\"text-sm text-gray-500 mb-4\">Select any existing medical conditions:</p>\n                \n                {selectedConditions.length > 0 && (\n                  <div className=\"mb-4\">\n                    <p className=\"text-sm font-medium text-gray-700 mb-2\">Selected conditions:</p>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {selectedConditions.map((condition) => (\n                        <Badge key={condition} variant=\"secondary\" className=\"px-3 py-1\">\n                          {condition}\n                          <button\n                            type=\"button\"\n                            onClick={() => handleConditionChange(condition, false)}\n                            className=\"ml-2 text-gray-500 hover:text-gray-700\"\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </button>\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {commonMedicalConditions.map((condition) => (\n                    <div key={condition} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={condition}\n                        checked={selectedConditions.includes(condition)}\n                        onCheckedChange={(checked) => handleConditionChange(condition, !!checked)}\n                      />\n                      <label htmlFor={condition} className=\"text-sm text-gray-700 cursor-pointer\">\n                        {condition}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* File Upload Section */}\n            <div className=\"space-y-4\">\n              <div className=\"border-t pt-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 mb-4\">Patient Documents</h3>\n                <p className=\"text-sm text-gray-500 mb-4\">Upload medical records, ID documents, or other relevant files:</p>\n                \n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors\">\n                  <Upload className=\"mx-auto h-8 w-8 text-gray-400 mb-2\" />\n                  <p className=\"text-sm text-gray-600 mb-2\">Drag and drop files here, or click to browse</p>\n                  <input\n                    type=\"file\"\n                    multiple\n                    accept=\".pdf,.jpg,.jpeg,.png,.doc,.docx\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                    id=\"file-upload\"\n                  />\n                  <label htmlFor=\"file-upload\" className=\"cursor-pointer\">\n                    <Button type=\"button\" variant=\"outline\" size=\"sm\">\n                      Choose Files\n                    </Button>\n                  </label>\n                  <p className=\"text-xs text-gray-500 mt-2\">Supported: PDF, JPG, PNG, DOC, DOCX (max 10MB each)</p>\n                </div>\n\n                {uploadedFiles.length > 0 && (\n                  <div className=\"mt-4\">\n                    <p className=\"text-sm font-medium text-gray-700 mb-2\">Uploaded files:</p>\n                    <div className=\"space-y-2\">\n                      {uploadedFiles.map((file, index) => (\n                        <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <FileText className=\"h-5 w-5 text-gray-400\" />\n                            <div>\n                              <p className=\"text-sm font-medium text-gray-900\">{file.name}</p>\n                              <p className=\"text-xs text-gray-500\">{(file.size / 1024 / 1024).toFixed(2)} MB</p>\n                            </div>\n                          </div>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeFile(index)}\n                            className=\"text-red-500 hover:text-red-700\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3 pt-6\">\n              {onCancel && (\n                <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n                  Cancel\n                </Button>\n              )}\n              <Button type=\"submit\" disabled={loading} className=\"bg-blue-600 hover:bg-blue-700\">\n                {loading ? \"Saving...\" : initialData ? \"Update Patient\" : \"Add Patient\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":12947},"client/src/components/patients/patient-search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, Filter, Download } from \"lucide-react\";\n\ninterface PatientSearchProps {\n  onSearchChange: (search: string) => void;\n  onPageSizeChange: (pageSize: number) => void;\n  totalCount?: number;\n  currentPage?: number;\n  pageSize?: number;\n}\n\nexport function PatientSearch({ \n  onSearchChange, \n  onPageSizeChange, \n  totalCount = 0,\n  currentPage = 1,\n  pageSize = 10\n}: PatientSearchProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      onSearchChange(searchTerm);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchTerm, onSearchChange]);\n\n  const startIndex = (currentPage - 1) * pageSize + 1;\n  const endIndex = Math.min(currentPage * pageSize, totalCount);\n\n  return (\n    <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0 mb-6\">\n      <div className=\"flex items-center space-x-4\">\n        <div className=\"relative\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search patients...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-80 pl-10\"\n          />\n        </div>\n        \n        <Select defaultValue=\"all\">\n          <SelectTrigger className=\"w-[180px]\">\n            <SelectValue placeholder=\"All Status\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Status</SelectItem>\n            <SelectItem value=\"active\">Active</SelectItem>\n            <SelectItem value=\"inactive\">Inactive</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n      \n      <div className=\"flex items-center space-x-4\">\n        <div className=\"flex items-center space-x-2\">\n          <span className=\"text-sm text-gray-500\">Show</span>\n          <Select value={pageSize.toString()} onValueChange={(value) => onPageSizeChange(parseInt(value))}>\n            <SelectTrigger className=\"w-[70px]\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"10\">10</SelectItem>\n              <SelectItem value=\"25\">25</SelectItem>\n              <SelectItem value=\"50\">50</SelectItem>\n            </SelectContent>\n          </Select>\n          <span className=\"text-sm text-gray-500\">per page</span>\n        </div>\n        \n        <span className=\"text-sm text-gray-500\">\n          Showing {startIndex}-{endIndex} of {totalCount} patients\n        </span>\n        \n        <Button variant=\"outline\" size=\"sm\">\n          <Download className=\"h-4 w-4 mr-2\" />\n          Export\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3013},"client/src/components/patients/patient-stats.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, UserCheck, UserX, Calendar, Activity, TrendingUp } from \"lucide-react\";\nimport type { Patient } from \"@shared/schema\";\nimport { differenceInYears, parseISO } from \"date-fns\";\n\ninterface PatientStatsProps {\n  patients: Patient[];\n}\n\nexport function PatientStats({ patients }: PatientStatsProps) {\n  const safePatients = patients || [];\n  const totalPatients = safePatients.length;\n  \n  const activePatients = safePatients.filter(p => {\n    const daysSinceLastVisit = (new Date().getTime() - new Date(p.updatedAt).getTime()) / (1000 * 60 * 60 * 24);\n    return daysSinceLastVisit <= 180;\n  }).length;\n\n  const inactivePatients = totalPatients - activePatients;\n\n  const newPatientsThisMonth = safePatients.filter(p => {\n    const daysSinceCreated = (new Date().getTime() - new Date(p.createdAt).getTime()) / (1000 * 60 * 60 * 24);\n    return daysSinceCreated <= 30;\n  }).length;\n\n  const averageAge = safePatients.length > 0 ? Math.round(\n    safePatients.reduce((sum, p) => {\n      try {\n        return sum + differenceInYears(new Date(), parseISO(p.dateOfBirth));\n      } catch {\n        return sum;\n      }\n    }, 0) / safePatients.length\n  ) : 0;\n\n  const ageDistribution = {\n    children: safePatients.filter(p => {\n      try {\n        const age = differenceInYears(new Date(), parseISO(p.dateOfBirth));\n        return age < 18;\n      } catch {\n        return false;\n      }\n    }).length,\n    adults: safePatients.filter(p => {\n      try {\n        const age = differenceInYears(new Date(), parseISO(p.dateOfBirth));\n        return age >= 18 && age < 65;\n      } catch {\n        return false;\n      }\n    }).length,\n    seniors: safePatients.filter(p => {\n      try {\n        const age = differenceInYears(new Date(), parseISO(p.dateOfBirth));\n        return age >= 65;\n      } catch {\n        return false;\n      }\n    }).length,\n  };\n\n  const stats = [\n    {\n      title: \"Total Patients\",\n      value: totalPatients.toString(),\n      description: \"All registered patients\",\n      icon: Users,\n      color: \"text-blue-600\",\n      bgColor: \"bg-blue-50\",\n      badge: null,\n    },\n    {\n      title: \"Active Patients\",\n      value: activePatients.toString(),\n      description: \"Visited within 6 months\",\n      icon: UserCheck,\n      color: \"text-green-600\",\n      bgColor: \"bg-green-50\",\n      badge: totalPatients > 0 ? `${Math.round((activePatients / totalPatients) * 100)}%` : \"0%\",\n    },\n    {\n      title: \"Inactive Patients\",\n      value: inactivePatients.toString(),\n      description: \"No recent visits\",\n      icon: UserX,\n      color: \"text-orange-600\",\n      bgColor: \"bg-orange-50\",\n      badge: totalPatients > 0 ? `${Math.round((inactivePatients / totalPatients) * 100)}%` : \"0%\",\n    },\n    {\n      title: \"New This Month\",\n      value: newPatientsThisMonth.toString(),\n      description: \"Recently registered\",\n      icon: TrendingUp,\n      color: \"text-purple-600\",\n      bgColor: \"bg-purple-50\",\n      badge: newPatientsThisMonth > 0 ? \"New\" : null,\n    },\n    {\n      title: \"Average Age\",\n      value: `${averageAge} years`,\n      description: \"Patient demographics\",\n      icon: Calendar,\n      color: \"text-indigo-600\",\n      bgColor: \"bg-indigo-50\",\n      badge: null,\n    },\n    {\n      title: \"Age Distribution\",\n      value: `${ageDistribution.children}/${ageDistribution.adults}/${ageDistribution.seniors}`,\n      description: \"Children/Adults/Seniors\",\n      icon: Activity,\n      color: \"text-cyan-600\",\n      bgColor: \"bg-cyan-50\",\n      badge: null,\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\">\n      {stats.map((stat, index) => {\n        const Icon = stat.icon;\n        return (\n          <Card key={index} className=\"hover:shadow-md transition-shadow duration-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className={`${stat.bgColor} p-2 rounded-lg`}>\n                  <Icon className={`h-4 w-4 ${stat.color}`} />\n                </div>\n                {stat.badge && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {stat.badge}\n                  </Badge>\n                )}\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"text-2xl font-bold text-gray-900\">{stat.value}</p>\n                <p className=\"text-sm font-medium text-gray-900\">{stat.title}</p>\n                <p className=\"text-xs text-gray-500\">{stat.description}</p>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}","size_bytes":4767},"client/src/components/patients/patient-table.tsx":{"content":"import { useState } from \"react\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { PatientActionsMenu } from \"./patient-actions-menu\";\nimport { Calendar, Phone, Mail, MapPin, Activity } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Patient } from \"@shared/schema\";\nimport { format, parseISO, differenceInYears } from \"date-fns\";\n\ninterface PatientTableProps {\n  patients: Patient[];\n  loading?: boolean;\n  compact?: boolean;\n}\n\nexport function PatientTable({ patients, loading, compact = false }: PatientTableProps) {\n  const [selectedPatients, setSelectedPatients] = useState<number[]>([]);\n\n  const toggleSelectAll = () => {\n    if (selectedPatients.length === patients.length) {\n      setSelectedPatients([]);\n    } else {\n      setSelectedPatients(patients.map(p => p.id));\n    }\n  };\n\n  const toggleSelectPatient = (patientId: number) => {\n    setSelectedPatients(prev => \n      prev.includes(patientId) \n        ? prev.filter(id => id !== patientId)\n        : [...prev, patientId]\n    );\n  };\n\n  const getPatientAge = (dateOfBirth: string) => {\n    try {\n      return differenceInYears(new Date(), parseISO(dateOfBirth));\n    } catch {\n      return 0;\n    }\n  };\n\n  const getPatientStatus = (patient: Patient) => {\n    // Simple status logic - could be enhanced based on last visit date\n    const lastVisit = new Date(patient.updatedAt);\n    const daysSinceLastVisit = differenceInYears(new Date(), lastVisit) * 365;\n    \n    if (daysSinceLastVisit > 365) return { status: \"Inactive\", variant: \"secondary\" as const };\n    if (daysSinceLastVisit > 180) return { status: \"At Risk\", variant: \"destructive\" as const };\n    return { status: \"Active\", variant: \"default\" as const };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"space-y-3\">\n        {[1, 2, 3, 4, 5].map((i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-20 bg-gradient-to-r from-gray-200 to-gray-100 rounded-lg\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <Table>\n        <TableHeader>\n          <TableRow className=\"bg-muted/50 hover:bg-muted/60\">\n            {!compact && (\n              <TableHead className=\"w-12\">\n                <Checkbox\n                  checked={selectedPatients.length === patients.length && patients.length > 0}\n                  onCheckedChange={toggleSelectAll}\n                  data-testid=\"checkbox-select-all\"\n                />\n              </TableHead>\n            )}\n            <TableHead>Patient</TableHead>\n            <TableHead>Contact</TableHead>\n            <TableHead>Age & Birth Date</TableHead>\n            <TableHead>Last Visit</TableHead>\n            <TableHead>Status</TableHead>\n            <TableHead className=\"text-right\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {patients.map((patient) => {\n            const age = getPatientAge(patient.dateOfBirth);\n            const status = getPatientStatus(patient);\n            const initials = `${patient.firstName[0]}${patient.lastName[0]}`.toUpperCase();\n\n            return (\n              <TableRow \n                key={patient.id} \n                className=\"hover:bg-muted/30 transition-colors duration-200 group\"\n                data-testid={`row-patient-${patient.id}`}\n              >\n                {!compact && (\n                  <TableCell>\n                    <Checkbox\n                      checked={selectedPatients.includes(patient.id)}\n                      onCheckedChange={() => toggleSelectPatient(patient.id)}\n                      data-testid={`checkbox-patient-${patient.id}`}\n                    />\n                  </TableCell>\n                )}\n                <TableCell>\n                  <Link href={`/patients/${patient.id}`} className=\"block\">\n                    <div className=\"flex items-center space-x-3 group-hover:text-blue-600 transition-colors cursor-pointer\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarImage src={patient.profileImageUrl || \"\"} />\n                        <AvatarFallback className=\"bg-blue-100 text-blue-600 font-medium\">\n                          {initials}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <div className=\"text-sm font-medium text-gray-900 group-hover:text-blue-600\">\n                          {patient.firstName} {patient.lastName}\n                        </div>\n                        <div className=\"text-sm text-gray-500\">\n                          ID: #{patient.id}\n                          {patient.jmbg && ` • JMBG: ${patient.jmbg}`}\n                        </div>\n                      </div>\n                    </div>\n                  </Link>\n                </TableCell>\n                <TableCell>\n                  <div className=\"space-y-1\">\n                    <div className=\"flex items-center text-sm text-gray-900\">\n                      <Phone className=\"h-3 w-3 mr-2 text-gray-400\" />\n                      {patient.phone}\n                    </div>\n                    {patient.email && (\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <Mail className=\"h-3 w-3 mr-2 text-gray-400\" />\n                        {patient.email}\n                      </div>\n                    )}\n                    {patient.address && (\n                      <div className=\"flex items-center text-sm text-gray-500\">\n                        <MapPin className=\"h-3 w-3 mr-2 text-gray-400\" />\n                        {patient.address}\n                      </div>\n                    )}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"space-y-1\">\n                    <div className=\"text-sm font-medium text-gray-900\">\n                      {age} years old\n                    </div>\n                    <div className=\"text-sm text-gray-500 flex items-center\">\n                      <Calendar className=\"h-3 w-3 mr-2 text-gray-400\" />\n                      {format(parseISO(patient.dateOfBirth), 'MMM dd, yyyy')}\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <div className=\"text-sm text-gray-900 flex items-center\">\n                    <Activity className=\"h-3 w-3 mr-2 text-gray-400\" />\n                    {format(new Date(patient.updatedAt), 'MMM dd, yyyy')}\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Badge variant={status.variant} className=\"text-xs\">\n                    {status.status}\n                  </Badge>\n                </TableCell>\n                <TableCell className=\"text-right\">\n                  <PatientActionsMenu patient={patient} />\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      \n      {patients.length === 0 && (\n        <div className=\"text-center py-12 text-gray-500\">\n          <div className=\"mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n            <Activity className=\"h-8 w-8 text-gray-400\" />\n          </div>\n          <p className=\"text-lg font-medium mb-2\">No patients found</p>\n          <p className=\"text-sm\">Try adjusting your search criteria or add a new patient.</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7872},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/appointments/appointments.tsx":{"content":"import { Layout } from \"@/components/layout/layout\";\nimport { AppointmentCalendar } from \"@/components/appointments/appointment-calendar\";\nimport { AppointmentList } from \"@/components/appointments/appointment-list\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar, Clock, User, Plus } from \"lucide-react\";\nimport { useAppointments } from \"@/hooks/use-appointments\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { format } from \"date-fns\";\n\nexport default function AppointmentsPage() {\n  const { data: appointmentsData, isLoading } = useAppointments();\n  const { data: patientsData } = usePatients();\n\n  // Create a map of patient IDs to names for quick lookup\n  const patientMap = new Map();\n  if (patientsData?.items) {\n    patientsData.items.forEach(patient => {\n      patientMap.set(patient.id, `${patient.firstName} ${patient.lastName}`);\n    });\n  }\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'scheduled':\n        return 'status-scheduled';\n      case 'completed':\n        return 'status-completed';\n      case 'cancelled':\n        return 'status-cancelled';\n      default:\n        return 'status-scheduled';\n    }\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Appointments</CardTitle>\n              <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Schedule Appointment\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {[1, 2, 3, 4, 5].map((i) => (\n                  <div key={i} className=\"animate-pulse\">\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : appointmentsData?.items && appointmentsData.items.length > 0 ? (\n              <div className=\"space-y-4\">\n                {appointmentsData.items.map((appointment) => (\n                  <div \n                    key={appointment.id}\n                    className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                          <Calendar className=\"h-6 w-6 text-blue-600\" />\n                        </div>\n                        <div>\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <User className=\"h-4 w-4 text-gray-400\" />\n                            <span className=\"font-medium text-gray-900\">\n                              {patientMap.get(appointment.patientId) || `Patient #${appointment.patientId}`}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mb-1\">\n                            {appointment.description || 'No description'}\n                          </p>\n                          <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                            <div className=\"flex items-center space-x-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              <span>{format(new Date(appointment.appointmentDate), 'MMMM dd, yyyy')}</span>\n                            </div>\n                            <div className=\"flex items-center space-x-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span>{format(new Date(appointment.appointmentDate), 'h:mm a')}</span>\n                            </div>\n                            <span>Duration: {appointment.duration} minutes</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge className={`status-badge ${getStatusColor(appointment.status)}`}>\n                          {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}\n                        </Badge>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Calendar className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No appointments found</h3>\n                <p className=\"text-gray-500 mb-4\">Get started by scheduling your first appointment.</p>\n                <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Schedule Appointment\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":5499},"client/src/pages/files/files.tsx":{"content":"import { useState } from \"react\";\nimport { Layout } from \"@/components/layout/layout\";\nimport { FileUpload } from \"@/components/files/file-upload\";\nimport { FileList } from \"@/components/files/file-list\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { usePatients } from \"@/hooks/use-patients\";\n\nexport default function FilesPage() {\n  const [selectedPatientId, setSelectedPatientId] = useState<number | undefined>();\n  const { data: patientsData } = usePatients({ pageSize: 100 });\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Patient Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Patient File Management</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"max-w-sm\">\n              <Label htmlFor=\"patient-select\">Select Patient</Label>\n              <Select onValueChange={(value) => setSelectedPatientId(parseInt(value))}>\n                <SelectTrigger id=\"patient-select\">\n                  <SelectValue placeholder=\"Choose a patient...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {patientsData?.items?.map((patient) => (\n                    <SelectItem key={patient.id} value={patient.id.toString()}>\n                      {patient.firstName} {patient.lastName} (#{patient.id})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* File Upload */}\n        <FileUpload patientId={selectedPatientId} />\n\n        {/* File List */}\n        <FileList patientId={selectedPatientId} />\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":1883},"client/src/pages/medical-records/medical-records.tsx":{"content":"import { useState } from \"react\";\nimport { Layout } from \"@/components/layout/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { useAppointments } from \"@/hooks/use-appointments\";\nimport { Plus, Search, FileText, Calendar, AlertTriangle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function MedicalRecordsPage() {\n  const [selectedPatientId, setSelectedPatientId] = useState<number | undefined>();\n  const { data: patientsData } = usePatients({ pageSize: 100 });\n  const { data: appointmentsData } = useAppointments({ patientId: selectedPatientId });\n\n  const selectedPatient = patientsData?.items?.find(p => p.id === selectedPatientId);\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Patient Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Medical Records Management</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"max-w-sm\">\n              <Label htmlFor=\"patient-select\">Select Patient</Label>\n              <Select onValueChange={(value) => setSelectedPatientId(parseInt(value))}>\n                <SelectTrigger id=\"patient-select\">\n                  <SelectValue placeholder=\"Choose a patient...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {patientsData?.items?.map((patient) => (\n                    <SelectItem key={patient.id} value={patient.id.toString()}>\n                      {patient.firstName} {patient.lastName} (#{patient.id})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {selectedPatient && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Patient Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Patient Information</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-900\">\n                      {selectedPatient.firstName} {selectedPatient.lastName}\n                    </p>\n                    <p className=\"text-sm text-gray-500\">ID: #{selectedPatient.id}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-gray-500\">Date of Birth</p>\n                    <p className=\"text-sm text-gray-900\">\n                      {format(new Date(selectedPatient.dateOfBirth), 'MMM dd, yyyy')}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-gray-500\">Phone</p>\n                    <p className=\"text-sm text-gray-900\">{selectedPatient.phone}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-xs text-gray-500\">Email</p>\n                    <p className=\"text-sm text-gray-900\">{selectedPatient.email || 'Not provided'}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Medical History */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>Medical History & Treatments</CardTitle>\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Record\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  {appointmentsData?.items && appointmentsData.items.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {appointmentsData.items.map((appointment) => (\n                        <div key={appointment.id} className=\"border border-gray-200 rounded-lg p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div>\n                              <h4 className=\"font-medium text-gray-900\">\n                                {appointment.description || 'General Treatment'}\n                              </h4>\n                              <p className=\"text-sm text-gray-500\">\n                                {format(new Date(appointment.appointmentDate), 'MMMM dd, yyyy \\'at\\' h:mm a')}\n                              </p>\n                            </div>\n                            <Badge className={`status-badge status-${appointment.status}`}>\n                              {appointment.status.charAt(0).toUpperCase() + appointment.status.slice(1)}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"space-y-3\">\n                            <div>\n                              <Label className=\"text-xs font-medium text-gray-500\">Treatment Notes</Label>\n                              <p className=\"text-sm text-gray-900 mt-1\">\n                                {appointment.status === 'completed' \n                                  ? 'Treatment completed successfully. Patient showed good response to procedure.'\n                                  : 'Scheduled for routine examination and cleaning.'\n                                }\n                              </p>\n                            </div>\n                            \n                            <div>\n                              <Label className=\"text-xs font-medium text-gray-500\">Duration</Label>\n                              <p className=\"text-sm text-gray-900\">{appointment.duration} minutes</p>\n                            </div>\n\n                            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                              <div className=\"flex items-center space-x-1\">\n                                <FileText className=\"h-3 w-3\" />\n                                <span>Treatment ID: #{appointment.id}</span>\n                              </div>\n                              {appointment.status === 'completed' && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n                                  <span>Treatment Complete</span>\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      <FileText className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No medical records found</h3>\n                      <p className=\"text-gray-500 mb-4\">Start by adding the first medical record.</p>\n                      <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add First Record\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Add New Medical Record Form */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Add New Medical Record</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"treatment-type\">Treatment Type</Label>\n                        <Select>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select treatment...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"consultation\">Consultation</SelectItem>\n                            <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n                            <SelectItem value=\"filling\">Filling</SelectItem>\n                            <SelectItem value=\"extraction\">Extraction</SelectItem>\n                            <SelectItem value=\"root-canal\">Root Canal</SelectItem>\n                            <SelectItem value=\"whitening\">Whitening</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div>\n                        <Label htmlFor=\"treatment-date\">Treatment Date</Label>\n                        <Input type=\"datetime-local\" />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"treatment-notes\">Treatment Notes</Label>\n                      <Textarea \n                        placeholder=\"Enter detailed treatment notes...\"\n                        rows={4}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                        <Input placeholder=\"Enter diagnosis...\" />\n                      </div>\n                      <div>\n                        <Label htmlFor=\"prescription\">Prescription</Label>\n                        <Input placeholder=\"Enter prescription...\" />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex justify-end\">\n                      <Button className=\"bg-blue-600 hover:bg-blue-700\">\n                        Save Medical Record\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        )}\n\n        {!selectedPatient && (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Search className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Select a Patient</h3>\n              <p className=\"text-gray-500\">Choose a patient from the dropdown above to view their medical records.</p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </Layout>\n  );\n}","size_bytes":10980},"client/src/pages/patients/create-patient.tsx":{"content":"import { Layout } from \"@/components/layout/layout\";\nimport { PatientForm } from \"@/components/patients/patient-form\";\nimport { useCreatePatient, useUpdatePatient, usePatient } from \"@/hooks/use-patients\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation, useParams } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Loader2, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport type { InsertPatient } from \"@shared/schema\";\n\nexport default function CreatePatientPage() {\n  const [, setLocation] = useLocation();\n  const { id } = useParams();\n  const isEditMode = !!id;\n  \n  const createPatientMutation = useCreatePatient();\n  const updatePatientMutation = useUpdatePatient();\n  const { toast } = useToast();\n\n  // Fetch patient data if in edit mode\n  const { data: patient, isLoading: isLoadingPatient } = usePatient(\n    isEditMode ? parseInt(id!) : undefined\n  );\n\n  const handleSubmit = async (data: InsertPatient) => {\n    try {\n      if (isEditMode && patient) {\n        await updatePatientMutation.mutateAsync({ \n          id: patient.id, \n          patient: data \n        });\n        toast({\n          title: \"Success\",\n          description: \"Patient updated successfully\",\n        });\n        setLocation(`/patients/${patient.id}`);\n      } else {\n        const newPatient = await createPatientMutation.mutateAsync(data);\n        toast({\n          title: \"Success\",\n          description: \"Patient created successfully\",\n        });\n        setLocation(`/patients/${newPatient.id}`);\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: isEditMode ? \"Failed to update patient\" : \"Failed to create patient\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleCancel = () => {\n    setLocation(isEditMode ? `/patients/${id}` : \"/patients\");\n  };\n\n  if (isEditMode && isLoadingPatient) {\n    return (\n      <Layout>\n        <div className=\"p-6 max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"h-6 w-6 animate-spin mr-2\" />\n              Loading patient data...\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (isEditMode && !patient) {\n    return (\n      <Layout>\n        <div className=\"p-6 max-w-4xl mx-auto\">\n          <Card>\n            <CardContent className=\"text-center py-12\">\n              <p className=\"text-gray-500 mb-4\">Patient not found</p>\n              <Link href=\"/patients\">\n                <Button variant=\"outline\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Patients\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 max-w-4xl mx-auto\">\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>\n                {isEditMode ? \"Edit Patient\" : \"Add New Patient\"}\n              </CardTitle>\n              <Link href={isEditMode ? `/patients/${id}` : \"/patients\"}>\n                <Button variant=\"outline\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <PatientForm\n              initialData={isEditMode ? patient : undefined}\n              onSubmit={handleSubmit}\n              loading={createPatientMutation.isPending || updatePatientMutation.isPending}\n              onCancel={handleCancel}\n              isEditMode={isEditMode}\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":3901},"client/src/pages/patients/patient-details.tsx":{"content":"import { Layout } from \"@/components/layout/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileList } from \"@/components/files/file-list\";\nimport { FileUpload } from \"@/components/files/file-upload\";\nimport { OdontogramISO } from \"@/components/patients/odontogram-iso\";\nimport { MedicalNotes } from \"@/components/patients/medical-notes\";\nimport { TreatmentHistoryPanel } from \"@/components/patients/treatment-history-panel\";\nimport { FinancialRecordModal } from \"@/components/patients/financial-record-modal\";\nimport { AppointmentBookingModal } from \"@/components/appointments/appointment-booking-modal\";\nimport { usePatient } from \"@/hooks/use-patients\";\nimport { usePatientFiles } from \"@/hooks/use-files\";\nimport { useAppointments } from \"@/hooks/use-appointments\";\nimport { useTreatmentHistory } from \"@/hooks/use-treatment-history\";\nimport { usePaymentRecords } from \"@/hooks/use-payments\";\nimport { useTranslation } from \"@/lib/i18n\";\nimport { Link, useParams } from \"wouter\";\nimport { useState } from \"react\";\nimport { ArrowLeft, Edit, Calendar, FileText, Phone, Mail, MapPin } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nexport default function PatientDetailsPage() {\n  const params = useParams();\n  const patientId = parseInt(params.id || \"0\");\n  const [financialModalOpen, setFinancialModalOpen] = useState(false);\n  const [appointmentModalOpen, setAppointmentModalOpen] = useState(false);\n  const { t } = useTranslation();\n  \n  const { data: patient, isLoading: patientLoading } = usePatient(patientId);\n  const { data: files } = usePatientFiles(patientId);\n  const { data: appointmentsData } = useAppointments({ patientId });\n  const { data: treatments } = useTreatmentHistory(patientId);\n  const { data: payments } = usePaymentRecords(patientId);\n\n  // Calculate financial totals from actual data\n  const treatmentsArray = Array.isArray(treatments) ? treatments : [];\n  const paymentsArray = Array.isArray(payments) ? payments : [];\n  const totalTreatmentCost = treatmentsArray.reduce((sum: number, treatment: any) => sum + treatment.cost, 0);\n  const totalPaid = paymentsArray.reduce((sum: number, payment: any) => sum + payment.amount, 0);\n  const outstanding = totalTreatmentCost - totalPaid;\n\n  // Calculate patient age for odontogram\n  const patientAge = patient ? new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear() : 25;\n\n  if (patientLoading) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n            <div className=\"h-64 bg-gray-200 rounded\"></div>\n            <div className=\"h-32 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  if (!patient) {\n    return (\n      <Layout>\n        <div className=\"p-6\">\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <h2 className=\"text-2xl font-semibold text-gray-900 mb-2\">Patient Not Found</h2>\n              <p className=\"text-gray-500 mb-4\">The patient you're looking for doesn't exist.</p>\n              <Link href=\"/patients\">\n                <Button>Back to Patients</Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/patients\">\n              <Button variant=\"ghost\" size=\"sm\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n            </Link>\n            <div>\n              <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">\n                {patient.firstName} {patient.lastName}\n              </h1>\n              <p className=\"text-gray-500 dark:text-gray-400\">Patient ID: #{patient.id}</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Link href={`/patients/${patient.id}/edit`}>\n              <Button variant=\"outline\">\n                <Edit className=\"h-4 w-4 mr-2\" />\n                Edit Patient\n              </Button>\n            </Link>\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              Schedule Appointment\n            </Button>\n          </div>\n        </div>\n\n        {/* Patient Information */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Medical Condition Alert */}\n            {(patient as any).medicalConditions && (patient as any).medicalConditions.length > 0 && (\n              <Card className=\"border-orange-200 bg-orange-50 dark:bg-orange-950 dark:border-orange-800\">\n                <CardHeader>\n                  <CardTitle className=\"text-orange-800 dark:text-orange-200 flex items-center\">\n                    <svg className=\"h-5 w-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                    </svg>\n                    Medical Conditions Alert\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {((patient as any).medicalConditions as string[]).map((condition: string, index: number) => (\n                      <Badge key={index} variant=\"outline\" className=\"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\">\n                        {condition}\n                      </Badge>\n                    ))}\n                  </div>\n                  <p className=\"text-sm text-orange-700 dark:text-orange-300 mt-2\">\n                    Please review medical conditions before treatment\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Basic Information */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t.patientInformation}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">{t.fullName}</label>\n                      <p className=\"text-sm text-gray-900\">{patient.firstName} {patient.lastName}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">{t.dateOfBirth}</label>\n                      <p className=\"text-sm text-gray-900\">\n                        {format(new Date(patient.dateOfBirth), 'MMMM dd, yyyy')}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">{t.gender}</label>\n                      <p className=\"text-sm text-gray-900\">{patient.gender}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-gray-500\">JMBG</label>\n                      <p className=\"text-sm text-gray-900\">{patient.jmbg}</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Phone className=\"h-4 w-4 text-gray-400\" />\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">{t.phone}</label>\n                        <p className=\"text-sm text-gray-900\">{patient.phone}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Mail className=\"h-4 w-4 text-gray-400\" />\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">{t.email}</label>\n                        <p className=\"text-sm text-gray-900\">{patient.email || 'Not provided'}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4 text-gray-400\" />\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">{t.address}</label>\n                        <p className=\"text-sm text-gray-900\">{patient.address || 'Not provided'}</p>\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">{t.status}</label>\n                      <div className=\"mt-1\">\n                        <Badge className=\"status-badge status-active\">Active</Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Appointments */}\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>{t.appointments}</CardTitle>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600\">\n                    View All\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {appointmentsData?.items && appointmentsData.items.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {appointmentsData.items.slice(0, 3).map((appointment) => (\n                      <div key={appointment.id} className=\"border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors\">\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <h4 className=\"text-sm font-semibold text-foreground\">\n                                {appointment.description || t.dentalCleaning}\n                              </h4>\n                              <Badge className={`status-badge status-${appointment.status} text-xs`}>\n                                {appointment.status === 'scheduled' ? t.appointmentScheduled :\n                                 appointment.status === 'completed' ? t.appointmentCompleted : \n                                 t.appointmentCancelled}\n                              </Badge>\n                            </div>\n                            <p className=\"text-xs text-muted-foreground mb-1\">\n                              {format(new Date(appointment.appointmentDate), 'EEEE, MMMM dd, yyyy \\'at\\' h:mm a')} \n                              <span className=\"mx-1\">•</span>\n                              {t.duration}: {appointment.duration} min\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm font-medium text-green-600\">\n                              €{(treatmentsArray.find((t: any) => t.appointmentId === appointment.id)?.cost || 0) / 100}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\">{t.fee}</p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"mx-auto h-8 w-8 text-muted-foreground mb-3\" />\n                    <p className=\"text-muted-foreground\">No appointments found</p>\n                    <p className=\"text-xs text-muted-foreground\">Schedule an appointment to get started</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Financial Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t.financialOverview}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Payment Summary Cards */}\n                  <div className=\"grid grid-cols-3 gap-3\">\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-3 text-center\">\n                      <p className=\"text-xs text-green-600 font-medium\">{t.totalPaid}</p>\n                      <p className=\"text-lg font-semibold text-green-700\">\n                        €{(totalPaid / 100).toFixed(2)}\n                      </p>\n                    </div>\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 text-center\">\n                      <p className=\"text-xs text-red-600 font-medium\">{t.outstanding}</p>\n                      <p className=\"text-lg font-semibold text-red-700\">€{(outstanding / 100).toFixed(2)}</p>\n                    </div>\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 text-center\">\n                      <p className=\"text-xs text-blue-600 font-medium\">{t.totalTreatments}</p>\n                      <p className=\"text-lg font-semibold text-blue-700\">\n                        €{(totalTreatmentCost / 100).toFixed(2)}\n                      </p>\n                    </div>\n                  </div>\n\n                  {/* Outstanding Treatments */}\n                  {outstanding > 0 && (\n                    <div className=\"border-t pt-4\">\n                      <h4 className=\"text-sm font-medium text-foreground mb-3\">{t.unpaidTreatments}</h4>\n                      <div className=\"space-y-2\">\n                        {treatmentsArray\n                          .filter((treatment: any) => {\n                            const treatmentPayments = paymentsArray\n                              .filter((p: any) => p.treatmentId === treatment.id)\n                              .reduce((sum: number, p: any) => sum + p.amount, 0);\n                            return treatment.cost > treatmentPayments;\n                          })\n                          .map((treatment: any) => {\n                            const treatmentPayments = paymentsArray\n                              .filter((p: any) => p.treatmentId === treatment.id)\n                              .reduce((sum: number, p: any) => sum + p.amount, 0);\n                            const remainingCost = treatment.cost - treatmentPayments;\n                            \n                            return (\n                              <div key={treatment.id} className=\"flex items-center justify-between p-2 bg-red-50 border border-red-100 rounded-lg\">\n                                <div>\n                                  <p className=\"text-xs font-medium text-red-900\">{treatment.treatmentType}</p>\n                                  <p className=\"text-xs text-red-600\">\n                                    {format(new Date(treatment.performedAt), 'MMM dd, yyyy')}\n                                  </p>\n                                </div>\n                                <p className=\"text-sm font-semibold text-red-700\">€{(remainingCost / 100).toFixed(2)}</p>\n                              </div>\n                            );\n                          })}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Payment Action */}\n                  <div className=\"pt-2\">\n                    <Button \n                      className=\"w-full bg-green-600 hover:bg-green-700\" \n                      size=\"sm\"\n                      onClick={() => setFinancialModalOpen(true)}\n                    >\n                      {t.recordPayment}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Quick Stats */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t.quickStats}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">{t.totalAppointments}</span>\n                    <span className=\"text-sm font-medium\">{appointmentsData?.totalCount || 0}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">{t.completedTreatments}</span>\n                    <span className=\"text-sm font-medium\">\n                      {appointmentsData?.items?.filter(a => a.status === 'completed').length || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">{t.filesUploaded}</span>\n                    <span className=\"text-sm font-medium\">{files?.length || 0}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">{t.lastVisit}</span>\n                    <span className=\"text-sm font-medium\">\n                      {appointmentsData?.items?.[0] ? \n                        format(new Date(appointmentsData.items[0].appointmentDate), 'MMM dd, yyyy') :\n                        'No visits'\n                      }\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">{t.patientSince}</span>\n                    <span className=\"text-sm font-medium\">\n                      {format(new Date(patient.createdAt), 'MMM dd, yyyy')}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment History Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t.recentPayments}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {paymentsArray.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {paymentsArray.slice(0, 5).map((payment: any) => (\n                        <div key={payment.id} className=\"flex items-center justify-between p-2 bg-green-50 border border-green-100 rounded-lg\">\n                          <div>\n                            <p className=\"text-xs font-medium text-green-900\">{payment.paymentMethod}</p>\n                            <p className=\"text-xs text-green-600\">\n                              {format(new Date(payment.paidAt), 'MMM dd, yyyy')}\n                            </p>\n                          </div>\n                          <p className=\"text-sm font-semibold text-green-700\">€{(payment.amount / 100).toFixed(2)}</p>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-sm text-gray-500 text-center py-4\">No payments recorded</p>\n                  )}\n                  \n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm font-medium text-foreground\">{t.totalPaid}</span>\n                      <span className=\"text-lg font-bold text-green-600\">€{(totalPaid / 100).toFixed(2)}</span>\n                    </div>\n                    {outstanding > 0 && (\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium text-foreground\">{t.balanceDue}</span>\n                        <span className=\"text-lg font-bold text-red-600\">€{(outstanding / 100).toFixed(2)}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                <div className=\"pt-3\">\n                  <Button \n                    size=\"sm\" \n                    className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                    onClick={() => setFinancialModalOpen(true)}\n                  >\n                    Financial Record\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>{t.quickActions}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full justify-start\" \n                    size=\"sm\"\n                    onClick={() => setAppointmentModalOpen(true)}\n                  >\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Schedule Appointment\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" size=\"sm\">\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    {t.addMedicalNote}\n                  </Button>\n                  <Button variant=\"outline\" className=\"w-full justify-start\" size=\"sm\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    {t.sendMessage}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Odontogram Section */}\n        <div className=\"space-y-6\">\n          <OdontogramISO patientId={patientId} patientAge={patientAge} />\n        </div>\n\n        {/* Medical Notes and Treatment History */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <MedicalNotes patientId={patientId} />\n          <TreatmentHistoryPanel patientId={patientId} />\n        </div>\n\n        {/* Files Section */}\n        <div className=\"space-y-6\">\n          <FileUpload patientId={patientId} />\n          <FileList patientId={patientId} />\n        </div>\n      </div>\n\n      {/* Financial Record Modal */}\n      <FinancialRecordModal \n        isOpen={financialModalOpen}\n        onClose={() => setFinancialModalOpen(false)}\n        patientId={patientId}\n      />\n\n      {/* Appointment Booking Modal */}\n      <AppointmentBookingModal\n        isOpen={appointmentModalOpen}\n        onClose={() => setAppointmentModalOpen(false)}\n        patientId={patientId}\n        patientName={patient ? `${patient.firstName} ${patient.lastName}` : \"\"}\n      />\n    </Layout>\n  );\n}\n","size_bytes":23200},"client/src/pages/patients/patients.tsx":{"content":"import { useState } from \"react\";\nimport { Layout } from \"@/components/layout/layout\";\nimport { PatientSearch } from \"@/components/patients/patient-search\";\nimport { PatientTable } from \"@/components/patients/patient-table\";\nimport { PatientStats } from \"@/components/patients/patient-stats\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from \"@/components/ui/pagination\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { Link } from \"wouter\";\nimport { Plus, Download, Users, Filter, Grid3X3, List, FileSpreadsheet } from \"lucide-react\";\n\nexport default function PatientsPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"list\");\n  const [activeTab, setActiveTab] = useState(\"all\");\n\n  const { data: patientsData, isLoading } = usePatients({\n    search: searchTerm,\n    pageNumber: currentPage,\n    pageSize,\n  });\n\n  const totalPages = patientsData?.totalPages || 1;\n  const patients = patientsData?.items || [];\n\n  const handlePageChange = (page: number) => {\n    setCurrentPage(page);\n  };\n\n  const handleSearchChange = (search: string) => {\n    setSearchTerm(search);\n    setCurrentPage(1); // Reset to first page when searching\n  };\n\n  const handlePageSizeChange = (newPageSize: number) => {\n    setPageSize(newPageSize);\n    setCurrentPage(1); // Reset to first page when changing page size\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight text-gray-900\">Patient Management</h1>\n            <p className=\"text-gray-500 mt-1\">Manage patient records, appointments, and medical history</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\" size=\"sm\">\n              <FileSpreadsheet className=\"h-4 w-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filter\n            </Button>\n            <Link href=\"/patients/create\">\n              <Button className=\"bg-blue-600 hover:bg-blue-700\" data-testid=\"button-add-patient\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Patient\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <PatientStats patients={patients} />\n\n        {/* Main Content */}\n        <Card>\n          <CardHeader className=\"border-b\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Users className=\"h-5 w-5 text-blue-600\" />\n                  <CardTitle>Patients</CardTitle>\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {patientsData?.totalCount || 0}\n                  </Badge>\n                </div>\n                \n                <Tabs value={activeTab} onValueChange={setActiveTab}>\n                  <TabsList>\n                    <TabsTrigger value=\"all\">All Patients</TabsTrigger>\n                    <TabsTrigger value=\"active\">Active</TabsTrigger>\n                    <TabsTrigger value=\"inactive\">Inactive</TabsTrigger>\n                    <TabsTrigger value=\"recent\">Recent</TabsTrigger>\n                  </TabsList>\n                </Tabs>\n              </div>\n\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-view-list\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-view-grid\"\n                >\n                  <Grid3X3 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            <div className=\"p-6\">\n              <PatientSearch\n                onSearchChange={handleSearchChange}\n                onPageSizeChange={handlePageSizeChange}\n                totalCount={patientsData?.totalCount}\n                currentPage={currentPage}\n                pageSize={pageSize}\n              />\n            </div>\n\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsContent value=\"all\" className=\"m-0\">\n                <div className=\"px-6 pb-6\">\n                  <PatientTable \n                    patients={patients}\n                    loading={isLoading}\n                    compact={viewMode === \"grid\"}\n                  />\n                </div>\n              </TabsContent>\n              <TabsContent value=\"active\" className=\"m-0\">\n                <div className=\"px-6 pb-6\">\n                  <PatientTable \n                    patients={patients.filter(p => {\n                      // Filter active patients - simple logic based on recent activity\n                      const daysSinceLastVisit = (new Date().getTime() - new Date(p.updatedAt).getTime()) / (1000 * 60 * 60 * 24);\n                      return daysSinceLastVisit <= 180;\n                    })}\n                    loading={isLoading}\n                    compact={viewMode === \"grid\"}\n                  />\n                </div>\n              </TabsContent>\n              <TabsContent value=\"inactive\" className=\"m-0\">\n                <div className=\"px-6 pb-6\">\n                  <PatientTable \n                    patients={patients.filter(p => {\n                      const daysSinceLastVisit = (new Date().getTime() - new Date(p.updatedAt).getTime()) / (1000 * 60 * 60 * 24);\n                      return daysSinceLastVisit > 180;\n                    })}\n                    loading={isLoading}\n                    compact={viewMode === \"grid\"}\n                  />\n                </div>\n              </TabsContent>\n              <TabsContent value=\"recent\" className=\"m-0\">\n                <div className=\"px-6 pb-6\">\n                  <PatientTable \n                    patients={patients.filter(p => {\n                      const daysSinceCreated = (new Date().getTime() - new Date(p.createdAt).getTime()) / (1000 * 60 * 60 * 24);\n                      return daysSinceCreated <= 30;\n                    })}\n                    loading={isLoading}\n                    compact={viewMode === \"grid\"}\n                  />\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n              <div className=\"flex items-center justify-between p-6 border-t bg-gray-50/50\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-gray-500\">\n                    Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, patientsData?.totalCount || 0)} of {patientsData?.totalCount || 0} patients\n                  </span>\n                </div>\n                <Pagination>\n                  <PaginationContent>\n                    <PaginationItem>\n                      <PaginationPrevious \n                        onClick={() => handlePageChange(Math.max(1, currentPage - 1))}\n                        className={currentPage === 1 ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                      />\n                    </PaginationItem>\n                    \n                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {\n                      const page = i + 1;\n                      return (\n                        <PaginationItem key={page}>\n                          <PaginationLink\n                            onClick={() => handlePageChange(page)}\n                            isActive={currentPage === page}\n                            className=\"cursor-pointer\"\n                          >\n                            {page}\n                          </PaginationLink>\n                        </PaginationItem>\n                      );\n                    })}\n                    \n                    <PaginationItem>\n                      <PaginationNext \n                        onClick={() => handlePageChange(Math.min(totalPages, currentPage + 1))}\n                        className={currentPage === totalPages ? \"pointer-events-none opacity-50\" : \"cursor-pointer\"}\n                      />\n                    </PaginationItem>\n                  </PaginationContent>\n                </Pagination>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}\n","size_bytes":9391},"client/src/pages/settings/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Layout } from \"@/components/layout/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, DollarSign, Users, Shield, Eye, EyeOff, UserCog } from \"lucide-react\";\nimport { EmployeeManagement } from \"@/components/settings/employee-management\";\nimport { RoleManagement } from \"@/components/settings/role-management\";\nimport { useSettings } from \"@/hooks/useSettings\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function SettingsPage() {\n  const { employee } = useAuth();\n  const { settings, updateSettings, isLoading, isUpdating } = useSettings();\n  const [showRevenue, setShowRevenue] = useState(false);\n  const { toast } = useToast();\n\n  // Initialize local state with settings\n  useEffect(() => {\n    if (settings) {\n      setShowRevenue(settings.showRevenue);\n    }\n  }, [settings]);\n\n  const isAdmin = employee?.roleId === 1; // Admin role ID is 1\n\n  const handleSaveSettings = () => {\n    updateSettings({ showRevenue });\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your preferences have been updated successfully.\",\n    });\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6 max-w-6xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Settings className=\"h-8 w-8 text-blue-600\" />\n            <div>\n              <h1 className=\"text-2xl font-semibold text-gray-900\">Settings</h1>\n              <p className=\"text-gray-500\">Manage your clinic management preferences</p>\n            </div>\n          </div>\n          <Badge className={`px-3 py-1 ${isAdmin ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}`}>\n            <Shield className=\"h-3 w-3 mr-1\" />\n            {isAdmin ? 'Administrator' : 'Staff Member'}\n          </Badge>\n        </div>\n\n        {/* Settings Tabs */}\n        <Tabs defaultValue=\"general\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"general\" className=\"flex items-center gap-2\">\n              <Settings className=\"h-4 w-4\" />\n              General Settings\n            </TabsTrigger>\n            <TabsTrigger value=\"employees\" className=\"flex items-center gap-2\">\n              <UserCog className=\"h-4 w-4\" />\n              Employee Management\n            </TabsTrigger>\n            <TabsTrigger value=\"permissions\" className=\"flex items-center gap-2\">\n              <Shield className=\"h-4 w-4\" />\n              Permissions\n            </TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"general\" className=\"space-y-6 mt-6\">\n            {/* Revenue Visibility Settings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5 text-green-600\" />\n                  Financial Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label htmlFor=\"revenue-visibility\" className=\"text-sm font-medium\">\n                      Show Revenue Data\n                    </Label>\n                    <p className=\"text-sm text-gray-500 mt-1\">\n                      Display financial information in dashboard and reports\n                    </p>\n                  </div>\n                  <Switch\n                    id=\"revenue-visibility\"\n                    checked={showRevenue}\n                    onCheckedChange={setShowRevenue}\n                  />\n                </div>\n                {showRevenue ? (\n                  <div className=\"flex items-center text-sm text-green-600\">\n                    <Eye className=\"h-4 w-4 mr-1\" />\n                    Revenue data is visible\n                  </div>\n                ) : (\n                  <div className=\"flex items-center text-sm text-gray-500\">\n                    <EyeOff className=\"h-4 w-4 mr-1\" />\n                    Revenue data is hidden\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <div className=\"flex justify-end\">\n              <Button onClick={handleSaveSettings} className=\"bg-blue-600 hover:bg-blue-700\">\n                Save Settings\n              </Button>\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"employees\" className=\"space-y-6 mt-6\">\n            <EmployeeManagement />\n          </TabsContent>\n          \n          <TabsContent value=\"permissions\" className=\"space-y-6 mt-6\">\n            <RoleManagement />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":5154},"client/src/components/language-provider.tsx":{"content":"import { useState, ReactNode } from 'react';\nimport { LanguageContext, translations, Language } from '@/lib/i18n';\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport function LanguageProvider({ children }: LanguageProviderProps) {\n  const [language, setLanguage] = useState<Language>(() => {\n    const saved = localStorage.getItem('language');\n    return (saved as Language) || 'en';\n  });\n\n  const changeLanguage = (lang: Language) => {\n    setLanguage(lang);\n    localStorage.setItem('language', lang);\n  };\n\n  const value = {\n    language,\n    setLanguage: changeLanguage,\n    t: translations[language],\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n}","size_bytes":741},"client/src/components/theme-provider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\"\n\ntype Theme = \"light\" | \"dark\" | \"system\"\n\ntype ThemeProviderProps = {\n  children: React.ReactNode\n  defaultTheme?: Theme\n}\n\ntype ThemeProviderState = {\n  theme: Theme\n  setTheme: (theme: Theme) => void\n}\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n}\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState)\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  )\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(\"light\", \"dark\")\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\"\n\n      root.classList.add(systemTheme)\n      return\n    }\n\n    root.classList.add(theme)\n  }, [theme])\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(\"theme\", theme)\n      setTheme(theme)\n    },\n  }\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  )\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext)\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\")\n\n  return context\n}","size_bytes":1524},"client/src/hooks/use-medical-notes.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function useMedicalNotes(patientId: number) {\n  return useQuery({\n    queryKey: ['/api/patients', patientId, 'medical-notes'],\n    enabled: !!patientId && patientId > 0,\n  });\n}\n\nexport function useCreateMedicalNote() {\n  return useMutation({\n    mutationFn: async ({ patientId, title, content, noteType }: { \n      patientId: number; \n      title: string; \n      content: string; \n      noteType: string \n    }) => {\n      const response = await fetch(`/api/patients/${patientId}/medical-notes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ title, content, noteType }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create medical note');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (_, { patientId }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId, 'medical-notes'] });\n    },\n  });\n}","size_bytes":1083},"client/src/hooks/use-payments.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function usePaymentRecords(patientId: number) {\n  return useQuery({\n    queryKey: ['/api/patients', patientId, 'payments'],\n    enabled: !!patientId && patientId > 0,\n  });\n}\n\nexport function useCreatePaymentRecord() {\n  return useMutation({\n    mutationFn: async ({ \n      patientId, \n      amount, \n      paymentMethod, \n      appointmentId, \n      treatmentId, \n      notes \n    }: { \n      patientId: number;\n      amount: number;\n      paymentMethod: string;\n      appointmentId?: number;\n      treatmentId?: number;\n      notes?: string;\n    }) => {\n      const response = await fetch(`/api/patients/${patientId}/payments`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          amount, \n          paymentMethod, \n          appointmentId, \n          treatmentId, \n          notes \n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create payment record');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (_, { patientId }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId, 'payments'] });\n    },\n  });\n}","size_bytes":1309},"client/src/hooks/use-treatment-history.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function useTreatmentHistory(patientId: number) {\n  return useQuery({\n    queryKey: ['/api/patients', patientId, 'treatment-history'],\n    enabled: !!patientId && patientId > 0,\n  });\n}\n\nexport function useCreateTreatmentHistory() {\n  return useMutation({\n    mutationFn: async ({ \n      patientId, \n      treatmentType, \n      description, \n      toothNumbers, \n      duration, \n      cost, \n      notes \n    }: { \n      patientId: number;\n      treatmentType: string;\n      description: string;\n      toothNumbers?: string;\n      duration?: number;\n      cost?: number;\n      notes?: string;\n    }) => {\n      const response = await fetch(`/api/patients/${patientId}/treatment-history`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          treatmentType, \n          description, \n          toothNumbers, \n          duration, \n          cost, \n          notes \n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create treatment history');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (_, { patientId }) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patientId, 'treatment-history'] });\n    },\n  });\n}","size_bytes":1398},"client/src/lib/i18n.ts":{"content":"// i18n Configuration and Translation System\nimport { createContext, useContext } from 'react';\n\nexport interface Translations {\n  // Navigation\n  dashboard: string;\n  patients: string;\n  appointments: string;\n  medicalRecords: string;\n  filesDocuments: string;\n  settings: string;\n  \n  // Common\n  loading: string;\n  error: string;\n  success: string;\n  cancel: string;\n  save: string;\n  edit: string;\n  delete: string;\n  add: string;\n  search: string;\n  back: string;\n  \n  // Patient Details\n  patientInformation: string;\n  patientId: string;\n  fullName: string;\n  dateOfBirth: string;\n  gender: string;\n  phone: string;\n  email: string;\n  address: string;\n  status: string;\n  active: string;\n  \n  // Appointments\n  appointmentScheduled: string;\n  appointmentCompleted: string;\n  appointmentCancelled: string;\n  scheduleAppointment: string;\n  duration: string;\n  fee: string;\n  \n  // Treatment\n  treatmentHistory: string;\n  addTreatment: string;\n  treatmentType: string;\n  description: string;\n  toothNumbers: string;\n  cost: string;\n  notes: string;\n  treatmentNotes: string;\n  \n  // Financial\n  financialOverview: string;\n  totalPaid: string;\n  outstanding: string;\n  totalTreatments: string;\n  unpaidTreatments: string;\n  recordPayment: string;\n  recentPayments: string;\n  balanceDue: string;\n  \n  // Odontogram\n  odontogram: string;\n  adultTeeth: string;\n  primaryTeeth: string;\n  upperJaw: string;\n  lowerJaw: string;\n  maxilla: string;\n  mandible: string;\n  right: string;\n  left: string;\n  legend: string;\n  \n  // Tooth Conditions\n  healthy: string;\n  caries: string;\n  filled: string;\n  crown: string;\n  bridge: string;\n  implant: string;\n  extracted: string;\n  impacted: string;\n  fractured: string;\n  rootCanal: string;\n  veneer: string;\n  wisdomTooth: string;\n  missing: string;\n  needsTreatment: string;\n  \n  // Medical\n  medicalNotes: string;\n  addMedicalNote: string;\n  title: string;\n  content: string;\n  noteType: string;\n  \n  // Files\n  files: string;\n  uploadFiles: string;\n  chooseFiles: string;\n  dragAndDrop: string;\n  \n  // Quick Actions\n  quickActions: string;\n  addMedicalNote: string;\n  sendMessage: string;\n  \n  // Stats\n  quickStats: string;\n  totalAppointments: string;\n  completedTreatments: string;\n  filesUploaded: string;\n  lastVisit: string;\n  patientSince: string;\n  \n  // Treatment Types\n  dentalCleaning: string;\n  toothFilling: string;\n  rootCanalTreatment: string;\n  crownInstallation: string;\n  toothExtraction: string;\n  orthodonticTreatment: string;\n  dentalImplant: string;\n  teethWhitening: string;\n  periodontalTreatment: string;\n  emergencyTreatment: string;\n}\n\nconst englishTranslations: Translations = {\n  // Navigation\n  dashboard: \"Dashboard\",\n  patients: \"Patients\",\n  appointments: \"Appointments\", \n  medicalRecords: \"Medical Records\",\n  filesDocuments: \"Files & Documents\",\n  settings: \"Settings\",\n  \n  // Common\n  loading: \"Loading...\",\n  error: \"Error\",\n  success: \"Success\",\n  cancel: \"Cancel\",\n  save: \"Save\",\n  edit: \"Edit\",\n  delete: \"Delete\",\n  add: \"Add\",\n  search: \"Search\",\n  back: \"Back\",\n  \n  // Patient Details\n  patientInformation: \"Patient Information\",\n  patientId: \"Patient ID\",\n  fullName: \"Full Name\",\n  dateOfBirth: \"Date of Birth\",\n  gender: \"Gender\",\n  phone: \"Phone\",\n  email: \"Email\",\n  address: \"Address\",\n  status: \"Status\",\n  active: \"Active\",\n  \n  // Appointments\n  appointmentScheduled: \"Scheduled\",\n  appointmentCompleted: \"Completed\",\n  appointmentCancelled: \"Cancelled\",\n  scheduleAppointment: \"Schedule Appointment\",\n  duration: \"Duration\",\n  fee: \"Fee\",\n  \n  // Treatment\n  treatmentHistory: \"Treatment History\",\n  addTreatment: \"Add Treatment\",\n  treatmentType: \"Treatment Type\",\n  description: \"Description\",\n  toothNumbers: \"Tooth Numbers\",\n  cost: \"Cost\",\n  notes: \"Notes\",\n  treatmentNotes: \"Treatment Notes\",\n  \n  // Financial\n  financialOverview: \"Financial Overview\",\n  totalPaid: \"Total Paid\",\n  outstanding: \"Outstanding\",\n  totalTreatments: \"Total Treatments\",\n  unpaidTreatments: \"Unpaid Treatments\",\n  recordPayment: \"Record Payment\",\n  recentPayments: \"Recent Payments\",\n  balanceDue: \"Balance Due\",\n  \n  // Odontogram\n  odontogram: \"Odontogram\",\n  adultTeeth: \"Adult Teeth\",\n  primaryTeeth: \"Primary Teeth\",\n  upperJaw: \"Upper Jaw\",\n  lowerJaw: \"Lower Jaw\",\n  maxilla: \"Maxilla\",\n  mandible: \"Mandible\",\n  right: \"Right\",\n  left: \"Left\",\n  legend: \"Legend\",\n  \n  // Tooth Conditions\n  healthy: \"Healthy\",\n  caries: \"Caries\",\n  filled: \"Filled\",\n  crown: \"Crown\",\n  bridge: \"Bridge\",\n  implant: \"Implant\",\n  extracted: \"Extracted\",\n  impacted: \"Impacted\",\n  fractured: \"Fractured\",\n  rootCanal: \"Root Canal\",\n  veneer: \"Veneer\",\n  wisdomTooth: \"Wisdom Tooth\",\n  missing: \"Missing\",\n  needsTreatment: \"Needs Treatment\",\n  \n  // Medical\n  medicalNotes: \"Medical Notes\",\n  addMedicalNote: \"Add Medical Note\",\n  title: \"Title\",\n  content: \"Content\",\n  noteType: \"Note Type\",\n  \n  // Files\n  files: \"Files\",\n  uploadFiles: \"Upload Files\",\n  chooseFiles: \"Choose Files\",\n  dragAndDrop: \"Drag and drop files here, or click to browse\",\n  \n  // Quick Actions\n  quickActions: \"Quick Actions\",\n  sendMessage: \"Send Message\",\n  \n  // Stats\n  quickStats: \"Quick Stats\",\n  totalAppointments: \"Total Appointments\",\n  completedTreatments: \"Completed Treatments\",\n  filesUploaded: \"Files Uploaded\",\n  lastVisit: \"Last Visit\",\n  patientSince: \"Patient Since\",\n  \n  // Treatment Types\n  dentalCleaning: \"Dental Cleaning\",\n  toothFilling: \"Tooth Filling\",\n  rootCanalTreatment: \"Root Canal\",\n  crownInstallation: \"Crown Installation\",\n  toothExtraction: \"Tooth Extraction\",\n  orthodonticTreatment: \"Orthodontic Treatment\",\n  dentalImplant: \"Dental Implant\",\n  teethWhitening: \"Teeth Whitening\",\n  periodontalTreatment: \"Periodontal Treatment\",\n  emergencyTreatment: \"Emergency Treatment\",\n};\n\nconst serbianTranslations: Translations = {\n  // Navigation\n  dashboard: \"Kontrolna tabla\",\n  patients: \"Pacijenti\",\n  appointments: \"Zakazani termini\",\n  medicalRecords: \"Medicinski kartoni\",\n  filesDocuments: \"Fajlovi i dokumenti\",\n  settings: \"Podešavanja\",\n  \n  // Common\n  loading: \"Učitavanje...\",\n  error: \"Greška\",\n  success: \"Uspeh\",\n  cancel: \"Otkaži\",\n  save: \"Sačuvaj\",\n  edit: \"Uredi\",\n  delete: \"Obriši\",\n  add: \"Dodaj\",\n  search: \"Pretraži\",\n  back: \"Nazad\",\n  \n  // Patient Details\n  patientInformation: \"Informacije o pacijentu\",\n  patientId: \"ID pacijenta\",\n  fullName: \"Puno ime\",\n  dateOfBirth: \"Datum rođenja\",\n  gender: \"Pol\",\n  phone: \"Telefon\",\n  email: \"Email\",\n  address: \"Adresa\",\n  status: \"Status\",\n  active: \"Aktivan\",\n  \n  // Appointments\n  appointmentScheduled: \"Zakazano\",\n  appointmentCompleted: \"Završeno\",\n  appointmentCancelled: \"Otkazano\",\n  scheduleAppointment: \"Zakaži termin\",\n  duration: \"Trajanje\",\n  fee: \"Naknada\",\n  \n  // Treatment\n  treatmentHistory: \"Istorija lečenja\",\n  addTreatment: \"Dodaj tretman\",\n  treatmentType: \"Tip tretmana\",\n  description: \"Opis\",\n  toothNumbers: \"Brojevi zuba\",\n  cost: \"Cena\",\n  notes: \"Napomene\",\n  treatmentNotes: \"Napomene o tretmanu\",\n  \n  // Financial\n  financialOverview: \"Finansijski pregled\",\n  totalPaid: \"Ukupno plaćeno\",\n  outstanding: \"Dugovanje\",\n  totalTreatments: \"Ukupni tretmani\",\n  unpaidTreatments: \"Neplaćeni tretmani\",\n  recordPayment: \"Evidentiraj plaćanje\",\n  recentPayments: \"Nedavna plaćanja\",\n  balanceDue: \"Dugovanje\",\n  \n  // Odontogram\n  odontogram: \"Odontogram\",\n  adultTeeth: \"Stalni zubi\",\n  primaryTeeth: \"Mlečni zubi\",\n  upperJaw: \"Gornja vilica\",\n  lowerJaw: \"Donja vilica\",\n  maxilla: \"Maksila\",\n  mandible: \"Mandibula\",\n  right: \"Desno\",\n  left: \"Levo\",\n  legend: \"Legenda\",\n  \n  // Tooth Conditions\n  healthy: \"Zdrav\",\n  caries: \"Karijes\",\n  filled: \"Plombiran\",\n  crown: \"Krunica\",\n  bridge: \"Most\",\n  implant: \"Implantat\",\n  extracted: \"Izvađen\",\n  impacted: \"Impaktiran\",\n  fractured: \"Prelomljen\",\n  rootCanal: \"Endodoncija\",\n  veneer: \"Faseta\",\n  wisdomTooth: \"Umnjak\",\n  missing: \"Nedostaje\",\n  needsTreatment: \"Potrebno lečenje\",\n  \n  // Medical\n  medicalNotes: \"Medicinske napomene\",\n  addMedicalNote: \"Dodaj medicinsku napomenu\",\n  title: \"Naslov\",\n  content: \"Sadržaj\",\n  noteType: \"Tip napomene\",\n  \n  // Files\n  files: \"Fajlovi\",\n  uploadFiles: \"Otpremi fajlove\",\n  chooseFiles: \"Izaberi fajlove\",\n  dragAndDrop: \"Prevuci i spusti fajlove ovde, ili klikni za pretraživanje\",\n  \n  // Quick Actions\n  quickActions: \"Brze akcije\",\n  sendMessage: \"Pošalji poruku\",\n  \n  // Stats\n  quickStats: \"Brza statistika\",\n  totalAppointments: \"Ukupni termini\",\n  completedTreatments: \"Završeni tretmani\",\n  filesUploaded: \"Otpremljeni fajlovi\",\n  lastVisit: \"Poslednja poseta\",\n  patientSince: \"Pacijent od\",\n  \n  // Treatment Types\n  dentalCleaning: \"Čišćenje zuba\",\n  toothFilling: \"Plombiranje zuba\",\n  rootCanalTreatment: \"Endodoncija\",\n  crownInstallation: \"Postavljanje krunice\",\n  toothExtraction: \"Vađenje zuba\",\n  orthodonticTreatment: \"Ortodontski tretman\",\n  dentalImplant: \"Dentalni implantat\",\n  teethWhitening: \"Beljenje zuba\",\n  periodontalTreatment: \"Parodontalni tretman\",\n  emergencyTreatment: \"Hitni tretman\",\n};\n\nexport const translations = {\n  en: englishTranslations,\n  sr: serbianTranslations,\n};\n\nexport type Language = keyof typeof translations;\n\nexport const LanguageContext = createContext<{\n  language: Language;\n  setLanguage: (lang: Language) => void;\n  t: Translations;\n}>({\n  language: 'en',\n  setLanguage: () => {},\n  t: englishTranslations,\n});\n\nexport const useTranslation = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useTranslation must be used within a LanguageProvider');\n  }\n  return context;\n};","size_bytes":9599},"client/src/components/files/image-preview.tsx":{"content":"import { useState } from \"react\"\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { X, Download, RotateCw, ZoomIn, ZoomOut } from \"lucide-react\"\n\ninterface ImagePreviewProps {\n  file: {\n    id: number\n    fileName: string\n    filePath: string\n    fileSize: number\n    patientId: number\n    createdAt: Date\n  }\n  isOpen: boolean\n  onClose: () => void\n}\n\nexport function ImagePreview({ file, isOpen, onClose }: ImagePreviewProps) {\n  const [zoom, setZoom] = useState(100)\n  const [rotation, setRotation] = useState(0)\n\n  const isImage = /\\.(jpg|jpeg|png|gif|webp)$/i.test(file.fileName)\n  const isXray = file.fileName.toLowerCase().includes('xray') || file.fileName.toLowerCase().includes('x-ray')\n\n  const handleZoomIn = () => setZoom(prev => Math.min(prev + 25, 300))\n  const handleZoomOut = () => setZoom(prev => Math.max(prev - 25, 25))\n  const handleRotate = () => setRotation(prev => (prev + 90) % 360)\n\n  const formatFileSize = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl w-full max-h-[90vh] overflow-hidden\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <DialogTitle className=\"flex items-center gap-2\">\n                {file.fileName}\n                {isXray && (\n                  <Badge variant=\"outline\" className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n                    X-Ray\n                  </Badge>\n                )}\n              </DialogTitle>\n              <DialogDescription>\n                Size: {formatFileSize(file.fileSize)} • Created: {new Date(file.createdAt).toLocaleDateString()}\n              </DialogDescription>\n            </div>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"flex flex-col space-y-4\">\n          {/* Controls */}\n          {isImage && (\n            <div className=\"flex items-center justify-center space-x-2 border-b pb-4\">\n              <Button variant=\"outline\" size=\"sm\" onClick={handleZoomOut} disabled={zoom <= 25}>\n                <ZoomOut className=\"h-4 w-4\" />\n              </Button>\n              <span className=\"text-sm font-medium min-w-[60px] text-center\">{zoom}%</span>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleZoomIn} disabled={zoom >= 300}>\n                <ZoomIn className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={handleRotate}>\n                <RotateCw className=\"h-4 w-4\" />\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" onClick={() => {/* Handle download */}}>\n                <Download className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          )}\n\n          {/* Image Preview */}\n          <div className=\"flex items-center justify-center overflow-auto max-h-[60vh] bg-gray-50 dark:bg-gray-900 rounded-lg p-4\">\n            {isImage ? (\n              <img\n                src={file.filePath}\n                alt={file.fileName}\n                className={`max-w-full h-auto transition-transform ${isXray ? 'invert dark:invert-0' : ''}`}\n                style={{\n                  transform: `scale(${zoom / 100}) rotate(${rotation}deg)`,\n                  filter: isXray ? 'brightness(1.2) contrast(1.3)' : 'none'\n                }}\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement\n                  target.style.display = 'none'\n                  const parent = target.parentElement\n                  if (parent) {\n                    parent.innerHTML = `\n                      <div class=\"text-center p-8\">\n                        <div class=\"text-gray-400 mb-2\">\n                          <svg class=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\" />\n                          </svg>\n                        </div>\n                        <p class=\"text-sm text-gray-500\">Image preview not available</p>\n                      </div>\n                    `\n                  }\n                }}\n              />\n            ) : (\n              <div className=\"text-center p-8\">\n                <div className=\"text-gray-400 mb-4\">\n                  <svg className=\"mx-auto h-16 w-16\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n                  </svg>\n                </div>\n                <p className=\"text-sm text-gray-500 mb-2\">Preview not available for this file type</p>\n                <Button variant=\"outline\" size=\"sm\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download File\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* X-Ray specific information */}\n          {isXray && (\n            <div className=\"bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4\">\n              <h3 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">X-Ray Analysis</h3>\n              <ul className=\"text-sm text-blue-700 dark:text-blue-300 space-y-1\">\n                <li>• Enhanced contrast applied for better visibility</li>\n                <li>• Use zoom and rotation controls for detailed examination</li>\n                <li>• Consult with radiologist for professional interpretation</li>\n              </ul>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}","size_bytes":6407},"client/src/components/patients/medical-notes.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, FileText, Calendar, User } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useMedicalNotes, useCreateMedicalNote } from \"@/hooks/use-medical-notes\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"@/lib/i18n\";\n\ninterface MedicalNotesProps {\n  patientId: number;\n}\n\nexport function MedicalNotes({ patientId }: MedicalNotesProps) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [noteType, setNoteType] = useState(\"general\");\n\n  const { data: notes, isLoading } = useMedicalNotes(patientId);\n  const createNoteMutation = useCreateMedicalNote();\n  const { toast } = useToast();\n  const { t } = useTranslation();\n\n  const notesArray = Array.isArray(notes) ? notes : [];\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title.trim() || !content.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Title and content are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createNoteMutation.mutateAsync({\n        patientId,\n        title: title.trim(),\n        content: content.trim(),\n        noteType,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Medical note added successfully\",\n      });\n\n      // Reset form\n      setTitle(\"\");\n      setContent(\"\");\n      setNoteType(\"general\");\n      setDialogOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add medical note\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getNoteTypeColor = (type: string) => {\n    switch (type) {\n      case 'treatment': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';\n      case 'diagnosis': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';\n      case 'follow-up': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <FileText className=\"h-5 w-5 mr-2\" />\n            Medical Notes\n          </CardTitle>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Medical Note\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg\">\n              <DialogHeader>\n                <DialogTitle>Add Medical Note</DialogTitle>\n                <DialogDescription>\n                  Add a new medical note to the patient's record\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Note Type</label>\n                  <Select value={noteType} onValueChange={setNoteType}>\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general\">General</SelectItem>\n                      <SelectItem value=\"treatment\">Treatment</SelectItem>\n                      <SelectItem value=\"diagnosis\">Diagnosis</SelectItem>\n                      <SelectItem value=\"follow-up\">Follow-up</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Title</label>\n                  <Input\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    placeholder=\"Enter note title...\"\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Content</label>\n                  <Textarea\n                    value={content}\n                    onChange={(e) => setContent(e.target.value)}\n                    placeholder=\"Enter note content...\"\n                    rows={4}\n                    required\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createNoteMutation.isPending}>\n                    {createNoteMutation.isPending ? \"Adding...\" : \"Add Note\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-20 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        ) : notesArray.length > 0 ? (\n          <div className=\"space-y-4\">\n            {notesArray.map((note: any) => (\n              <div key={note.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">{note.title}</h3>\n                    <Badge className={getNoteTypeColor(note.noteType)}>\n                      {note.noteType}\n                    </Badge>\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {format(new Date(note.createdAt), 'MMM dd, yyyy HH:mm')}\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-3\">{note.content}</p>\n                <div className=\"flex items-center text-xs text-gray-500 dark:text-gray-400\">\n                  <User className=\"h-3 w-3 mr-1\" />\n                  <span>{note.createdBy}</span>\n                  <Calendar className=\"h-3 w-3 ml-4 mr-1\" />\n                  <span>{format(new Date(note.createdAt), 'MMM dd, yyyy')}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n            <FileText className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>No medical notes yet</p>\n            <p className=\"text-sm\">Click \"Add Note\" to create the first medical note</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7571},"client/src/components/patients/odontogram-iso.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { usePatientToothRecords, useCreateToothRecord, useUpdateToothRecord } from \"@/hooks/use-tooth-records\";\nimport { useCreateTreatmentHistory } from \"@/hooks/use-treatment-history\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { ToothRecord, InsertToothRecord } from \"@shared/schema\";\nimport { Loader2, Plus } from \"lucide-react\";\n\ninterface OdontogramISOProps {\n  patientId: number;\n  patientAge?: number;\n}\n\n// ISO 3950 (FDI) Tooth numbering system\nconst ADULT_TEETH_ISO = {\n  upper: {\n    right: [18, 17, 16, 15, 14, 13, 12, 11],\n    left: [21, 22, 23, 24, 25, 26, 27, 28]\n  },\n  lower: {\n    right: [48, 47, 46, 45, 44, 43, 42, 41],\n    left: [31, 32, 33, 34, 35, 36, 37, 38]\n  }\n};\n\nconst CHILDREN_TEETH_ISO = {\n  upper: {\n    right: [55, 54, 53, 52, 51],\n    left: [61, 62, 63, 64, 65]\n  },\n  lower: {\n    right: [85, 84, 83, 82, 81],\n    left: [71, 72, 73, 74, 75]\n  }\n};\n\nconst CONDITION_COLORS = {\n  healthy: \"#ffffff\",\n  caries: \"#ff4444\",\n  filled: \"#4444ff\", \n  crown: \"#ffaa00\",\n  bridge: \"#aa44ff\",\n  implant: \"#44aaff\",\n  extracted: \"#666666\",\n  impacted: \"#ff8800\",\n  fractured: \"#ff6666\",\n  root_canal: \"#8844ff\",\n  veneer: \"#44ff88\",\n  wisdom_tooth: \"#ffff44\",\n  missing: \"#cccccc\",\n  needs_treatment: \"#ff8844\",\n} as const;\n\nconst CONDITION_NAMES = {\n  healthy: \"Healthy\",\n  caries: \"Caries\",\n  filled: \"Filled\",\n  crown: \"Crown\",\n  bridge: \"Bridge\", \n  implant: \"Implant\",\n  extracted: \"Extracted\",\n  impacted: \"Impacted\",\n  fractured: \"Fractured\",\n  root_canal: \"Root Canal\",\n  veneer: \"Veneer\",\n  wisdom_tooth: \"Wisdom Tooth\",\n  missing: \"Missing\",\n  needs_treatment: \"Needs Treatment\",\n} as const;\n\ninterface ToothProps {\n  toothNumber: number;\n  record?: ToothRecord;\n  onUpdate: (toothNumber: number, record?: ToothRecord) => void;\n  isChild?: boolean;\n}\n\nfunction Tooth({ toothNumber, record, onUpdate, isChild = false }: ToothProps) {\n  const condition = record?.condition || \"healthy\";\n  const color = record?.color || CONDITION_COLORS[condition as keyof typeof CONDITION_COLORS];\n  \n  return (\n    <button\n      onClick={() => onUpdate(toothNumber, record)}\n      className={`relative border border-gray-300 rounded-t-lg hover:ring-2 hover:ring-blue-500 transition-all ${\n        isChild ? 'w-6 h-8' : 'w-8 h-10'\n      }`}\n      style={{ backgroundColor: color }}\n      title={`Tooth ${toothNumber}${record ? ` - ${CONDITION_NAMES[condition as keyof typeof CONDITION_NAMES]}` : \"\"}`}\n    >\n      <span className={`absolute inset-0 flex items-center justify-center font-medium text-gray-800 ${\n        isChild ? 'text-xs' : 'text-xs'\n      }`}>\n        {toothNumber}\n      </span>\n      {record && (\n        <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-blue-600 rounded-full\"></div>\n      )}\n    </button>\n  );\n}\n\ninterface ToothDialogProps {\n  toothNumber: number;\n  record?: ToothRecord;\n  patientId: number;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nfunction ToothDialog({ toothNumber, record, patientId, isOpen, onClose }: ToothDialogProps) {\n  const [condition, setCondition] = useState(record?.condition || \"healthy\");\n  const [surfaces, setSurfaces] = useState(record?.surfaces || \"\");\n  const [treatment, setTreatment] = useState(record?.treatment || \"\");\n  const [notes, setNotes] = useState(record?.notes || \"\");\n  \n  const { toast } = useToast();\n  const createMutation = useCreateToothRecord();\n  const updateMutation = useUpdateToothRecord();\n  const createTreatmentMutation = useCreateTreatmentHistory();\n  \n  const getTreatmentTypeFromCondition = (condition: string) => {\n    const treatmentMap: { [key: string]: string } = {\n      filled: \"Tooth Filling\",\n      crown: \"Crown Installation\", \n      root_canal: \"Root Canal\",\n      extracted: \"Tooth Extraction\",\n      implant: \"Dental Implant\",\n      veneer: \"Veneer Application\",\n      bridge: \"Bridge Installation\",\n      caries: \"Caries Treatment\",\n      fractured: \"Fracture Repair\",\n      impacted: \"Impacted Tooth Treatment\",\n      needs_treatment: \"Treatment Planning\",\n      healthy: \"Dental Cleaning\"\n    };\n    return treatmentMap[condition] || \"Dental Treatment\";\n  };\n  \n  const getEstimatedCost = (condition: string) => {\n    const costMap: { [key: string]: number } = {\n      filled: 8000, // €80.00\n      crown: 25000, // €250.00\n      root_canal: 30000, // €300.00\n      extracted: 12000, // €120.00\n      implant: 150000, // €1500.00\n      veneer: 40000, // €400.00\n      bridge: 80000, // €800.00\n      caries: 6000, // €60.00\n      fractured: 15000, // €150.00\n      impacted: 20000, // €200.00\n      needs_treatment: 5000, // €50.00\n      healthy: 4500 // €45.00\n    };\n    return costMap[condition] || 5000; // Default €50.00\n  };\n  \n  const handleSave = async () => {\n    try {\n      const data: InsertToothRecord = {\n        patientId,\n        toothNumber,\n        condition: condition as any,\n        surfaces: surfaces || undefined,\n        treatment: treatment || undefined,\n        notes: notes || undefined,\n        color: CONDITION_COLORS[condition as keyof typeof CONDITION_COLORS],\n        isCompleted: true,\n      };\n      \n      // Save tooth record\n      if (record) {\n        await updateMutation.mutateAsync({ id: record.id, data });\n      } else {\n        await createMutation.mutateAsync(data);\n      }\n      \n      // Create corresponding treatment history entry\n      const treatmentType = getTreatmentTypeFromCondition(condition);\n      const treatmentDescription = treatment || `${treatmentType} performed on tooth ${toothNumber}`;\n      const estimatedCost = getEstimatedCost(condition);\n      \n      await createTreatmentMutation.mutateAsync({\n        patientId,\n        treatmentType,\n        description: treatmentDescription + (surfaces ? ` (surfaces: ${surfaces})` : ''),\n        toothNumbers: toothNumber.toString(),\n        duration: 45, // Default 45 minutes\n        cost: estimatedCost,\n        notes: notes ? `Odontogram entry: ${notes}` : 'Added via odontogram',\n      });\n      \n      toast({\n        title: \"Success\",\n        description: `Tooth ${toothNumber} record ${record ? 'updated' : 'created'} and treatment history added`,\n      });\n      \n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${record ? 'update' : 'create'} tooth record or treatment history`,\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Tooth {toothNumber} (ISO 3950)</DialogTitle>\n          <DialogDescription>\n            Edit condition, treatment details, and notes for tooth {toothNumber}\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"condition\">Condition</Label>\n            <Select value={condition} onValueChange={setCondition}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(CONDITION_NAMES).map(([key, name]) => (\n                  <SelectItem key={key} value={key}>\n                    <div className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-4 h-4 rounded border\"\n                        style={{ backgroundColor: CONDITION_COLORS[key as keyof typeof CONDITION_COLORS] }}\n                      />\n                      {name}\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"surfaces\">Affected Surfaces (e.g., MO, DO, MOD)</Label>\n            <Input\n              id=\"surfaces\"\n              value={surfaces}\n              onChange={(e) => setSurfaces(e.target.value)}\n              placeholder=\"M, O, D, B, L, I\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"treatment\">Treatment</Label>\n            <Input\n              id=\"treatment\"\n              value={treatment}\n              onChange={(e) => setTreatment(e.target.value)}\n              placeholder=\"Description of treatment performed\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Additional notes about this tooth\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              onClick={handleSave}\n              disabled={createMutation.isPending || updateMutation.isPending}\n            >\n              {(createMutation.isPending || updateMutation.isPending) && (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              )}\n              {record ? \"Update\" : \"Create\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport function OdontogramISO({ patientId, patientAge }: OdontogramISOProps) {\n  const [selectedTooth, setSelectedTooth] = useState<{ number: number; record?: ToothRecord } | null>(null);\n  const [activeTab, setActiveTab] = useState(\"adult\");\n  \n  const { data: toothRecords, isLoading, error } = usePatientToothRecords(patientId);\n  \n  // Determine if we should show child teeth based on age\n  const isChild = patientAge && patientAge < 18;\n  const defaultTab = isChild ? \"child\" : \"adult\";\n  \n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Odontogram (ISO 3950)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-6 w-6 animate-spin\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Odontogram (ISO 3950)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-red-600\">Failed to load odontogram data</p>\n        </CardContent>\n      </Card>\n    );\n  }\n  \n  // Create a map of tooth records by tooth number\n  const toothRecordMap = new Map<number, ToothRecord>();\n  toothRecords?.forEach(record => {\n    toothRecordMap.set(record.toothNumber, record);\n  });\n  \n  const handleToothClick = (toothNumber: number, record?: ToothRecord) => {\n    setSelectedTooth({ number: toothNumber, record });\n  };\n\n  const renderTeethRow = (teeth: number[], isChild = false) => (\n    <div className=\"flex justify-center gap-1\">\n      {teeth.map(toothNumber => (\n        <Tooth\n          key={toothNumber}\n          toothNumber={toothNumber}\n          record={toothRecordMap.get(toothNumber)}\n          onUpdate={handleToothClick}\n          isChild={isChild}\n        />\n      ))}\n    </div>\n  );\n  \n  return (\n    <>\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            Odontogram\n            <div className=\"flex gap-2\">\n              <Badge variant=\"outline\">ISO 3950 (FDI)</Badge>\n              <Badge variant=\"secondary\">{toothRecords?.length || 0} Records</Badge>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeTab} onValueChange={setActiveTab} defaultValue={defaultTab}>\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"adult\">Adult Teeth</TabsTrigger>\n              <TabsTrigger value=\"child\">Primary Teeth</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"adult\" className=\"space-y-6 mt-6\">\n              {/* Adult Upper Jaw - FDI Layout */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-600 mb-4\">Upper Jaw (Maxilla)</h3>\n                <div className=\"flex justify-center items-center gap-2\">\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Right Upper</p>\n                    {renderTeethRow(ADULT_TEETH_ISO.upper.right)}\n                  </div>\n                  <div className=\"w-px h-12 bg-gray-300 mx-4\"></div>\n                  <div className=\"text-left\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Left Upper</p>\n                    {renderTeethRow(ADULT_TEETH_ISO.upper.left)}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Adult Lower Jaw - FDI Layout */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-600 mb-4\">Lower Jaw (Mandible)</h3>\n                <div className=\"flex justify-center items-center gap-2\">\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Right Lower</p>\n                    {renderTeethRow(ADULT_TEETH_ISO.lower.right)}\n                  </div>\n                  <div className=\"w-px h-12 bg-gray-300 mx-4\"></div>\n                  <div className=\"text-left\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Left Lower</p>\n                    {renderTeethRow(ADULT_TEETH_ISO.lower.left)}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"child\" className=\"space-y-6 mt-6\">\n              {/* Child Upper Jaw - FDI Layout */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-600 mb-4\">Upper Jaw (Maxilla)</h3>\n                <div className=\"flex justify-center items-center gap-2\">\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Right Upper</p>\n                    {renderTeethRow(CHILDREN_TEETH_ISO.upper.right, true)}\n                  </div>\n                  <div className=\"w-px h-10 bg-gray-300 mx-4\"></div>\n                  <div className=\"text-left\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Left Upper</p>\n                    {renderTeethRow(CHILDREN_TEETH_ISO.upper.left, true)}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Child Lower Jaw - FDI Layout */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-600 mb-4\">Lower Jaw (Mandible)</h3>\n                <div className=\"flex justify-center items-center gap-2\">\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Right Lower</p>\n                    {renderTeethRow(CHILDREN_TEETH_ISO.lower.right, true)}\n                  </div>\n                  <div className=\"w-px h-10 bg-gray-300 mx-4\"></div>\n                  <div className=\"text-left\">\n                    <p className=\"text-xs text-gray-400 mb-1\">Left Lower</p>\n                    {renderTeethRow(CHILDREN_TEETH_ISO.lower.left, true)}\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n          \n          {/* Legend */}\n          <div className=\"mt-6 pt-4 border-t\">\n            <h4 className=\"text-sm font-medium text-gray-600 mb-2\">Legend</h4>\n            <div className=\"grid grid-cols-3 gap-2 text-xs\">\n              {Object.entries(CONDITION_NAMES).map(([key, name]) => (\n                <div key={key} className=\"flex items-center gap-2\">\n                  <div \n                    className=\"w-3 h-3 rounded border border-gray-300\"\n                    style={{ backgroundColor: CONDITION_COLORS[key as keyof typeof CONDITION_COLORS] }}\n                  />\n                  <span>{name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {selectedTooth && (\n        <ToothDialog\n          toothNumber={selectedTooth.number}\n          record={selectedTooth.record}\n          patientId={patientId}\n          isOpen={!!selectedTooth}\n          onClose={() => setSelectedTooth(null)}\n        />\n      )}\n    </>\n  );\n}","size_bytes":16931},"client/src/components/patients/payment-record-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useCreatePaymentRecord } from \"@/hooks/use-payments\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PaymentRecordModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  patientId: number;\n}\n\nexport function PaymentRecordModal({ isOpen, onClose, patientId }: PaymentRecordModalProps) {\n  const [amount, setAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"cash\");\n  const [notes, setNotes] = useState(\"\");\n\n  const createPaymentMutation = useCreatePaymentRecord();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const amountFloat = parseFloat(amount);\n    if (!amountFloat || amountFloat <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createPaymentMutation.mutateAsync({\n        patientId,\n        amount: Math.round(amountFloat * 100), // Convert to cents\n        paymentMethod,\n        notes: notes.trim() || undefined,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Payment recorded successfully\",\n      });\n\n      // Reset form and close\n      setAmount(\"\");\n      setPaymentMethod(\"cash\");\n      setNotes(\"\");\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Record Payment</DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium\">Amount (€)</label>\n            <Input\n              type=\"number\"\n              step=\"0.01\"\n              value={amount}\n              onChange={(e) => setAmount(e.target.value)}\n              placeholder=\"0.00\"\n              min=\"0.01\"\n              required\n            />\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium\">Payment Method</label>\n            <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"cash\">Cash</SelectItem>\n                <SelectItem value=\"card\">Card</SelectItem>\n                <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                <SelectItem value=\"insurance\">Insurance</SelectItem>\n                <SelectItem value=\"check\">Check</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium\">Notes (Optional)</label>\n            <Textarea\n              value={notes}\n              onChange={(e) => setNotes(e.target.value)}\n              placeholder=\"Payment notes...\"\n              rows={3}\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={createPaymentMutation.isPending}>\n              {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":3927},"client/src/components/patients/treatment-history-panel.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Plus, Activity, Calendar, User, Clock, DollarSign } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { useTreatmentHistory, useCreateTreatmentHistory } from \"@/hooks/use-treatment-history\";\nimport { useCreateToothRecord } from \"@/hooks/use-tooth-records\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TreatmentHistoryPanelProps {\n  patientId: number;\n}\n\nexport function TreatmentHistoryPanel({ patientId }: TreatmentHistoryPanelProps) {\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [treatmentType, setTreatmentType] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [toothNumbers, setToothNumbers] = useState(\"\");\n  const [duration, setDuration] = useState(30);\n  const [cost, setCost] = useState(0);\n  const [notes, setNotes] = useState(\"\");\n\n  const { data: treatments, isLoading } = useTreatmentHistory(patientId);\n  const createTreatmentMutation = useCreateTreatmentHistory();\n  const createToothRecordMutation = useCreateToothRecord();\n  const { toast } = useToast();\n\n  // Function to create tooth records based on treatment\n  const createToothRecordsForTreatment = async (toothNumbers: string, treatmentType: string, description: string) => {\n    if (!toothNumbers.trim()) return;\n    \n    // Parse tooth numbers (supports formats like \"1,2,3\" or \"14-16\" or \"18 19 20\")\n    let teeth: number[] = [];\n    const parts = toothNumbers.replace(/[\\s,]+/g, ',').split(',');\n    \n    for (const part of parts) {\n      if (part.includes('-')) {\n        const [start, end] = part.split('-').map(n => parseInt(n.trim()));\n        if (start && end) {\n          for (let i = start; i <= end; i++) {\n            teeth.push(i);\n          }\n        }\n      } else {\n        const tooth = parseInt(part.trim());\n        if (tooth) teeth.push(tooth);\n      }\n    }\n    \n    // Create tooth records for each tooth\n    for (const toothNumber of teeth) {\n      try {\n        // Determine condition based on treatment type\n        let condition = \"healthy\";\n        if (treatmentType.toLowerCase().includes(\"filling\")) condition = \"filled\";\n        else if (treatmentType.toLowerCase().includes(\"crown\")) condition = \"crown\";\n        else if (treatmentType.toLowerCase().includes(\"root canal\")) condition = \"root_canal\";\n        else if (treatmentType.toLowerCase().includes(\"extraction\")) condition = \"extracted\";\n        else if (treatmentType.toLowerCase().includes(\"implant\")) condition = \"implant\";\n        else if (treatmentType.toLowerCase().includes(\"cleaning\")) condition = \"healthy\";\n        \n        await createToothRecordMutation.mutateAsync({\n          patientId,\n          toothNumber,\n          condition: condition as any,\n          treatment: `${treatmentType}: ${description}`,\n          notes: `Auto-created from treatment history`,\n          color: getColorForCondition(condition),\n          isCompleted: true,\n        });\n      } catch (error) {\n        console.warn(`Failed to create tooth record for tooth ${toothNumber}:`, error);\n      }\n    }\n  };\n  \n  const getColorForCondition = (condition: string) => {\n    const colors: { [key: string]: string } = {\n      healthy: \"#ffffff\",\n      filled: \"#4444ff\",\n      crown: \"#ffaa00\",\n      root_canal: \"#8844ff\",\n      extracted: \"#666666\",\n      implant: \"#44aaff\",\n    };\n    return colors[condition] || \"#ffffff\";\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!treatmentType.trim() || !description.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Treatment type and description are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createTreatmentMutation.mutateAsync({\n        patientId,\n        treatmentType: treatmentType.trim(),\n        description: description.trim(),\n        toothNumbers: toothNumbers.trim() || undefined,\n        duration,\n        cost,\n        notes: notes.trim() || undefined,\n      });\n\n      // Create tooth records if tooth numbers were specified\n      if (toothNumbers.trim()) {\n        await createToothRecordsForTreatment(toothNumbers.trim(), treatmentType.trim(), description.trim());\n      }\n\n      toast({\n        title: \"Success\",\n        description: \"Treatment history added successfully. Odontogram updated.\",\n      });\n\n      // Reset form\n      setTreatmentType(\"\");\n      setDescription(\"\");\n      setToothNumbers(\"\");\n      setDuration(30);\n      setCost(0);\n      setNotes(\"\");\n      setDialogOpen(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add treatment history\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const formatCurrency = (cents: number) => {\n    return `€${(cents / 100).toFixed(2)}`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';\n      case 'in_progress': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';\n      case 'planned': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <Activity className=\"h-5 w-5 mr-2\" />\n            Treatment History\n          </CardTitle>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Treatment\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-lg max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Add Treatment History</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">Treatment Type</label>\n                  <Select value={treatmentType} onValueChange={setTreatmentType}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select treatment type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"Dental Cleaning\">Dental Cleaning</SelectItem>\n                      <SelectItem value=\"Tooth Filling\">Tooth Filling</SelectItem>\n                      <SelectItem value=\"Root Canal\">Root Canal</SelectItem>\n                      <SelectItem value=\"Crown Installation\">Crown Installation</SelectItem>\n                      <SelectItem value=\"Tooth Extraction\">Tooth Extraction</SelectItem>\n                      <SelectItem value=\"Orthodontic Treatment\">Orthodontic Treatment</SelectItem>\n                      <SelectItem value=\"Dental Implant\">Dental Implant</SelectItem>\n                      <SelectItem value=\"Teeth Whitening\">Teeth Whitening</SelectItem>\n                      <SelectItem value=\"Periodontal Treatment\">Periodontal Treatment</SelectItem>\n                      <SelectItem value=\"Emergency Treatment\">Emergency Treatment</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Description</label>\n                  <Textarea\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    placeholder=\"Describe the treatment performed...\"\n                    rows={3}\n                    required\n                  />\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Tooth Numbers (Optional)</label>\n                  <Input\n                    value={toothNumbers}\n                    onChange={(e) => setToothNumbers(e.target.value)}\n                    placeholder=\"ISO 3950: e.g., 11,12,13 or 14-16 or 21 22\"\n                  />\n                  <p className=\"text-xs text-gray-500\">Use ISO 3950 (FDI) numbering. Will automatically update odontogram.</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Duration (minutes)</label>\n                    <Input\n                      type=\"number\"\n                      value={duration}\n                      onChange={(e) => setDuration(parseInt(e.target.value) || 30)}\n                      min=\"1\"\n                      max=\"480\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Cost (€)</label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={cost / 100}\n                      onChange={(e) => setCost(Math.round(parseFloat(e.target.value) * 100) || 0)}\n                      min=\"0\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Additional Notes (Optional)</label>\n                  <Textarea\n                    value={notes}\n                    onChange={(e) => setNotes(e.target.value)}\n                    placeholder=\"Any additional notes about the treatment...\"\n                    rows={2}\n                  />\n                </div>\n                <div className=\"flex justify-end space-x-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createTreatmentMutation.isPending}>\n                    {createTreatmentMutation.isPending ? \"Adding...\" : \"Add Treatment\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-24 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n              </div>\n            ))}\n          </div>\n        ) : treatments && Array.isArray(treatments) && treatments.length > 0 ? (\n          <div className=\"space-y-4\">\n            {treatments.map((treatment: any) => (\n              <div key={treatment.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h3 className=\"font-medium text-gray-900 dark:text-gray-100\">{treatment.treatmentType}</h3>\n                    <Badge className={getStatusColor(treatment.status)}>\n                      {treatment.status}\n                    </Badge>\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {format(new Date(treatment.performedAt), 'MMM dd, yyyy HH:mm')}\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-3\">{treatment.description}</p>\n                \n                {treatment.toothNumbers && (\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-2\">\n                    <strong>Teeth:</strong> {treatment.toothNumbers}\n                  </div>\n                )}\n                \n                {treatment.notes && (\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-3\">\n                    <strong>Notes:</strong> {treatment.notes}\n                  </div>\n                )}\n                \n                <div className=\"flex items-center justify-between text-xs text-gray-500 dark:text-gray-400\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"flex items-center\">\n                      <User className=\"h-3 w-3 mr-1\" />\n                      <span>{treatment.performedBy}</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      <span>{treatment.duration}min</span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <DollarSign className=\"h-3 w-3 mr-1\" />\n                    <span className=\"font-medium\">{formatCurrency(treatment.cost)}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n            <Activity className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>No treatment history yet</p>\n            <p className=\"text-sm\">Click \"Add Treatment\" to record the first treatment</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":13805},"client/src/components/ui/language-toggle.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Languages } from \"lucide-react\";\nimport { useTranslation, Language } from \"@/lib/i18n\";\n\nexport function LanguageToggle() {\n  const { language, setLanguage } = useTranslation();\n\n  const languages: { code: Language; name: string; flag: string }[] = [\n    { code: 'en', name: 'English', flag: '🇺🇸' },\n    { code: 'sr', name: 'Српски', flag: '🇷🇸' },\n  ];\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          <Languages className=\"h-4 w-4 mr-2\" />\n          {languages.find(lang => lang.code === language)?.flag}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        {languages.map((lang) => (\n          <DropdownMenuItem\n            key={lang.code}\n            onClick={() => setLanguage(lang.code)}\n            className={language === lang.code ? \"bg-accent\" : \"\"}\n          >\n            <span className=\"mr-2\">{lang.flag}</span>\n            {lang.name}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}","size_bytes":1268},"client/src/components/ui/mode-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\nimport { useTheme } from \"@/components/theme-provider\"\n\nexport function ModeToggle() {\n  const { setTheme } = useTheme()\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"icon\" className=\"relative\">\n          <Sun className=\"h-4 w-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n          <Moon className=\"absolute h-4 w-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        <DropdownMenuItem onClick={() => setTheme(\"light\")}>\n          Light\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"dark\")}>\n          Dark\n        </DropdownMenuItem>\n        <DropdownMenuItem onClick={() => setTheme(\"system\")}>\n          System\n        </DropdownMenuItem>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}","size_bytes":1198},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working  \n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fixed odontogram numbering to FDI system (18-11|21-28, 48-41|31-38)\n[x] 5. Translated all interventions to English\n[x] 6. Fixed DialogDescription accessibility warning in medical notes\n[x] 7. Updated documentation and completed migration","size_bytes":405},"client/src/components/patients/financial-record-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Label } from \"@/components/ui/label\";\nimport { useCreatePaymentRecord } from \"@/hooks/use-payments\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CreditCard, DollarSign } from \"lucide-react\";\n\ninterface FinancialRecordModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  patientId: number;\n}\n\nexport function FinancialRecordModal({ isOpen, onClose, patientId }: FinancialRecordModalProps) {\n  const [activeTab, setActiveTab] = useState(\"payment\");\n  \n  // Payment fields\n  const [paymentAmount, setPaymentAmount] = useState(\"\");\n  const [paymentMethod, setPaymentMethod] = useState(\"cash\");\n  const [paymentNotes, setPaymentNotes] = useState(\"\");\n  \n  // Outstanding balance fields\n  const [outstandingAmount, setOutstandingAmount] = useState(\"\");\n  const [outstandingReason, setOutstandingReason] = useState(\"treatment\");\n  const [outstandingDescription, setOutstandingDescription] = useState(\"\");\n  const [dueDate, setDueDate] = useState(\"\");\n\n  const createPaymentMutation = useCreatePaymentRecord();\n  const { toast } = useToast();\n\n  const handlePaymentSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const amountFloat = parseFloat(paymentAmount);\n    if (!amountFloat || amountFloat <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid payment amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createPaymentMutation.mutateAsync({\n        patientId,\n        amount: Math.round(amountFloat * 100), // Convert to cents\n        paymentMethod,\n        notes: paymentNotes.trim() || undefined,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Payment recorded successfully\",\n      });\n\n      resetForms();\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record payment\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleOutstandingSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const amountFloat = parseFloat(outstandingAmount);\n    if (!amountFloat || amountFloat <= 0) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid outstanding amount\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      // Record as negative payment to represent outstanding balance\n      await createPaymentMutation.mutateAsync({\n        patientId,\n        amount: Math.round(-amountFloat * 100), // Negative amount for outstanding\n        paymentMethod: \"outstanding\",\n        notes: `Outstanding Balance - ${outstandingReason}: ${outstandingDescription}${dueDate ? ` (Due: ${dueDate})` : ''}`,\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Outstanding balance recorded successfully\",\n      });\n\n      resetForms();\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to record outstanding balance\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForms = () => {\n    setPaymentAmount(\"\");\n    setPaymentMethod(\"cash\");\n    setPaymentNotes(\"\");\n    setOutstandingAmount(\"\");\n    setOutstandingReason(\"treatment\");\n    setOutstandingDescription(\"\");\n    setDueDate(\"\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Financial Record</DialogTitle>\n          <DialogDescription>\n            Record payments or outstanding balances for this patient\n          </DialogDescription>\n        </DialogHeader>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab}>\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"payment\" className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              Payment\n            </TabsTrigger>\n            <TabsTrigger value=\"outstanding\" className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-4 w-4\" />\n              Outstanding\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"payment\" className=\"space-y-4 mt-4\">\n            <form onSubmit={handlePaymentSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"payment-amount\">Amount (€)</Label>\n                <Input\n                  id=\"payment-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={paymentAmount}\n                  onChange={(e) => setPaymentAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                  min=\"0.01\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"payment-method\">Payment Method</Label>\n                <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"cash\">Cash</SelectItem>\n                    <SelectItem value=\"card\">Card</SelectItem>\n                    <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                    <SelectItem value=\"insurance\">Insurance</SelectItem>\n                    <SelectItem value=\"installment\">Installment</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"payment-notes\">Notes (optional)</Label>\n                <Textarea\n                  id=\"payment-notes\"\n                  value={paymentNotes}\n                  onChange={(e) => setPaymentNotes(e.target.value)}\n                  placeholder=\"Payment details or reference...\"\n                  rows={2}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createPaymentMutation.isPending}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                >\n                  {createPaymentMutation.isPending ? \"Recording...\" : \"Record Payment\"}\n                </Button>\n              </div>\n            </form>\n          </TabsContent>\n\n          <TabsContent value=\"outstanding\" className=\"space-y-4 mt-4\">\n            <form onSubmit={handleOutstandingSubmit} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"outstanding-amount\">Outstanding Amount (€)</Label>\n                <Input\n                  id=\"outstanding-amount\"\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={outstandingAmount}\n                  onChange={(e) => setOutstandingAmount(e.target.value)}\n                  placeholder=\"0.00\"\n                  min=\"0.01\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"outstanding-reason\">Reason</Label>\n                <Select value={outstandingReason} onValueChange={setOutstandingReason}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"treatment\">Treatment Cost</SelectItem>\n                    <SelectItem value=\"consultation\">Consultation Fee</SelectItem>\n                    <SelectItem value=\"lab_work\">Lab Work</SelectItem>\n                    <SelectItem value=\"materials\">Materials</SelectItem>\n                    <SelectItem value=\"installment_due\">Installment Due</SelectItem>\n                    <SelectItem value=\"insurance_pending\">Insurance Pending</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"outstanding-description\">Description</Label>\n                <Textarea\n                  id=\"outstanding-description\"\n                  value={outstandingDescription}\n                  onChange={(e) => setOutstandingDescription(e.target.value)}\n                  placeholder=\"Describe the outstanding balance...\"\n                  rows={2}\n                  required\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"due-date\">Due Date (optional)</Label>\n                <Input\n                  id=\"due-date\"\n                  type=\"date\"\n                  value={dueDate}\n                  onChange={(e) => setDueDate(e.target.value)}\n                />\n              </div>\n              \n              <div className=\"flex justify-end space-x-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createPaymentMutation.isPending}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  {createPaymentMutation.isPending ? \"Recording...\" : \"Record Outstanding\"}\n                </Button>\n              </div>\n            </form>\n          </TabsContent>\n        </Tabs>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9927},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"shared/setmore-types.ts":{"content":"// Setmore API types and interfaces\n\nexport interface SetmoreConfig {\n  refreshToken: string;\n  accessToken?: string;\n  baseUrl: string;\n}\n\nexport interface SetmoreTokenResponse {\n  response: boolean;\n  data: {\n    token: {\n      access_token: string;\n      token_type: string;\n      expires_in: number;\n      user_id: string;\n    };\n  };\n}\n\nexport interface SetmoreService {\n  key: string;\n  service_name: string;\n  staff_keys: string[];\n  duration: number;\n  buffer_duration?: number;\n  cost: number;\n  currency: string;\n  image_url?: string;\n  description?: string;\n}\n\nexport interface SetmoreStaff {\n  key: string;\n  first_name: string;\n  last_name: string;\n  email_id: string;\n  country_code: string;\n  work_phone: string;\n  image_url: string;\n  comment: string;\n}\n\nexport interface SetmoreCustomer {\n  key: string;\n  first_name: string;\n  last_name: string;\n  email_id: string;\n  country_code: string;\n  cell_phone: string;\n  work_phone?: string;\n  home_phone?: string;\n  address?: string;\n  city?: string;\n  state?: string;\n  postal_code?: string;\n  country?: string;\n  comment?: string;\n}\n\nexport interface SetmoreTimeSlot {\n  slot_time: string;\n  slot_date_time: string;\n  is_available: boolean;\n}\n\nexport interface SetmoreAppointment {\n  key?: string;\n  start_time: string;\n  end_time: string;\n  staff_key: string;\n  service_key: string;\n  customer_key: string;\n  label?: string;\n  comment?: string;\n  cost?: number;\n  currency?: string;\n}\n\nexport interface SetmoreSlotsRequest {\n  staff_key: string;\n  service_key: string;\n  selected_date: string; // DD/MM/YYYY format\n  off_hours?: boolean;\n  double_booking?: boolean;\n  slot_limit?: number;\n  timezone?: string;\n}\n\nexport interface SetmoreAppointmentRequest {\n  staff_key: string;\n  service_key: string;\n  customer_key: string;\n  start_time: string; // ISO datetime string\n  end_time: string;   // ISO datetime string\n  label?: string;\n  comment?: string;\n}\n\nexport interface SetmoreApiResponse<T> {\n  response: boolean;\n  msg?: string;\n  data: T;\n}\n\n// Mock data types for development\nexport interface MockSetmoreData {\n  services: SetmoreService[];\n  staff: SetmoreStaff[];\n  customers: SetmoreCustomer[];\n  appointments: SetmoreAppointment[];\n}","size_bytes":2210},"server/services/setmore-service.ts":{"content":"import {\n  SetmoreConfig,\n  SetmoreService,\n  SetmoreStaff,\n  SetmoreCustomer,\n  SetmoreTimeSlot,\n  SetmoreAppointment,\n  SetmoreSlotsRequest,\n  SetmoreAppointmentRequest,\n  SetmoreApiResponse,\n  MockSetmoreData\n} from \"../../shared/setmore-types\";\n\nexport class SetmoreApiService {\n  private config: SetmoreConfig;\n  private mockData: MockSetmoreData;\n\n  constructor(config: SetmoreConfig) {\n    this.config = config;\n    this.mockData = this.initializeMockData();\n  }\n\n  private initializeMockData(): MockSetmoreData {\n    return {\n      services: [\n        {\n          key: \"dental-cleaning\",\n          service_name: \"Dental Cleaning\",\n          staff_keys: [\"dr-smith\", \"dr-jones\"],\n          duration: 30,\n          cost: 8000, // €80.00 in cents\n          currency: \"EUR\",\n          description: \"Professional dental cleaning and oral hygiene\"\n        },\n        {\n          key: \"dental-checkup\",\n          service_name: \"Dental Checkup\",\n          staff_keys: [\"dr-smith\", \"dr-jones\"],\n          duration: 20,\n          cost: 5000, // €50.00 in cents\n          currency: \"EUR\",\n          description: \"Routine dental examination and assessment\"\n        },\n        {\n          key: \"tooth-filling\",\n          service_name: \"Tooth Filling\",\n          staff_keys: [\"dr-smith\"],\n          duration: 60,\n          buffer_duration: 15,\n          cost: 15000, // €150.00 in cents\n          currency: \"EUR\",\n          description: \"Dental cavity filling treatment\"\n        },\n        {\n          key: \"root-canal\",\n          service_name: \"Root Canal Treatment\",\n          staff_keys: [\"dr-smith\"],\n          duration: 90,\n          buffer_duration: 30,\n          cost: 35000, // €350.00 in cents\n          currency: \"EUR\",\n          description: \"Endodontic root canal therapy\"\n        },\n        {\n          key: \"crown-installation\",\n          service_name: \"Crown Installation\",\n          staff_keys: [\"dr-smith\", \"dr-jones\"],\n          duration: 45,\n          buffer_duration: 15,\n          cost: 50000, // €500.00 in cents\n          currency: \"EUR\",\n          description: \"Dental crown placement and fitting\"\n        },\n        {\n          key: \"teeth-whitening\",\n          service_name: \"Teeth Whitening\",\n          staff_keys: [\"dr-jones\", \"hyg-maria\"],\n          duration: 40,\n          cost: 20000, // €200.00 in cents\n          currency: \"EUR\",\n          description: \"Professional teeth whitening treatment\"\n        }\n      ],\n      staff: [\n        {\n          key: \"dr-smith\",\n          first_name: \"Dr. John\",\n          last_name: \"Smith\",\n          email_id: \"dr.smith@dentalcare.com\",\n          country_code: \"+381\",\n          work_phone: \"123456789\",\n          image_url: \"\",\n          comment: \"Lead dentist with 15+ years experience\"\n        },\n        {\n          key: \"dr-jones\",\n          first_name: \"Dr. Sarah\",\n          last_name: \"Jones\",\n          email_id: \"dr.jones@dentalcare.com\",\n          country_code: \"+381\",\n          work_phone: \"123456788\",\n          image_url: \"\",\n          comment: \"Specialist in cosmetic dentistry\"\n        },\n        {\n          key: \"hyg-maria\",\n          first_name: \"Maria\",\n          last_name: \"Rodriguez\",\n          email_id: \"maria@dentalcare.com\",\n          country_code: \"+381\",\n          work_phone: \"123456787\",\n          image_url: \"\",\n          comment: \"Certified dental hygienist\"\n        }\n      ],\n      customers: [],\n      appointments: []\n    };\n  }\n\n  // Token management (mocked for development)\n  async getAccessToken(): Promise<string> {\n    // In production, this would make a real API call to refresh the access token\n    // For development, return a mock token\n    return \"mock_access_token_\" + Date.now();\n  }\n\n  // Services\n  async getAllServices(): Promise<SetmoreApiResponse<{ services: SetmoreService[] }>> {\n    // For development - return mock data immediately\n    // In production, uncomment the API call below and remove this mock return\n    \n    // PRODUCTION CODE (commented for development):\n    // const token = await this.getAccessToken();\n    // const response = await fetch(`${this.config.baseUrl}/bookingapi/services`, {\n    //   headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }\n    // });\n    // return response.json();\n    \n    // DEVELOPMENT - Using mock data\n    return {\n      response: true,\n      data: {\n        services: this.mockData.services\n      }\n    };\n  }\n\n  async getServicesByCategory(categoryKey: string): Promise<SetmoreApiResponse<{ services: SetmoreService[] }>> {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // For now, return all services (can be enhanced with actual category filtering)\n    return {\n      response: true,\n      data: {\n        services: this.mockData.services\n      }\n    };\n  }\n\n  // Staff\n  async getAllStaff(): Promise<SetmoreApiResponse<{ staffs: SetmoreStaff[] }>> {\n    // For development - return mock data immediately\n    // In production, uncomment the API call below and remove this mock return\n    \n    // PRODUCTION CODE (commented for development):\n    // const token = await this.getAccessToken();\n    // const response = await fetch(`${this.config.baseUrl}/bookingapi/staffs`, {\n    //   headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }\n    // });\n    // return response.json();\n    \n    // DEVELOPMENT - Using mock data\n    return {\n      response: true,\n      data: {\n        staffs: this.mockData.staff\n      }\n    };\n  }\n\n  // Time slots\n  async getAvailableSlots(request: SetmoreSlotsRequest): Promise<SetmoreApiResponse<{ slots: SetmoreTimeSlot[] }>> {\n    // For development - return mock data immediately\n    // In production, uncomment the API call below and remove this mock return\n    \n    // PRODUCTION CODE (commented for development):\n    // const token = await this.getAccessToken();\n    // const response = await fetch(`${this.config.baseUrl}/bookingapi/slots`, {\n    //   method: 'POST',\n    //   headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },\n    //   body: JSON.stringify(request)\n    // });\n    // return response.json();\n    \n    // DEVELOPMENT - Generate mock time slots\n    const slots: SetmoreTimeSlot[] = [];\n    const startHour = 9; // 9 AM\n    const endHour = 17;  // 5 PM\n    const slotDuration = 30; // 30 minutes\n    \n    for (let hour = startHour; hour < endHour; hour++) {\n      for (let minute = 0; minute < 60; minute += slotDuration) {\n        const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n        const dateTimeString = `${request.selected_date} ${timeString}`;\n        \n        // Randomly make some slots unavailable (simulating real scheduling)\n        const isAvailable = Math.random() > 0.3;\n        \n        slots.push({\n          slot_time: timeString,\n          slot_date_time: dateTimeString,\n          is_available: isAvailable\n        });\n      }\n    }\n    \n    return {\n      response: true,\n      data: {\n        slots: slots.filter(slot => slot.is_available).slice(0, request.slot_limit || 20)\n      }\n    };\n  }\n\n  // Customers\n  async createCustomer(customer: Partial<SetmoreCustomer>): Promise<SetmoreApiResponse<{ customer: SetmoreCustomer }>> {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    const newCustomer: SetmoreCustomer = {\n      key: `customer_${Date.now()}`,\n      first_name: customer.first_name || \"\",\n      last_name: customer.last_name || \"\",\n      email_id: customer.email_id || \"\",\n      country_code: customer.country_code || \"+381\",\n      cell_phone: customer.cell_phone || \"\",\n      work_phone: customer.work_phone,\n      home_phone: customer.home_phone,\n      address: customer.address,\n      city: customer.city,\n      state: customer.state,\n      postal_code: customer.postal_code,\n      country: customer.country,\n      comment: customer.comment\n    };\n    \n    this.mockData.customers.push(newCustomer);\n    \n    return {\n      response: true,\n      msg: \"Customer created successfully\",\n      data: {\n        customer: newCustomer\n      }\n    };\n  }\n\n  async getCustomer(customerKey: string): Promise<SetmoreApiResponse<{ customer: SetmoreCustomer }>> {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    const customer = this.mockData.customers.find(c => c.key === customerKey);\n    \n    if (!customer) {\n      return {\n        response: false,\n        msg: \"Customer not found\",\n        data: { customer: {} as SetmoreCustomer }\n      };\n    }\n    \n    return {\n      response: true,\n      data: {\n        customer\n      }\n    };\n  }\n\n  // Appointments\n  async createAppointment(request: SetmoreAppointmentRequest): Promise<SetmoreApiResponse<{ appointment: SetmoreAppointment }>> {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    const service = this.mockData.services.find(s => s.key === request.service_key);\n    const newAppointment: SetmoreAppointment = {\n      key: `appointment_${Date.now()}`,\n      start_time: request.start_time,\n      end_time: request.end_time,\n      staff_key: request.staff_key,\n      service_key: request.service_key,\n      customer_key: request.customer_key,\n      label: request.label,\n      comment: request.comment,\n      cost: service?.cost || 0,\n      currency: service?.currency || \"EUR\"\n    };\n    \n    this.mockData.appointments.push(newAppointment);\n    \n    return {\n      response: true,\n      msg: \"Appointment created successfully\",\n      data: {\n        appointment: newAppointment\n      }\n    };\n  }\n\n  async getAppointmentsByDateRange(startDate: string, endDate: string): Promise<SetmoreApiResponse<{ appointments: SetmoreAppointment[] }>> {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // For mock data, return all appointments (can be filtered by date in real implementation)\n    return {\n      response: true,\n      data: {\n        appointments: this.mockData.appointments\n      }\n    };\n  }\n\n  // Helper method to get service by key\n  getServiceByKey(serviceKey: string): SetmoreService | undefined {\n    return this.mockData.services.find(s => s.key === serviceKey);\n  }\n\n  // Helper method to get staff by key\n  getStaffByKey(staffKey: string): SetmoreStaff | undefined {\n    return this.mockData.staff.find(s => s.key === staffKey);\n  }\n}\n\n// Create a singleton instance for the application\nlet setmoreService: SetmoreApiService | null = null;\n\nexport function getSetmoreService(): SetmoreApiService {\n  if (!setmoreService) {\n    const config: SetmoreConfig = {\n      refreshToken: process.env.SETMORE_REFRESH_TOKEN || \"mock_refresh_token\",\n      baseUrl: \"https://developer.setmore.com/api/v1\"\n    };\n    setmoreService = new SetmoreApiService(config);\n  }\n  return setmoreService;\n}","size_bytes":10765},"client/src/hooks/use-setmore.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { SetmoreService, SetmoreStaff, SetmoreTimeSlot, SetmoreSlotsRequest } from \"@shared/setmore-types\";\n\nexport function useSetmoreServices() {\n  return useQuery<{ response: boolean; data: { services: SetmoreService[] } }>({\n    queryKey: ['/api/setmore/services'],\n    queryFn: async () => {\n      const response = await fetch('/api/setmore/services');\n      if (!response.ok) throw new Error('Failed to fetch services');\n      return response.json();\n    },\n  });\n}\n\nexport function useSetmoreStaff() {\n  return useQuery<{ response: boolean; data: { staffs: SetmoreStaff[] } }>({\n    queryKey: ['/api/setmore/staff'],\n    queryFn: async () => {\n      const response = await fetch('/api/setmore/staff');\n      if (!response.ok) throw new Error('Failed to fetch staff');\n      return response.json();\n    },\n  });\n}\n\nexport function useSetmoreSlots() {\n  return useMutation<\n    { response: boolean; data: { slots: SetmoreTimeSlot[] } },\n    Error,\n    SetmoreSlotsRequest\n  >({\n    mutationFn: async (request: SetmoreSlotsRequest) => {\n      const response = await fetch('/api/setmore/slots', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(request),\n      });\n      if (!response.ok) throw new Error('Failed to fetch slots');\n      return response.json();\n    },\n  });\n}\n\nexport function useCreateSetmoreAppointment() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (appointment: any) => apiRequest('/api/appointments/setmore', 'POST', appointment),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/appointments/today'] });\n    },\n  });\n}","size_bytes":1874},"client/src/components/appointments/appointment-booking-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Calendar, Clock, User, Stethoscope } from \"lucide-react\";\nimport { useSetmoreServices, useSetmoreStaff, useSetmoreSlots, useCreateSetmoreAppointment } from \"@/hooks/use-setmore\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format, addMinutes, parse } from \"date-fns\";\n\ninterface AppointmentBookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  patientId?: number;\n  patientName?: string;\n  preselectedDate?: string;\n}\n\nexport function AppointmentBookingModal({ \n  isOpen, \n  onClose, \n  patientId, \n  patientName, \n  preselectedDate \n}: AppointmentBookingModalProps) {\n  const [selectedPatient, setSelectedPatient] = useState<number>(patientId || 0);\n  const [selectedService, setSelectedService] = useState<string>(\"\");\n  const [selectedStaff, setSelectedStaff] = useState<string>(\"\");\n  const [selectedDate, setSelectedDate] = useState<string>(preselectedDate || \"\");\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>(\"\");\n  const [description, setDescription] = useState<string>(\"\");\n  const [availableSlots, setAvailableSlots] = useState<any[]>([]);\n\n  const { data: servicesData } = useSetmoreServices();\n  const { data: staffData } = useSetmoreStaff();\n  const { data: patientsData } = usePatients();\n  const getSlotsMutation = useSetmoreSlots();\n  const createAppointmentMutation = useCreateSetmoreAppointment();\n  const { toast } = useToast();\n\n  const services = servicesData?.data?.services || [];\n  const staff = staffData?.data?.staffs || [];\n  const patients = patientsData?.items || [];\n\n  // Get available slots when service, staff, and date are selected\n  useEffect(() => {\n    if (selectedService && selectedStaff && selectedDate) {\n      const formattedDate = format(new Date(selectedDate), \"dd/MM/yyyy\");\n      getSlotsMutation.mutate({\n        staff_key: selectedStaff,\n        service_key: selectedService,\n        selected_date: formattedDate,\n        slot_limit: 20\n      }, {\n        onSuccess: (response) => {\n          setAvailableSlots(response.data.slots || []);\n          setSelectedTimeSlot(\"\"); // Reset selected time slot\n        },\n        onError: () => {\n          toast({\n            title: \"Error\",\n            description: \"Failed to fetch available time slots\",\n            variant: \"destructive\"\n          });\n        }\n      });\n    }\n  }, [selectedService, selectedStaff, selectedDate]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedPatient || !selectedService || !selectedStaff || !selectedDate || !selectedTimeSlot) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    const selectedServiceData = services.find(s => s.key === selectedService);\n    const selectedStaffData = staff.find(s => s.key === selectedStaff);\n\n    if (!selectedServiceData || !selectedStaffData) {\n      toast({\n        title: \"Error\",\n        description: \"Invalid service or staff selection\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    // Parse the selected date and time\n    const appointmentDateTime = new Date(`${selectedDate}T${selectedTimeSlot}`);\n    const endDateTime = addMinutes(appointmentDateTime, selectedServiceData.duration);\n\n    try {\n      await createAppointmentMutation.mutateAsync({\n        patientId: selectedPatient,\n        appointmentDate: appointmentDateTime.toISOString(),\n        duration: selectedServiceData.duration,\n        description: description.trim() || undefined,\n        serviceKey: selectedService,\n        serviceName: selectedServiceData.service_name,\n        staffKey: selectedStaff,\n        staffName: `${selectedStaffData.first_name} ${selectedStaffData.last_name}`,\n        cost: selectedServiceData.cost,\n        currency: selectedServiceData.currency,\n        status: \"scheduled\"\n      });\n\n      toast({\n        title: \"Success\",\n        description: \"Appointment booked successfully\",\n      });\n\n      // Reset form and close\n      setSelectedPatient(patientId || 0);\n      setSelectedService(\"\");\n      setSelectedStaff(\"\");\n      setSelectedDate(preselectedDate || \"\");\n      setSelectedTimeSlot(\"\");\n      setDescription(\"\");\n      setAvailableSlots([]);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to book appointment\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const selectedServiceData = services.find(s => s.key === selectedService);\n  const selectedStaffData = staff.find(s => s.key === selectedStaff);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Book Appointment</DialogTitle>\n          <DialogDescription>\n            {patientName ? `Schedule a new appointment for ${patientName}` : \"Schedule a new appointment\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          {/* Patient Selection - only show if no patient is pre-selected */}\n          {!patientId && (\n            <div>\n              <Label htmlFor=\"patient\">Patient *</Label>\n              <Select value={selectedPatient.toString()} onValueChange={(value) => setSelectedPatient(parseInt(value))}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a patient\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {patients.map((patient) => (\n                    <SelectItem key={patient.id} value={patient.id.toString()}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        <span>{patient.firstName} {patient.lastName}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n\n          {/* Service Selection */}\n          <div>\n            <Label htmlFor=\"service\">Service *</Label>\n            <Select value={selectedService} onValueChange={setSelectedService}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a service\" />\n              </SelectTrigger>\n              <SelectContent>\n                {services.map((service) => (\n                  <SelectItem key={service.key} value={service.key}>\n                    <div className=\"flex items-center justify-between w-full\">\n                      <span>{service.service_name}</span>\n                      <div className=\"flex items-center gap-2 ml-4\">\n                        <Badge variant=\"outline\">{service.duration}min</Badge>\n                        <Badge variant=\"secondary\">€{(service.cost / 100).toFixed(2)}</Badge>\n                      </div>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {selectedServiceData && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {selectedServiceData.description}\n              </p>\n            )}\n          </div>\n\n          {/* Staff Selection */}\n          <div>\n            <Label htmlFor=\"staff\">Healthcare Provider *</Label>\n            <Select value={selectedStaff} onValueChange={setSelectedStaff}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select healthcare provider\" />\n              </SelectTrigger>\n              <SelectContent>\n                {staff\n                  .filter(member => \n                    !selectedService || \n                    services.find(s => s.key === selectedService)?.staff_keys.includes(member.key)\n                  )\n                  .map((member) => (\n                    <SelectItem key={member.key} value={member.key}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4\" />\n                        <span>{member.first_name} {member.last_name}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n              </SelectContent>\n            </Select>\n            {selectedStaffData && selectedStaffData.comment && (\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {selectedStaffData.comment}\n              </p>\n            )}\n          </div>\n\n          {/* Date Selection */}\n          <div>\n            <Label htmlFor=\"date\">Date *</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              min={format(new Date(), \"yyyy-MM-dd\")}\n              required\n            />\n          </div>\n\n          {/* Time Slot Selection */}\n          {selectedService && selectedStaff && selectedDate && (\n            <div>\n              <Label>Available Time Slots *</Label>\n              {getSlotsMutation.isPending ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <Loader2 className=\"h-6 w-6 animate-spin\" />\n                  <span className=\"ml-2\">Loading available slots...</span>\n                </div>\n              ) : availableSlots.length > 0 ? (\n                <div className=\"grid grid-cols-3 gap-2 mt-2\">\n                  {availableSlots.map((slot) => (\n                    <Button\n                      key={slot.slot_time}\n                      type=\"button\"\n                      variant={selectedTimeSlot === slot.slot_time ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setSelectedTimeSlot(slot.slot_time)}\n                      className=\"justify-start\"\n                    >\n                      <Clock className=\"h-4 w-4 mr-2\" />\n                      {slot.slot_time}\n                    </Button>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground py-4 text-center\">\n                  No available slots for the selected date\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Notes (optional)</Label>\n            <Textarea\n              id=\"description\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n              placeholder=\"Additional notes for the appointment...\"\n              rows={3}\n            />\n          </div>\n\n          {/* Appointment Summary */}\n          {selectedServiceData && selectedStaffData && selectedDate && selectedTimeSlot && (\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <h4 className=\"font-medium mb-2\">Appointment Summary</h4>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex items-center gap-2\">\n                  <Stethoscope className=\"h-4 w-4\" />\n                  <span>{selectedServiceData.service_name}</span>\n                  <Badge variant=\"outline\">{selectedServiceData.duration} min</Badge>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <User className=\"h-4 w-4\" />\n                  <span>{selectedStaffData.first_name} {selectedStaffData.last_name}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-4 w-4\" />\n                  <span>{format(new Date(selectedDate), \"EEEE, MMMM d, yyyy\")}</span>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span>{selectedTimeSlot}</span>\n                </div>\n                <div className=\"flex items-center justify-between pt-2 border-t\">\n                  <span className=\"font-medium\">Total Cost:</span>\n                  <Badge variant=\"secondary\">€{(selectedServiceData.cost / 100).toFixed(2)}</Badge>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={createAppointmentMutation.isPending}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              {createAppointmentMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Booking...\n                </>\n              ) : (\n                \"Book Appointment\"\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13451},"client/src/components/appointments/appointment-calendar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ChevronLeft, ChevronRight, Calendar, Clock, User, Plus } from \"lucide-react\";\nimport { useAppointments } from \"@/hooks/use-appointments\";\nimport { usePatients } from \"@/hooks/use-patients\";\nimport { AppointmentBookingModal } from \"./appointment-booking-modal\";\nimport { format, startOfMonth, endOfMonth, eachDayOfInterval, isSameMonth, isSameDay, addMonths, subMonths, isToday } from \"date-fns\";\n\nexport function AppointmentCalendar() {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\n  const [bookingModalOpen, setBookingModalOpen] = useState(false);\n  \n  // Get current month's date range\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  \n  // Fetch appointments for the current month\n  const { data: appointmentsData } = useAppointments({\n    // We could add date range filtering here\n  });\n  const { data: patientsData } = usePatients();\n  \n  const appointments = appointmentsData?.items || [];\n  const patients = patientsData?.items || [];\n  \n  // Create patient lookup map\n  const patientMap = new Map();\n  patients.forEach(patient => {\n    patientMap.set(patient.id, `${patient.firstName} ${patient.lastName}`);\n  });\n  \n  // Generate calendar days\n  const calendarDays = eachDayOfInterval({\n    start: monthStart,\n    end: monthEnd\n  });\n  \n  // Get appointments for a specific date\n  const getAppointmentsForDate = (date: Date) => {\n    return appointments.filter(appointment => \n      isSameDay(new Date(appointment.appointmentDate), date)\n    );\n  };\n  \n  const handleDateClick = (date: Date) => {\n    setSelectedDate(date);\n  };\n  \n  const handleNewAppointment = () => {\n    setBookingModalOpen(true);\n  };\n  \n  const navigateMonth = (direction: 'prev' | 'next') => {\n    setCurrentDate(prev => \n      direction === 'prev' ? subMonths(prev, 1) : addMonths(prev, 1)\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Calendar Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigateMonth('prev')}\n              >\n                <ChevronLeft className=\"h-4 w-4\" />\n              </Button>\n              <CardTitle className=\"text-xl\">\n                {format(currentDate, 'MMMM yyyy')}\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => navigateMonth('next')}\n              >\n                <ChevronRight className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <Button onClick={handleNewAppointment} className=\"bg-blue-600 hover:bg-blue-700\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Appointment\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {/* Calendar Grid */}\n          <div className=\"grid grid-cols-7 gap-1 mb-4\">\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (\n              <div key={day} className=\"p-3 text-center text-sm font-medium text-muted-foreground\">\n                {day}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"grid grid-cols-7 gap-1\">\n            {calendarDays.map(date => {\n              const dayAppointments = getAppointmentsForDate(date);\n              const isCurrentMonth = isSameMonth(date, currentDate);\n              const isSelected = selectedDate && isSameDay(date, selectedDate);\n              const isCurrentDay = isToday(date);\n              \n              return (\n                <div\n                  key={date.toISOString()}\n                  className={`\n                    min-h-[100px] p-2 border border-border rounded-lg cursor-pointer transition-colors\n                    ${isCurrentMonth ? 'bg-background hover:bg-muted' : 'bg-muted/50 text-muted-foreground'}\n                    ${isSelected ? 'ring-2 ring-blue-500' : ''}\n                    ${isCurrentDay ? 'bg-blue-50 border-blue-200' : ''}\n                  `}\n                  onClick={() => handleDateClick(date)}\n                >\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <span className={`text-sm font-medium ${isCurrentDay ? 'text-blue-600' : ''}`}>\n                      {format(date, 'd')}\n                    </span>\n                    {dayAppointments.length > 0 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {dayAppointments.length}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  {/* Appointment indicators */}\n                  <div className=\"space-y-1\">\n                    {dayAppointments.slice(0, 3).map(appointment => (\n                      <div\n                        key={appointment.id}\n                        className=\"text-xs p-1 rounded bg-blue-100 text-blue-800 truncate\"\n                        title={`${format(new Date(appointment.appointmentDate), 'HH:mm')} - ${patientMap.get(appointment.patientId)}`}\n                      >\n                        <div className=\"flex items-center gap-1\">\n                          <Clock className=\"h-3 w-3\" />\n                          <span>{format(new Date(appointment.appointmentDate), 'HH:mm')}</span>\n                        </div>\n                        <div className=\"truncate\">\n                          {patientMap.get(appointment.patientId)}\n                        </div>\n                      </div>\n                    ))}\n                    {dayAppointments.length > 3 && (\n                      <div className=\"text-xs text-muted-foreground text-center\">\n                        +{dayAppointments.length - 3} more\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Selected Date Details */}\n      {selectedDate && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              {format(selectedDate, 'EEEE, MMMM d, yyyy')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {getAppointmentsForDate(selectedDate).length > 0 ? (\n              <div className=\"space-y-3\">\n                {getAppointmentsForDate(selectedDate).map(appointment => (\n                  <div\n                    key={appointment.id}\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                      <div>\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"font-medium\">\n                            {format(new Date(appointment.appointmentDate), 'HH:mm')}\n                          </span>\n                          <Badge variant=\"outline\">\n                            {appointment.duration}min\n                          </Badge>\n                        </div>\n                        <div className=\"flex items-center gap-2 mt-1\">\n                          <User className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-muted-foreground\">\n                            {patientMap.get(appointment.patientId)}\n                          </span>\n                        </div>\n                        {appointment.serviceName && (\n                          <div className=\"text-sm text-muted-foreground mt-1\">\n                            Service: {appointment.serviceName}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                    <Badge \n                      variant={\n                        appointment.status === 'completed' ? 'default' : \n                        appointment.status === 'cancelled' ? 'destructive' : \n                        'secondary'\n                      }\n                    >\n                      {appointment.status}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Calendar className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                <p className=\"text-muted-foreground\">No appointments scheduled for this date</p>\n                <Button \n                  variant=\"outline\" \n                  className=\"mt-4\"\n                  onClick={handleNewAppointment}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Schedule Appointment\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n      \n      {/* Appointment Booking Modal */}\n      <AppointmentBookingModal\n        isOpen={bookingModalOpen}\n        onClose={() => setBookingModalOpen(false)}\n        preselectedDate={selectedDate ? format(selectedDate, 'yyyy-MM-dd') : undefined}\n      />\n    </div>\n  );\n}","size_bytes":9714},"client/src/components/settings/employee-management.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogDescription \n} from \"@/components/ui/dialog\";\nimport { \n  Select, \n  SelectContent, \n  SelectItem, \n  SelectTrigger, \n  SelectValue \n} from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Users, \n  UserPlus, \n  Edit, \n  Trash2, \n  Mail, \n  Phone, \n  Calendar,\n  Shield,\n  Search,\n  Filter\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport type { Role, Employee, InsertEmployee } from \"@shared/schema\";\n\nexport function EmployeeManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<\"all\" | \"active\" | \"inactive\">(\"all\");\n  const [departmentFilter, setDepartmentFilter] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch employees\n  const { data: employees = [], isLoading: isLoadingEmployees } = useQuery<Employee[]>({\n    queryKey: ['/api/employees'],\n  });\n\n  // Fetch roles\n  const { data: roles = [], isLoading: isLoadingRoles } = useQuery<Role[]>({\n    queryKey: ['/api/roles'],\n  });\n\n  // Create employee mutation\n  const createEmployeeMutation = useMutation({\n    mutationFn: async (data: InsertEmployee) => {\n      const response = await fetch('/api/employees', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create employee');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Employee Added\",\n        description: \"Employee has been successfully added to the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add employee. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update employee mutation\n  const updateEmployeeMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<InsertEmployee> }) => {\n      const response = await fetch(`/api/employees/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update employee');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      setIsEditDialogOpen(false);\n      setSelectedEmployee(null);\n      toast({\n        title: \"Employee Updated\",\n        description: \"Employee information has been successfully updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update employee. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete employee mutation\n  const deleteEmployeeMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/employees/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete employee');\n      return response.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/employees'] });\n      toast({\n        title: \"Employee Deleted\",\n        description: \"Employee has been successfully removed from the system.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete employee. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddEmployee = (data: InsertEmployee) => {\n    createEmployeeMutation.mutate(data);\n  };\n\n  const handleEditEmployee = (employee: Employee) => {\n    setSelectedEmployee(employee);\n    setIsEditDialogOpen(true);\n  };\n\n  const handleUpdateEmployee = (data: Partial<InsertEmployee>) => {\n    if (selectedEmployee) {\n      updateEmployeeMutation.mutate({ id: selectedEmployee.id, data });\n    }\n  };\n\n  const handleDeleteEmployee = (id: number) => {\n    if (confirm(\"Are you sure you want to delete this employee?\")) {\n      deleteEmployeeMutation.mutate(id);\n    }\n  };\n\n  const handleToggleStatus = (employee: Employee) => {\n    updateEmployeeMutation.mutate({\n      id: employee.id,\n      data: { isActive: !employee.isActive }\n    });\n  };\n\n  // Get role name by ID\n  const getRoleName = (roleId: number) => {\n    const role = roles.find(r => r.id === roleId);\n    return role?.name || \"Unknown Role\";\n  };\n\n  // Filter employees\n  const filteredEmployees = employees.filter(employee => {\n    const matchesSearch = employee.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         employee.email.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"active\" && employee.isActive) ||\n                         (statusFilter === \"inactive\" && !employee.isActive);\n    \n    const matchesDepartment = departmentFilter === \"all\" || employee.department === departmentFilter;\n    \n    return matchesSearch && matchesStatus && matchesDepartment;\n  });\n\n  // Get unique departments\n  const departments = Array.from(new Set(employees.map(emp => emp.department))).filter(Boolean);\n\n  // Statistics\n  const stats = {\n    total: employees.length,\n    active: employees.filter(emp => emp.isActive).length,\n    inactive: employees.filter(emp => !emp.isActive).length,\n    roles: roles.length,\n  };\n\n  if (isLoadingEmployees || isLoadingRoles) {\n    return <div className=\"p-6\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Users className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h2 className=\"text-2xl font-semibold text-gray-900\">Employee Management</h2>\n            <p className=\"text-gray-500\">Manage clinic staff and their roles</p>\n          </div>\n        </div>\n        <Button onClick={() => setIsAddDialogOpen(true)} className=\"bg-blue-600 hover:bg-blue-700\">\n          <UserPlus className=\"h-4 w-4 mr-2\" />\n          Add Employee\n        </Button>\n      </div>\n\n      {/* Statistics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Employees</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{stats.total}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Active</p>\n                <p className=\"text-2xl font-bold text-green-600\">{stats.active}</p>\n              </div>\n              <div className=\"h-8 w-8 rounded-full bg-green-100 flex items-center justify-center\">\n                <div className=\"h-3 w-3 bg-green-600 rounded-full\"></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Inactive</p>\n                <p className=\"text-2xl font-bold text-red-600\">{stats.inactive}</p>\n              </div>\n              <div className=\"h-8 w-8 rounded-full bg-red-100 flex items-center justify-center\">\n                <div className=\"h-3 w-3 bg-red-600 rounded-full\"></div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Roles</p>\n                <p className=\"text-2xl font-bold text-purple-600\">{stats.roles}</p>\n              </div>\n              <Shield className=\"h-8 w-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                <Input\n                  placeholder=\"Search employees...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n            </div>\n            \n            <Select value={statusFilter} onValueChange={(value: \"all\" | \"active\" | \"inactive\") => setStatusFilter(value)}>\n              <SelectTrigger className=\"w-full md:w-40\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"active\">Active</SelectItem>\n                <SelectItem value=\"inactive\">Inactive</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n              <SelectTrigger className=\"w-full md:w-40\">\n                <SelectValue placeholder=\"Department\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Departments</SelectItem>\n                {departments.map(dept => (\n                  <SelectItem key={dept} value={dept || \"\"}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Employee List */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {filteredEmployees.map((employee) => (\n          <Card key={employee.id} className=\"hover:shadow-md transition-shadow\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={employee.profileImageUrl || undefined} />\n                    <AvatarFallback>\n                      {employee.firstName[0]}{employee.lastName[0]}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <CardTitle className=\"text-lg\">\n                      {employee.firstName} {employee.lastName}\n                    </CardTitle>\n                    <p className=\"text-sm text-gray-600\">{employee.position}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleEditEmployee(employee)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleDeleteEmployee(employee.id)}\n                    className=\"text-red-600\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge variant={employee.isActive ? \"default\" : \"secondary\"}>\n                    {employee.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                  <Switch\n                    checked={employee.isActive ?? false}\n                    onCheckedChange={() => handleToggleStatus(employee)}\n                  />\n                </div>\n                \n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex items-center text-gray-600\">\n                    <Mail className=\"h-4 w-4 mr-2\" />\n                    {employee.email}\n                  </div>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Phone className=\"h-4 w-4 mr-2\" />\n                    {employee.phone}\n                  </div>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    {getRoleName(employee.roleId || 1)}\n                  </div>\n                  <div className=\"flex items-center text-gray-600\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Joined {new Date(employee.startDate || Date.now()).toLocaleDateString()}\n                  </div>\n                </div>\n                \n                {employee.notes && (\n                  <p className=\"text-xs text-gray-500 border-t pt-2\">\n                    {employee.notes}\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {filteredEmployees.length === 0 && (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Users className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No employees found</h3>\n            <p className=\"text-gray-600\">\n              {searchTerm ? \"Try adjusting your search criteria\" : \"Get started by adding your first employee\"}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add Employee Dialog */}\n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Add New Employee</DialogTitle>\n            <DialogDescription>\n              Enter the employee information below to add them to the system.\n            </DialogDescription>\n          </DialogHeader>\n          <EmployeeForm\n            roles={roles}\n            onSubmit={handleAddEmployee}\n            isLoading={createEmployeeMutation.isPending}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Employee Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Edit Employee</DialogTitle>\n            <DialogDescription>\n              Update the employee information below.\n            </DialogDescription>\n          </DialogHeader>\n          {selectedEmployee && (\n            <EmployeeForm\n              initialData={selectedEmployee}\n              roles={roles}\n              onSubmit={handleUpdateEmployee}\n              isLoading={updateEmployeeMutation.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface EmployeeFormProps {\n  initialData?: Employee;\n  roles: Role[];\n  onSubmit: (data: InsertEmployee) => void;\n  isLoading: boolean;\n}\n\nfunction EmployeeForm({ initialData, roles, onSubmit, isLoading }: EmployeeFormProps) {\n  const [formData, setFormData] = useState({\n    firstName: initialData?.firstName || \"\",\n    lastName: initialData?.lastName || \"\",\n    email: initialData?.email || \"\",\n    phone: initialData?.phone || \"\",\n    position: initialData?.position || \"\",\n    department: initialData?.department || \"\",\n    roleId: initialData?.roleId || 1,\n    isActive: initialData?.isActive ?? true,\n    startDate: initialData?.startDate || new Date().toISOString().split('T')[0],\n    notes: initialData?.notes || \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Ensure all required fields are present for InsertEmployee\n    const employeeData: InsertEmployee = {\n      firstName: formData.firstName,\n      lastName: formData.lastName,\n      email: formData.email,\n      phone: formData.phone || null,\n      position: formData.position || null,\n      department: formData.department || null,\n      roleId: formData.roleId,\n      isActive: formData.isActive,\n      startDate: formData.startDate,\n      notes: formData.notes || null,\n      profileImageUrl: null,\n    };\n    onSubmit(employeeData);\n  };\n\n  const handleChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"firstName\">First Name</Label>\n          <Input\n            id=\"firstName\"\n            value={formData.firstName}\n            onChange={(e) => handleChange('firstName', e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"lastName\">Last Name</Label>\n          <Input\n            id=\"lastName\"\n            value={formData.lastName}\n            onChange={(e) => handleChange('lastName', e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"email\">Email</Label>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            value={formData.email}\n            onChange={(e) => handleChange('email', e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"phone\">Phone</Label>\n          <Input\n            id=\"phone\"\n            value={formData.phone}\n            onChange={(e) => handleChange('phone', e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"position\">Position</Label>\n          <Input\n            id=\"position\"\n            value={formData.position}\n            onChange={(e) => handleChange('position', e.target.value)}\n            required\n          />\n        </div>\n        <div>\n          <Label htmlFor=\"department\">Department</Label>\n          <Input\n            id=\"department\"\n            value={formData.department}\n            onChange={(e) => handleChange('department', e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <Label htmlFor=\"role\">Role</Label>\n          <Select\n            value={formData.roleId.toString()}\n            onValueChange={(value) => handleChange('roleId', parseInt(value))}\n          >\n            <SelectTrigger>\n              <SelectValue placeholder=\"Select role\" />\n            </SelectTrigger>\n            <SelectContent>\n              {roles.map(role => (\n                <SelectItem key={role.id} value={role.id.toString()}>\n                  {role.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div>\n          <Label htmlFor=\"startDate\">Start Date</Label>\n          <Input\n            id=\"startDate\"\n            type=\"date\"\n            value={formData.startDate}\n            onChange={(e) => handleChange('startDate', e.target.value)}\n            required\n          />\n        </div>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <Switch\n          id=\"isActive\"\n          checked={formData.isActive}\n          onCheckedChange={(checked) => handleChange('isActive', checked)}\n        />\n        <Label htmlFor=\"isActive\">Active Employee</Label>\n      </div>\n\n      <div>\n        <Label htmlFor=\"notes\">Notes (Optional)</Label>\n        <Textarea\n          id=\"notes\"\n          value={formData.notes}\n          onChange={(e) => handleChange('notes', e.target.value)}\n          placeholder=\"Additional notes about the employee...\"\n          rows={3}\n        />\n      </div>\n\n      <div className=\"flex justify-end space-x-2 pt-4\">\n        <Button type=\"button\" variant=\"outline\" disabled={isLoading}>\n          Cancel\n        </Button>\n        <Button type=\"submit\" disabled={isLoading}>\n          {isLoading ? \"Saving...\" : initialData ? \"Update Employee\" : \"Add Employee\"}\n        </Button>\n      </div>\n    </form>\n  );\n}","size_bytes":21499},"client/src/pages/appointments/appointments-new.tsx":{"content":"import { Layout } from \"@/components/layout/layout\";\nimport { AppointmentCalendar } from \"@/components/appointments/appointment-calendar\";\nimport { AppointmentList } from \"@/components/appointments/appointment-list\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function AppointmentsPage() {\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Appointments</h1>\n          <p className=\"text-muted-foreground\">\n            Manage and schedule patient appointments\n          </p>\n        </div>\n        \n        <Tabs defaultValue=\"calendar\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full max-w-md grid-cols-2\">\n            <TabsTrigger value=\"calendar\">Calendar View</TabsTrigger>\n            <TabsTrigger value=\"list\">List View</TabsTrigger>\n          </TabsList>\n          \n          <TabsContent value=\"calendar\" className=\"space-y-6\">\n            <AppointmentCalendar />\n          </TabsContent>\n          \n          <TabsContent value=\"list\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <AppointmentList />\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </Layout>\n  );\n}","size_bytes":1300},"client/src/pages/appointments/services.tsx":{"content":"import { Layout } from \"@/components/layout/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Clock, Euro, Users, Stethoscope } from \"lucide-react\";\nimport { useSetmoreServices, useSetmoreStaff } from \"@/hooks/use-setmore\";\n\nexport default function ServicesPage() {\n  const { data: servicesData, isLoading: servicesLoading } = useSetmoreServices();\n  const { data: staffData, isLoading: staffLoading } = useSetmoreStaff();\n\n  const services = servicesData?.data?.services || [];\n  const staff = staffData?.data?.staffs || [];\n\n  // Create a map of staff keys to names for display\n  const staffMap = new Map();\n  staff.forEach(member => {\n    staffMap.set(member.key, `${member.first_name} ${member.last_name}`);\n  });\n\n  if (servicesLoading || staffLoading) {\n    return (\n      <Layout>\n        <div className=\"space-y-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Services</h1>\n            <p className=\"text-muted-foreground\">\n              Manage dental services and treatment options\n            </p>\n          </div>\n          \n          <div className=\"grid gap-6\">\n            {[1, 2, 3, 4].map((i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-4 bg-gray-200 rounded w-full mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-1/2\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    );\n  }\n\n  return (\n    <Layout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Services</h1>\n            <p className=\"text-muted-foreground\">\n              Dental services available for appointment booking\n            </p>\n          </div>\n          <Badge variant=\"secondary\">\n            {services.length} Services Available\n          </Badge>\n        </div>\n\n        <div className=\"grid gap-6\">\n          {services.map((service) => (\n            <Card key={service.key} className=\"hover:shadow-md transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Stethoscope className=\"h-5 w-5\" />\n                    {service.service_name}\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      {service.duration} min\n                    </Badge>\n                    {service.buffer_duration && (\n                      <Badge variant=\"outline\">\n                        +{service.buffer_duration} buffer\n                      </Badge>\n                    )}\n                    <Badge variant=\"secondary\">\n                      <Euro className=\"h-3 w-3 mr-1\" />\n                      {(service.cost / 100).toFixed(2)}\n                    </Badge>\n                  </div>\n                </div>\n                {service.description && (\n                  <p className=\"text-muted-foreground text-sm\">\n                    {service.description}\n                  </p>\n                )}\n              </CardHeader>\n              \n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Available Staff */}\n                  <div>\n                    <h4 className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                      <Users className=\"h-4 w-4\" />\n                      Available Providers\n                    </h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {service.staff_keys.map((staffKey) => (\n                        <Badge key={staffKey} variant=\"outline\">\n                          {staffMap.get(staffKey) || staffKey}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Service Details */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-4 border-t\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-muted-foreground\">Duration</p>\n                      <p className=\"text-lg font-semibold\">{service.duration} min</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-muted-foreground\">Cost</p>\n                      <p className=\"text-lg font-semibold\">€{(service.cost / 100).toFixed(2)}</p>\n                    </div>\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-muted-foreground\">Providers</p>\n                      <p className=\"text-lg font-semibold\">{service.staff_keys.length}</p>\n                    </div>\n                  </div>\n\n                  {/* Action Button */}\n                  <div className=\"pt-4\">\n                    <Button variant=\"outline\" className=\"w-full\">\n                      Book This Service\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {services.length === 0 && !servicesLoading && (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <Stethoscope className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium mb-2\">No Services Available</h3>\n              <p className=\"text-muted-foreground\">\n                Services will appear here when they are configured in Setmore\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Staff Overview */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Healthcare Team\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {staff.map((member) => (\n                <div key={member.key} className=\"flex items-center gap-3 p-3 rounded-lg border\">\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                    <Users className=\"h-5 w-5 text-blue-600\" />\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium\">{member.first_name} {member.last_name}</h4>\n                    {member.comment && (\n                      <p className=\"text-sm text-muted-foreground\">{member.comment}</p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </Layout>\n  );\n}","size_bytes":7254},"client/src/pages/settings/settings-old.tsx":{"content":"import { useState } from \"react\";\nimport { Layout } from \"@/components/layout/layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Settings, DollarSign, Users, Shield, Eye, EyeOff, UserCog } from \"lucide-react\";\nimport { EmployeeManagement } from \"@/components/settings/employee-management\";\n\nexport default function SettingsPage() {\n  const [showRevenue, setShowRevenue] = useState(true);\n  const [isAdmin, setIsAdmin] = useState(true); // Mock admin status\n  const { toast } = useToast();\n\n  const handleSaveSettings = () => {\n    // Mock save settings\n    toast({\n      title: \"Settings Saved\",\n      description: \"Your preferences have been updated successfully.\",\n    });\n  };\n\n  return (\n    <Layout>\n      <div className=\"p-6 space-y-6 max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center space-x-4\">\n          <Settings className=\"h-8 w-8 text-blue-600\" />\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900\">Settings</h1>\n            <p className=\"text-gray-500\">Manage your clinic management preferences</p>\n          </div>\n        </div>\n\n        {/* User Role Badge */}\n        <div className=\"flex items-center space-x-2\">\n          <Badge className={`px-3 py-1 ${isAdmin ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'}`}>\n            <Shield className=\"h-3 w-3 mr-1\" />\n            {isAdmin ? 'Administrator' : 'Staff Member'}\n          </Badge>\n        </div>\n\n        <Separator />\n\n        {/* Revenue Display Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              <span>Financial Information</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-1\">\n                <Label className=\"text-base font-medium\">Show Revenue Data</Label>\n                <p className=\"text-sm text-gray-500\">\n                  Control who can view financial information including patient payments and clinic revenue\n                </p>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                {showRevenue ? (\n                  <Eye className=\"h-4 w-4 text-green-500\" />\n                ) : (\n                  <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                )}\n                <Switch\n                  checked={showRevenue}\n                  onCheckedChange={setShowRevenue}\n                  disabled={!isAdmin}\n                />\n              </div>\n            </div>\n\n            {!isAdmin && (\n              <div className=\"p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n                <p className=\"text-sm text-amber-800\">\n                  <Shield className=\"h-4 w-4 inline mr-2\" />\n                  Administrator privileges required to modify financial settings\n                </p>\n              </div>\n            )}\n\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900\">Revenue Visibility Options</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-3 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Dashboard Statistics</span>\n                    <Switch checked={showRevenue} disabled={!isAdmin} />\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Show monthly revenue on main dashboard</p>\n                </div>\n                \n                <div className=\"p-3 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Patient Financial Details</span>\n                    <Switch checked={showRevenue} disabled={!isAdmin} />\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Show payment history and outstanding balances</p>\n                </div>\n                \n                <div className=\"p-3 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Appointment Fees</span>\n                    <Switch checked={showRevenue} disabled={!isAdmin} />\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Display treatment costs in appointment history</p>\n                </div>\n                \n                <div className=\"p-3 border rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <span className=\"text-sm font-medium\">Financial Reports</span>\n                    <Switch checked={showRevenue} disabled={!isAdmin} />\n                  </div>\n                  <p className=\"text-xs text-gray-500\">Access to revenue reports and analytics</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* User Management Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Users className=\"h-5 w-5\" />\n              <span>User Access Control</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">User Role</Label>\n                <Input \n                  id=\"role\" \n                  value={isAdmin ? \"Administrator\" : \"Staff Member\"} \n                  disabled\n                  className=\"bg-gray-50\"\n                />\n                <p className=\"text-xs text-gray-500\">Contact system administrator to change user roles</p>\n              </div>\n              \n              <div className=\"space-y-2\">\n                <Label htmlFor=\"permissions\">Permission Level</Label>\n                <Input \n                  id=\"permissions\" \n                  value={isAdmin ? \"Full Access\" : \"Limited Access\"} \n                  disabled\n                  className=\"bg-gray-50\"\n                />\n                <p className=\"text-xs text-gray-500\">Permissions are based on assigned role</p>\n              </div>\n            </div>\n\n            {isAdmin && (\n              <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Administrator Features</h4>\n                <ul className=\"text-sm text-blue-800 space-y-1\">\n                  <li>• Manage financial settings and revenue visibility</li>\n                  <li>• Access all patient records and financial data</li>\n                  <li>• Configure system settings and user permissions</li>\n                  <li>• Generate comprehensive reports and analytics</li>\n                </ul>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Save Settings */}\n        <div className=\"flex justify-end\">\n          <Button onClick={handleSaveSettings} className=\"bg-blue-600 hover:bg-blue-700\">\n            Save Settings\n          </Button>\n        </div>\n      </div>\n    </Layout>\n  );\n}","size_bytes":7744},"client/src/hooks/useAuth.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface Employee {\n  id: number;\n  firstName: string;\n  lastName: string;\n  email: string;\n  roleId: number;\n  isActive: boolean;\n}\n\ninterface AuthState {\n  employee: Employee | null;\n  isAuthenticated: boolean;\n  login: (employee: Employee) => void;\n  logout: () => void;\n}\n\nexport const useAuth = create<AuthState>()(\n  persist(\n    (set) => ({\n      employee: null,\n      isAuthenticated: false,\n      login: (employee) => set({ employee, isAuthenticated: true }),\n      logout: () => set({ employee: null, isAuthenticated: false }),\n    }),\n    {\n      name: 'dental-auth',\n    }\n  )\n);","size_bytes":673},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { loginSchema, type LoginData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Stethoscope, Loader2 } from \"lucide-react\";\n\ninterface LoginResponse {\n  employee: {\n    id: number;\n    firstName: string;\n    lastName: string;\n    email: string;\n    roleId: number;\n    isActive: boolean;\n  };\n}\n\ninterface LoginPageProps {\n  onLogin: (employee: LoginResponse['employee']) => void;\n}\n\nexport default function LoginPage({ onLogin }: LoginPageProps) {\n  const { toast } = useToast();\n  \n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData): Promise<LoginResponse> => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login successful\",\n        description: `Welcome back, ${data.employee.firstName}!`,\n      });\n      onLogin(data.employee);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mb-4\">\n            <Stethoscope className=\"h-6 w-6 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl\">DentalCare Login</CardTitle>\n          <p className=\"text-gray-600\">Enter your credentials to access the system</p>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"admin@dentalcare.com\"\n                        {...field}\n                        disabled={loginMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        {...field}\n                        disabled={loginMutation.isPending}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing in...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </Button>\n            </form>\n          </Form>\n          \n          <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n            <h3 className=\"font-medium text-blue-900 mb-2\">Default Login Credentials:</h3>\n            <div className=\"text-sm text-blue-700\">\n              <p><strong>Email:</strong> admin@dentalcare.com</p>\n              <p><strong>Password:</strong> admin123</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4758},"client/src/hooks/useSettings.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Settings, InsertSettings } from \"@shared/schema\";\n\nexport function useSettings() {\n  const { employee } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: settings, isLoading } = useQuery<Settings>({\n    queryKey: ['/api/settings', employee?.id],\n    queryFn: async () => {\n      const response = await apiRequest('GET', `/api/settings/${employee?.id}`);\n      return response.json();\n    },\n    enabled: !!employee?.id,\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: Partial<InsertSettings>) => {\n      const response = await apiRequest('PUT', `/api/settings/${employee?.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings', employee?.id] });\n    },\n  });\n\n  return {\n    settings,\n    isLoading,\n    updateSettings: updateSettingsMutation.mutate,\n    isUpdating: updateSettingsMutation.isPending,\n  };\n}","size_bytes":1129},"client/src/components/settings/role-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, Shield, Users, Settings, Eye, Save, X } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Role, Employee, InsertRole, InsertEmployee } from \"@shared/schema\";\n\n// Permission categories and their specific permissions\nconst PERMISSION_CATEGORIES = {\n  patients: {\n    name: \"Patient Management\",\n    icon: Users,\n    permissions: [\n      { key: \"view_patients\", name: \"View Patients\", description: \"View patient information and records\" },\n      { key: \"create_patients\", name: \"Create Patients\", description: \"Add new patients to the system\" },\n      { key: \"edit_patients\", name: \"Edit Patients\", description: \"Modify patient information\" },\n      { key: \"delete_patients\", name: \"Delete Patients\", description: \"Remove patients from the system\" },\n      { key: \"view_medical_history\", name: \"View Medical History\", description: \"Access patient medical history\" },\n      { key: \"edit_medical_history\", name: \"Edit Medical History\", description: \"Modify patient medical records\" },\n    ]\n  },\n  appointments: {\n    name: \"Appointments\",\n    icon: Settings,\n    permissions: [\n      { key: \"view_appointments\", name: \"View Appointments\", description: \"View appointment schedule\" },\n      { key: \"create_appointments\", name: \"Create Appointments\", description: \"Schedule new appointments\" },\n      { key: \"edit_appointments\", name: \"Edit Appointments\", description: \"Modify appointment details\" },\n      { key: \"cancel_appointments\", name: \"Cancel Appointments\", description: \"Cancel appointments\" },\n      { key: \"view_calendar\", name: \"View Calendar\", description: \"Access calendar views\" },\n    ]\n  },\n  financial: {\n    name: \"Financial\",\n    icon: Eye,\n    permissions: [\n      { key: \"view_payments\", name: \"View Payments\", description: \"View payment records\" },\n      { key: \"record_payments\", name: \"Record Payments\", description: \"Add new payment records\" },\n      { key: \"view_revenue\", name: \"View Revenue\", description: \"Access revenue reports\" },\n      { key: \"view_financial_reports\", name: \"Financial Reports\", description: \"Generate financial reports\" },\n      { key: \"manage_pricing\", name: \"Manage Pricing\", description: \"Set treatment prices\" },\n    ]\n  },\n  system: {\n    name: \"System Administration\",\n    icon: Shield,\n    permissions: [\n      { key: \"manage_users\", name: \"Manage Users\", description: \"Add, edit, and remove system users\" },\n      { key: \"manage_roles\", name: \"Manage Roles\", description: \"Create and modify user roles\" },\n      { key: \"system_settings\", name: \"System Settings\", description: \"Access system configuration\" },\n      { key: \"view_audit_logs\", name: \"View Audit Logs\", description: \"Access system audit trails\" },\n      { key: \"backup_restore\", name: \"Backup & Restore\", description: \"Perform system backups\" },\n    ]\n  },\n  treatment: {\n    name: \"Treatment Management\",\n    icon: Settings,\n    permissions: [\n      { key: \"view_odontogram\", name: \"View Odontogram\", description: \"View dental charts\" },\n      { key: \"edit_odontogram\", name: \"Edit Odontogram\", description: \"Modify dental charts\" },\n      { key: \"view_treatment_history\", name: \"View Treatment History\", description: \"Access treatment records\" },\n      { key: \"create_treatment_plans\", name: \"Create Treatment Plans\", description: \"Develop treatment plans\" },\n      { key: \"manage_prescriptions\", name: \"Manage Prescriptions\", description: \"Create and manage prescriptions\" },\n    ]\n  },\n  files: {\n    name: \"File Management\",\n    icon: Settings,\n    permissions: [\n      { key: \"view_files\", name: \"View Files\", description: \"View patient files and documents\" },\n      { key: \"upload_files\", name: \"Upload Files\", description: \"Upload new files and documents\" },\n      { key: \"delete_files\", name: \"Delete Files\", description: \"Remove files from the system\" },\n      { key: \"manage_file_categories\", name: \"Manage Categories\", description: \"Organize file categories\" },\n    ]\n  }\n};\n\nconst roleFormSchema = z.object({\n  name: z.string().min(1, \"Role name is required\").max(100, \"Role name must be less than 100 characters\"),\n  description: z.string().max(255, \"Description must be less than 255 characters\").optional(),\n  permissions: z.record(z.string(), z.boolean()).default({}),\n});\n\ntype RoleFormData = z.infer<typeof roleFormSchema>;\n\nexport function RoleManagement() {\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Utility functions\n  const getPermissionCount = (permissions: Record<string, boolean>) => {\n    return Object.values(permissions).filter(Boolean).length;\n  };\n\n  const getTotalPermissions = () => {\n    return Object.values(PERMISSION_CATEGORIES).reduce(\n      (total, category) => total + category.permissions.length,\n      0\n    );\n  };\n\n  // Fetch roles\n  const { data: roles = [], isLoading } = useQuery<Role[]>({\n    queryKey: ['/api/roles'],\n  });\n\n  // Create role mutation\n  const createRoleMutation = useMutation({\n    mutationFn: async (data: RoleFormData) => {\n      const response = await fetch('/api/roles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to create role');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setIsCreateDialogOpen(false);\n      toast({\n        title: \"Role Created\",\n        description: \"New role has been created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create role. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update role mutation\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: RoleFormData }) => {\n      const response = await fetch(`/api/roles/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) throw new Error('Failed to update role');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      setIsEditDialogOpen(false);\n      setSelectedRole(null);\n      toast({\n        title: \"Role Updated\",\n        description: \"Role has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update role. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete role mutation\n  const deleteRoleMutation = useMutation({\n    mutationFn: async (id: number) => {\n      const response = await fetch(`/api/roles/${id}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete role');\n      return response.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/roles'] });\n      toast({\n        title: \"Role Deleted\",\n        description: \"Role has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete role. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateRole = (data: RoleFormData) => {\n    createRoleMutation.mutate(data);\n  };\n\n  const handleUpdateRole = (data: RoleFormData) => {\n    if (selectedRole) {\n      updateRoleMutation.mutate({ id: selectedRole.id, data });\n    }\n  };\n\n  const handleDeleteRole = (id: number) => {\n    deleteRoleMutation.mutate(id);\n  };\n\n  const handleEditRole = (role: Role) => {\n    setSelectedRole(role);\n    setIsEditDialogOpen(true);\n  };\n\n  if (isLoading) {\n    return <div>Loading roles...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold\">Role Management</h3>\n          <p className=\"text-sm text-gray-600\">\n            Create and manage user roles with custom permissions\n          </p>\n        </div>\n        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"flex items-center gap-2\">\n              <Plus className=\"h-4 w-4\" />\n              Create Role\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Role</DialogTitle>\n            </DialogHeader>\n            <RoleForm onSubmit={handleCreateRole} isLoading={createRoleMutation.isPending} />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Roles Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {roles.map((role) => (\n          <Card key={role.id} className=\"relative\">\n            <CardHeader className=\"pb-3\">\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <CardTitle className=\"text-lg\">{role.name}</CardTitle>\n                  {role.description && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{role.description}</p>\n                  )}\n                </div>\n                <div className=\"flex gap-1\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => handleEditRole(role)}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button size=\"sm\" variant=\"ghost\" className=\"text-red-600\">\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Role</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete the \"{role.name}\" role? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => handleDeleteRole(role.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm text-gray-600\">Permissions</span>\n                  <Badge variant=\"secondary\">\n                    {getPermissionCount(role.permissions as Record<string, boolean>)}/{getTotalPermissions()}\n                  </Badge>\n                </div>\n                \n                {/* Permission categories overview */}\n                <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                  {Object.entries(PERMISSION_CATEGORIES).map(([key, category]) => {\n                    const rolePerms = role.permissions as Record<string, boolean>;\n                    const categoryPermissions = category.permissions.filter(\n                      (permission) => rolePerms[permission.key]\n                    ).length;\n                    const totalCategoryPermissions = category.permissions.length;\n                    \n                    return (\n                      <div key={key} className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600\">{category.name}</span>\n                        <span className=\"font-medium\">\n                          {categoryPermissions}/{totalCategoryPermissions}\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Edit Role Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Role: {selectedRole?.name}</DialogTitle>\n          </DialogHeader>\n          {selectedRole && (\n            <RoleForm\n              initialData={selectedRole}\n              onSubmit={handleUpdateRole}\n              isLoading={updateRoleMutation.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface RoleFormProps {\n  initialData?: Role;\n  onSubmit: (data: RoleFormData) => void;\n  isLoading: boolean;\n}\n\nfunction RoleForm({ initialData, onSubmit, isLoading }: RoleFormProps) {\n  const form = useForm<RoleFormData>({\n    resolver: zodResolver(roleFormSchema),\n    defaultValues: {\n      name: initialData?.name || \"\",\n      description: initialData?.description || \"\",\n      permissions: initialData?.permissions || {},\n    },\n  });\n\n  const getTotalPermissions = () => {\n    return Object.values(PERMISSION_CATEGORIES).reduce(\n      (total, category) => total + category.permissions.length,\n      0\n    );\n  };\n\n  const handleSubmit = (data: RoleFormData) => {\n    onSubmit(data);\n  };\n\n  const handlePermissionChange = (permissionKey: string, checked: boolean) => {\n    const currentPermissions = form.getValues(\"permissions\");\n    form.setValue(\"permissions\", {\n      ...currentPermissions,\n      [permissionKey]: checked,\n    });\n  };\n\n  const handleSelectAllCategory = (categoryKey: string, checked: boolean) => {\n    const category = PERMISSION_CATEGORIES[categoryKey as keyof typeof PERMISSION_CATEGORIES];\n    const currentPermissions = form.getValues(\"permissions\");\n    const updatedPermissions = { ...currentPermissions };\n    \n    category.permissions.forEach(permission => {\n      updatedPermissions[permission.key] = checked;\n    });\n    \n    form.setValue(\"permissions\", updatedPermissions);\n  };\n\n  const watchedPermissions = form.watch(\"permissions\");\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Role Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter role name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"description\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Description</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Optional description\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Permissions */}\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h4 className=\"text-lg font-medium\">Permissions</h4>\n            <div className=\"text-sm text-gray-600\">\n              {Object.values(watchedPermissions).filter(Boolean).length}/{getTotalPermissions()} permissions selected\n            </div>\n          </div>\n\n          <div className=\"space-y-6\">\n            {Object.entries(PERMISSION_CATEGORIES).map(([categoryKey, category]) => {\n              const categoryPermissions = category.permissions;\n              const selectedInCategory = categoryPermissions.filter(\n                (permission) => watchedPermissions[permission.key]\n              ).length;\n              const allSelected = selectedInCategory === categoryPermissions.length;\n              const someSelected = selectedInCategory > 0 && selectedInCategory < categoryPermissions.length;\n\n              return (\n                <Card key={categoryKey}>\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <category.icon className=\"h-5 w-5 text-blue-600\" />\n                        <CardTitle className=\"text-base\">{category.name}</CardTitle>\n                        <Badge variant={someSelected ? \"secondary\" : allSelected ? \"default\" : \"outline\"}>\n                          {selectedInCategory}/{categoryPermissions.length}\n                        </Badge>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Label htmlFor={`select-all-${categoryKey}`} className=\"text-sm\">\n                          Select All\n                        </Label>\n                        <Switch\n                          id={`select-all-${categoryKey}`}\n                          checked={allSelected}\n                          onCheckedChange={(checked) => handleSelectAllCategory(categoryKey, checked)}\n                        />\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                      {categoryPermissions.map((permission) => (\n                        <div key={permission.key} className=\"flex items-center space-x-3\">\n                          <Switch\n                            id={permission.key}\n                            checked={watchedPermissions[permission.key] || false}\n                            onCheckedChange={(checked) => handlePermissionChange(permission.key, checked)}\n                          />\n                          <div className=\"flex-1\">\n                            <Label\n                              htmlFor={permission.key}\n                              className=\"text-sm font-medium cursor-pointer\"\n                            >\n                              {permission.name}\n                            </Label>\n                            <p className=\"text-xs text-gray-600\">{permission.description}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-2\">\n          <Button type=\"button\" variant=\"outline\" onClick={() => form.reset()}>\n            Reset\n          </Button>\n          <Button type=\"submit\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : initialData ? \"Update Role\" : \"Create Role\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","size_bytes":20715}}}