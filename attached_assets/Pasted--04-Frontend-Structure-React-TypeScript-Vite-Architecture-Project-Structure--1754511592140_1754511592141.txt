# 04 - Frontend Structure

## 🎨 React + TypeScript + Vite Architecture

### Project Structure
```
DentalClinic.Frontend/
├── public/
│   ├── index.html
│   ├── favicon.ico
│   └── logo192.png
├── src/
│   ├── components/
│   │   ├── common/
│   │   │   ├── Layout/
│   │   │   │   ├── Header.tsx
│   │   │   │   ├── Sidebar.tsx
│   │   │   │   ├── Footer.tsx
│   │   │   │   └── Layout.tsx
│   │   │   ├── UI/
│   │   │   │   ├── Button.tsx
│   │   │   │   ├── Input.tsx
│   │   │   │   ├── Modal.tsx
│   │   │   │   ├── Table.tsx
│   │   │   │   ├── Loading.tsx
│   │   │   │   └── ErrorBoundary.tsx
│   │   │   └── Forms/
│   │   │       ├── FormField.tsx
│   │   │       ├── DatePicker.tsx
│   │   │       └── FileUpload.tsx
│   │   └── features/
│   │       ├── patients/
│   │       │   ├── PatientList.tsx
│   │       │   ├── PatientCard.tsx
│   │       │   ├── PatientForm.tsx
│   │       │   ├── PatientDetails.tsx
│   │       │   ├── PatientSearch.tsx
│   │       │   └── PatientFiles.tsx
│   │       ├── appointments/
│   │       │   ├── AppointmentCalendar.tsx
│   │       │   ├── AppointmentForm.tsx
│   │       │   ├── AppointmentList.tsx
│   │       │   └── AppointmentCard.tsx
│   │       ├── medical-conditions/
│   │       │   ├── MedicalConditionsList.tsx
│   │       │   └── MedicalConditionForm.tsx
│   │       └── files/
│   │           ├── FileUpload.tsx
│   │           ├── FileViewer.tsx
│   │           ├── ImageGallery.tsx
│   │           └── FileList.tsx
│   ├── pages/
│   │   ├── Dashboard.tsx
│   │   ├── Patients/
│   │   │   ├── PatientsPage.tsx
│   │   │   ├── PatientDetailsPage.tsx
│   │   │   └── CreatePatientPage.tsx
│   │   ├── Appointments/
│   │   │   ├── AppointmentsPage.tsx
│   │   │   ├── CalendarPage.tsx
│   │   │   └── CreateAppointmentPage.tsx
│   │   └── Settings/
│   │       └── SettingsPage.tsx
│   ├── hooks/
│   │   ├── api/
│   │   │   ├── usePatients.ts
│   │   │   ├── useAppointments.ts
│   │   │   ├── useMedicalConditions.ts
│   │   │   └── useFiles.ts
│   │   ├── common/
│   │   │   ├── useDebounce.ts
│   │   │   ├── useLocalStorage.ts
│   │   │   ├── usePagination.ts
│   │   │   └── useForm.ts
│   │   └── features/
│   │       ├── usePatientSearch.ts
│   │       └── useFileUpload.ts
│   ├── services/
│   │   ├── api/
│   │   │   ├── apiClient.ts
│   │   │   ├── patientService.ts
│   │   │   ├── appointmentService.ts
│   │   │   ├── medicalConditionService.ts
│   │   │   └── fileService.ts
│   │   ├── storage/
│   │   │   └── localStorage.ts
│   │   └── utils/
│   │       ├── validation.ts
│   │       ├── formatters.ts
│   │       └── constants.ts
│   ├── types/
│   │   ├── api.types.ts
│   │   ├── patient.types.ts
│   │   ├── appointment.types.ts
│   │   ├── medicalCondition.types.ts
│   │   ├── file.types.ts
│   │   └── common.types.ts
│   ├── contexts/
│   │   ├── ThemeContext.tsx
│   │   └── NotificationContext.tsx
│   ├── utils/
│   │   ├── dateUtils.ts
│   │   ├── fileUtils.ts
│   │   ├── validators.ts
│   │   └── helpers.ts
│   ├── styles/
│   │   ├── globals.css
│   │   ├── variables.css
│   │   └── components.css
│   ├── App.tsx
│   ├── main.tsx
│   └── vite-env.d.ts
├── package.json
├── tsconfig.json
├── vite.config.ts
├── tailwind.config.js
├── postcss.config.js
└── .eslintrc.js
```

## 📦 Dependencies & Tech Stack

### Core Dependencies
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "typescript": "^5.0.0",
    
    "@tanstack/react-query": "^4.24.0",
    "axios": "^1.3.0",
    
    "antd": "^5.1.0",
    "@ant-design/icons": "^5.0.0",
    
    "react-hook-form": "^7.43.0",
    "@hookform/resolvers": "^2.9.0",
    "zod": "^3.20.0",
    
    "dayjs": "^1.11.0",
    "react-image-gallery": "^1.2.0",
    "react-zoom-pan-pinch": "^3.1.0",
    "react-compare-slider": "^2.2.0",
    "@react-three/fiber": "^8.11.0",
    "@react-three/drei": "^9.52.0",
    "three": "^0.149.0",
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@vitejs/plugin-react": "^3.1.0",
    "vite": "^4.1.0",
    
    "tailwindcss": "^3.2.0",
    "autoprefixer": "^10.4.0",
    "postcss": "^8.4.0",
    
    "eslint": "^8.33.0",
    "@typescript-eslint/eslint-plugin": "^5.51.0",
    "@typescript-eslint/parser": "^5.51.0",
    "eslint-plugin-react": "^7.32.0",
    "eslint-plugin-react-hooks": "^4.6.0"
  }
}
```

## 🎯 State Management Strategy

### React Query for Server State
```typescript
// hooks/api/usePatients.ts
export const usePatients = (params: PatientsQueryParams) => {
  return useQuery({
    queryKey: ['patients', params],
    queryFn: () => patientService.getPatients(params),
    staleTime: 5 * 60 * 1000, // 5 minutes
    cacheTime: 10 * 60 * 1000, // 10 minutes
  });
};

export const useCreatePatient = () => {
  const queryClient = useQueryClient();
  
  return useMutation({
    mutationFn: patientService.createPatient,
    onSuccess: () => {
      queryClient.invalidateQueries(['patients']);
      message.success('Patient created successfully');
    },
    onError: (error) => {
      message.error('Failed to create patient');
    },
  });
};

export const usePatient = (id: number) => {
  return useQuery({
    queryKey: ['patient', id],
    queryFn: () => patientService.getPatient(id),
    enabled: !!id,
  });
};
```

### Local State with React Hooks
```typescript
// contexts/ThemeContext.tsx
interface ThemeContextType {
  isDarkMode: boolean;
  toggleTheme: () => void;
}

export const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isDarkMode, setIsDarkMode] = useState(false);

  const toggleTheme = useCallback(() => {
    setIsDarkMode(prev => !prev);
  }, []);

  return (
    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error('useTheme must be used within ThemeProvider');
  }
  return context;
};
```

## 🌐 API Layer

### Axios Configuration
```typescript
// services/api/apiClient.ts
import axios from 'axios';

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000/api';

export const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor
apiClient.interceptors.request.use(
  (config) => {
    // Add auth token if exists
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Response interceptor
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      localStorage.removeItem('auth_token');
      window.location.href = '/login';
    }
    return Promise.reject(error);
  }
);
```

### Service Layer
```typescript
// services/api/patientService.ts
export interface PatientsQueryParams {
  search?: string;
  pageNumber?: number;
  pageSize?: number;
}

export interface CreatePatientRequest {
  firstName: string;
  lastName: string;
  phone: string;
  email?: string;
  dateOfBirth: string;
  address?: string;
  gender: Gender;
  jmbg: string;
}

class PatientService {
  async getPatients(params: PatientsQueryParams): Promise<PaginatedResponse<Patient>> {
    const response = await apiClient.get('/patients', { params });
    return response.data;
  }

  async getPatient(id: number): Promise<Patient> {
    const response = await apiClient.get(`/patients/${id}`);
    return response.data;
  }

  async createPatient(patient: CreatePatientRequest): Promise<Patient> {
    const response = await apiClient.post('/patients', patient);
    return response.data;
  }

  async updatePatient(id: number, patient: Partial<CreatePatientRequest>): Promise<Patient> {
    const response = await apiClient.put(`/patients/${id}`, patient);
    return response.data;
  }

  async deletePatient(id: number): Promise<void> {
    await apiClient.delete(`/patients/${id}`);
  }

  async searchPatients(searchTerm: string): Promise<Patient[]> {
    const response = await apiClient.get('/patients', {
      params: { search: searchTerm, pageSize: 10 }
    });
    return response.data.items;
  }
}

export const patientService = new PatientService();
```

## 🎨 UI Components with Ant Design

### Layout Component
```typescript
// components/common/Layout/Layout.tsx
import { Layout as AntLayout, Menu, theme } from 'antd';
import { 
  UserOutlined, 
  CalendarOutlined, 
  FileOutlined, 
  SettingOutlined 
} from '@ant-design/icons';

const { Header, Sider, Content } = AntLayout;

interface LayoutProps {
  children: React.ReactNode;
}

export const Layout: React.FC<LayoutProps> = ({ children }) => {
  const [collapsed, setCollapsed] = useState(false);
  const { token: { colorBgContainer } } = theme.useToken();
  const navigate = useNavigate();
  const location = useLocation();

  const menuItems = [
    {
      key: '/',
      icon: <UserOutlined />,
      label: 'Dashboard',
    },
    {
      key: '/patients',
      icon: <UserOutlined />,
      label: 'Patients',
    },
    {
      key: '/appointments',
      icon: <CalendarOutlined />,
      label: 'Appointments',
    },
    {
      key: '/settings',
      icon: <SettingOutlined />,
      label: 'Settings',
    },
  ];

  return (
    <AntLayout style={{ minHeight: '100vh' }}>
      <Sider 
        trigger={null} 
        collapsible 
        collapsed={collapsed}
        style={{ background: colorBgContainer }}
      >
        <div className="demo-logo-vertical" />
        <Menu
          theme="light"
          mode="inline"
          selectedKeys={[location.pathname]}
          items={menuItems}
          onClick={({ key }) => navigate(key)}
        />
      </Sider>
      <AntLayout>
        <Header style={{ padding: 0, background: colorBgContainer }}>
          <Button
            type="text"
            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
            onClick={() => setCollapsed(!collapsed)}
            style={{ fontSize: '16px', width: 64, height: 64 }}
          />
        </Header>
        <Content style={{ margin: '24px 16px', padding: 24, background: colorBgContainer }}>
          {children}
        </Content>
      </AntLayout>
    </AntLayout>
  );
};
```

### Patient List Component
```typescript
// components/features/patients/PatientList.tsx
interface PatientListProps {
  searchTerm?: string;
}

export const PatientList: React.FC<PatientListProps> = ({ searchTerm }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10;

  const { data, isLoading, error } = usePatients({
    search: searchTerm,
    pageNumber: currentPage,
    pageSize,
  });

  const columns: ColumnType<Patient>[] = [
    {
      title: 'Name',
      key: 'name',
      render: (_, record) => `${record.firstName} ${record.lastName}`,
      sorter: (a, b) => a.lastName.localeCompare(b.lastName),
    },
    {
      title: 'Phone',
      dataIndex: 'phone',
      key: 'phone',
    },
    {
      title: 'Email',
      dataIndex: 'email',
      key: 'email',
    },
    {
      title: 'Date of Birth',
      dataIndex: 'dateOfBirth',
      key: 'dateOfBirth',
      render: (date) => dayjs(date).format('DD/MM/YYYY'),
    },
    {
      title: 'Actions',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button type="link" onClick={() => navigate(`/patients/${record.id}`)}>
            View
          </Button>
          <Button type="link" onClick={() => navigate(`/patients/${record.id}/edit`)}>
            Edit
          </Button>
        </Space>
      ),
    },
  ];

  if (error) {
    return <Alert message="Error loading patients" type="error" />;
  }

  return (
    <>
      <Table
        columns={columns}
        dataSource={data?.items}
        rowKey="id"
        loading={isLoading}
        pagination={{
          current: currentPage,
          pageSize,
          total: data?.totalCount,
          onChange: setCurrentPage,
          showSizeChanger: false,
          showTotal: (total, range) =>
            `${range[0]}-${range[1]} of ${total} patients`,
        }}
      />
    </>
  );
};
```

## 📝 Forms with React Hook Form + Zod

### Patient Form
```typescript
// components/features/patients/PatientForm.tsx
const patientSchema = z.object({
  firstName: z.string().min(1, 'First name is required').max(100),
  lastName: z.string().min(1, 'Last name is required').max(100),
  phone: z.string().min(1, 'Phone is required').regex(/^[0-9+\-\s()]+$/, 'Invalid phone format'),
  email: z.string().email('Invalid email format').optional().or(z.literal('')),
  dateOfBirth: z.string().min(1, 'Date of birth is required'),
  address: z.string().optional(),
  gender: z.enum(['Male', 'Female']),
  jmbg: z.string().length(13, 'JMBG must be 13 digits').regex(/^\d{13}$/, 'JMBG must contain only digits'),
});

type PatientFormData = z.infer<typeof patientSchema>;

interface PatientFormProps {
  initialData?: Patient;
  onSubmit: (data: PatientFormData) => void;
  loading?: boolean;
}

export const PatientForm: React.FC<PatientFormProps> = ({ 
  initialData, 
  onSubmit, 
  loading 
}) => {
  const {
    control,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<PatientFormData>({
    resolver: zodResolver(patientSchema),
    defaultValues: initialData ? {
      firstName: initialData.firstName,
      lastName: initialData.lastName,
      phone: initialData.phone,
      email: initialData.email || '',
      dateOfBirth: dayjs(initialData.dateOfBirth).format('YYYY-MM-DD'),
      address: initialData.address || '',
      gender: initialData.gender,
      jmbg: initialData.jmbg,
    } : undefined,
  });

  return (
    <Form layout="vertical" onFinish={handleSubmit(onSubmit)}>
      <Row gutter={16}>
        <Col span={12}>
          <Controller
            name="firstName"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="First Name"
                validateStatus={errors.firstName ? 'error' : ''}
                help={errors.firstName?.message}
              >
                <Input {...field} placeholder="Enter first name" />
              </Form.Item>
            )}
          />
        </Col>
        <Col span={12}>
          <Controller
            name="lastName"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="Last Name"
                validateStatus={errors.lastName ? 'error' : ''}
                help={errors.lastName?.message}
              >
                <Input {...field} placeholder="Enter last name" />
              </Form.Item>
            )}
          />
        </Col>
      </Row>

      <Row gutter={16}>
        <Col span={12}>
          <Controller
            name="phone"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="Phone"
                validateStatus={errors.phone ? 'error' : ''}
                help={errors.phone?.message}
              >
                <Input {...field} placeholder="Enter phone number" />
              </Form.Item>
            )}
          />
        </Col>
        <Col span={12}>
          <Controller
            name="email"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="Email"
                validateStatus={errors.email ? 'error' : ''}
                help={errors.email?.message}
              >
                <Input {...field} placeholder="Enter email address" />
              </Form.Item>
            )}
          />
        </Col>
      </Row>

      <Row gutter={16}>
        <Col span={8}>
          <Controller
            name="dateOfBirth"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="Date of Birth"
                validateStatus={errors.dateOfBirth ? 'error' : ''}
                help={errors.dateOfBirth?.message}
              >
                <Input type="date" {...field} />
              </Form.Item>
            )}
          />
        </Col>
        <Col span={8}>
          <Controller
            name="gender"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="Gender"
                validateStatus={errors.gender ? 'error' : ''}
                help={errors.gender?.message}
              >
                <Select {...field} placeholder="Select gender">
                  <Select.Option value="Male">Male</Select.Option>
                  <Select.Option value="Female">Female</Select.Option>
                </Select>
              </Form.Item>
            )}
          />
        </Col>
        <Col span={8}>
          <Controller
            name="jmbg"
            control={control}
            render={({ field }) => (
              <Form.Item
                label="JMBG"
                validateStatus={errors.jmbg ? 'error' : ''}
                help={errors.jmbg?.message}
              >
                <Input {...field} placeholder="Enter JMBG" maxLength={13} />
              </Form.Item>
            )}
          />
        </Col>
      </Row>

      <Controller
        name="address"
        control={control}
        render={({ field }) => (
          <Form.Item label="Address">
            <Input.TextArea {...field} placeholder="Enter address" rows={3} />
          </Form.Item>
        )}
      />

      <Form.Item>
        <Space>
          <Button type="primary" htmlType="submit" loading={loading}>
            {initialData ? 'Update Patient' : 'Create Patient'}
          </Button>
          <Button onClick={() => reset()}>
            Reset
          </Button>
        </Space>
      </Form.Item>
    </Form>
  );
};
```

## 📷 Advanced Medical Image Viewer

```typescript
// components/features/files/MedicalImageViewer.tsx
import ImageGallery from 'react-image-gallery';
import { TransformWrapper, TransformComponent } from 'react-zoom-pan-pinch';
import { ReactCompareSlider, ReactCompareSliderImage } from 'react-compare-slider';

interface MedicalImageViewerProps {
  images: PatientFile[];
  initialIndex?: number;
  showComparison?: boolean;
}

export const MedicalImageViewer: React.FC<MedicalImageViewerProps> = ({
  images,
  initialIndex = 0,
  showComparison = false
}) => {
  const [currentIndex, setCurrentIndex] = useState(initialIndex);
  const [viewMode, setViewMode] = useState<'gallery' | 'zoom' | 'compare'>('gallery');

  const galleryImages = images.map(file => ({
    original: file.filePath,
    thumbnail: file.thumbnailPath || file.filePath,
    description: file.description,
  }));

  const renderCustomControls = () => (
    <div className="image-controls">
      <Space>
        <Button 
          type={viewMode === 'gallery' ? 'primary' : 'default'}
          onClick={() => setViewMode('gallery')}
          icon={<PictureOutlined />}
        >
          Gallery
        </Button>
        <Button 
          type={viewMode === 'zoom' ? 'primary' : 'default'}
          onClick={() => setViewMode('zoom')}
          icon={<ZoomInOutlined />}
        >
          Zoom
        </Button>
        {images.length >= 2 && (
          <Button 
            type={viewMode === 'compare' ? 'primary' : 'default'}
            onClick={() => setViewMode('compare')}
            icon={<SwapOutlined />}
          >
            Compare
          </Button>
        )}
        <Button icon={<DownloadOutlined />}>
          Download
        </Button>
        <Button icon={<FullscreenOutlined />}>
          Fullscreen
        </Button>
      </Space>
    </div>
  );

  if (viewMode === 'compare' && images.length >= 2) {
    return (
      <div className="medical-image-viewer">
        {renderCustomControls()}
        <ReactCompareSlider
          itemOne={<ReactCompareSliderImage src={images[0].filePath} alt="Before" />}
          itemTwo={<ReactCompareSliderImage src={images[1].filePath} alt="After" />}
          style={{ height: '500px' }}
        />
      </div>
    );
  }

  if (viewMode === 'zoom') {
    return (
      <div className="medical-image-viewer">
        {renderCustomControls()}
        <TransformWrapper
          initialScale={1}
          initialPositionX={0}
          initialPositionY={0}
          wheel={{ step: 0.1 }}
        >
          {({ zoomIn, zoomOut, resetTransform }) => (
            <>
              <div className="zoom-controls">
                <Space>
                  <Button onClick={() => zoomIn()}>Zoom In</Button>
                  <Button onClick={() => zoomOut()}>Zoom Out</Button>
                  <Button onClick={() => resetTransform()}>Reset</Button>
                </Space>
              </div>
              <TransformComponent>
                <img 
                  src={images[currentIndex]?.filePath} 
                  alt="Medical image"
                  style={{ width: '100%', height: 'auto' }}
                />
              </TransformComponent>
            </>
          )}
        </TransformWrapper>
      </div>
    );
  }

  return (
    <div className="medical-image-viewer">
      {renderCustomControls()}
      <ImageGallery
        items={galleryImages}
        startIndex={currentIndex}
        onSlide={setCurrentIndex}
        showNav={true}
        showThumbnails={true}
        showPlayButton={false}
        showFullscreenButton={true}
        renderCustomControls={renderCustomControls}
      />
    </div>
  );
};
```

## 🦷 3D Model Viewer for STL Files

```typescript
// components/features/files/ModelViewer3D.tsx
import { Canvas } from '@react-three/fiber';
import { OrbitControls, STLLoader } from '@react-three/drei';
import { Suspense } from 'react';

interface ModelViewer3DProps {
  stlFile: PatientFile;
}

const STLModel: React.FC<{ url: string }> = ({ url }) => {
  const geometry = useLoader(STLLoader, url);
  
  return (
    <mesh geometry={geometry}>
      <meshPhongMaterial color="#ffffff" />
    </mesh>
  );
};

export const ModelViewer3D: React.FC<ModelViewer3DProps> = ({ stlFile }) => {
  return (
    <div style={{ height: '500px', width: '100%' }}>
      <Canvas camera={{ position: [0, 0, 5] }}>
        <ambientLight intensity={0.6} />
        <directionalLight position={[10, 10, 5]} intensity={1} />
        <Suspense fallback={<div>Loading 3D model...</div>}>
          <STLModel url={stlFile.filePath} />
        </Suspense>
        <OrbitControls />
      </Canvas>
    </div>
  );
};
```

```typescript
// components/features/files/FileUpload.tsx
interface FileUploadProps {
  patientId: number;
  onUploadSuccess: (file: PatientFile) => void;
}

export const FileUpload: React.FC<FileUploadProps> = ({ patientId, onUploadSuccess }) => {
  const [uploading, setUploading] = useState(false);

  const uploadFile = async (file: File): Promise<boolean> => {
    try {
      setUploading(true);
      const formData = new FormData();
      formData.append('file', file);
      formData.append('patientId', patientId.toString());
      formData.append('description', '');

      const response = await apiClient.post('/files/upload', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        onUploadProgress: (progressEvent) => {
          const percent = Math.round((progressEvent.loaded * 100) / (progressEvent.total || 1));
          // Update progress
        },
      });

      onUploadSuccess(response.data);
      message.success('File uploaded successfully');
      return true;
    } catch (error) {
      message.error('Failed to upload file');
      return false;
    } finally {
      setUploading(false);
    }
  };

  const props: UploadProps = {
    name: 'file',
    multiple: true,
    customRequest: async ({ file, onSuccess, onError }) => {
      const success = await uploadFile(file as File);
      if (success && onSuccess) {
        onSuccess('ok');
      } else if (onError) {
        onError(new Error('Upload failed'));
      }
    },
    beforeUpload: (file) => {
      const allowedTypes = [
        'image/jpeg', 'image/png', 'image/tiff', 'image/bmp',
        'application/pdf', 'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
      ];
      
      if (!allowedTypes.includes(file.type)) {
        message.error('File type not supported');
        return false;
      }
      
      return true;
    },
  };

  return (
    <Dragger {...props} loading={uploading}>
      <p className="ant-upload-drag-icon">
        <InboxOutlined />
      </p>
      <p className="ant-upload-text">Click or drag files to this area to upload</p>
      <p className="ant-upload-hint">
        Support for images, documents, and medical files. No size limit.
      </p>
    </Dragger>
  );
};
```

## 🎯 TypeScript Types

```typescript
// types/patient.types.ts
export interface Patient {
  id: number;
  firstName: string;
  lastName: string;
  phone: string;
  email?: string;
  dateOfBirth: string;
  address?: string;
  gender: Gender;
  jmbg: string;
  statusId: number;
  createdAt: string;
  updatedAt: string;
}

export enum Gender {
  Male = 'Male',
  Female = 'Female'
}

export interface PaginatedResponse<T> {
  items: T[];
  totalCount: number;
  pageNumber: number;
  pageSize: number;
  totalPages: number;
}
```

## 🚀 Vite Configuration

```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 5173,
    proxy: {
      '/api': {
        target: 'http://localhost:5000',
        changeOrigin: true,
      },
    },
  },
  build: {
    outDir: 'dist',
    sourcemap: true,
  },
})
```

## 📱 Responsive Design Strategy

### Tailwind + Ant Design
```css
/* styles/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom medical theme */
:root {
  --primary-color: #1890ff;
  --success-color: #52c41a;
  --warning-color: #faad14;
  --error-color: #f5222d;
  --text-color: #262626;
  --bg-color: #f0f2f5;
}

/* Responsive breakpoints */
@media (max-width: 768px) {
  .ant-table {
    font-size: 12px;
  }
  
  .ant-form-item {
    margin-bottom: 16px;
  }
}
```

## 📝 Napomene o budućim integracijama

### **Setmore.com integracija:**
- API integration za scheduling
- Webhook handling za sync termina
- Two-way sync sa lokalnom bazom
- Fallback na lokalni kalendar

Da li da krenemo sa **05-docker-infrastructure.md**?